
FlashReadWrite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         000000b8  00020000  00020000  0000afd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000ab6e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000003ae  00802000  0000ab6e  0000ac22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000097e  008023ae  008023ae  0000b088  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b0e4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000850  00000000  00000000  0000b128  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00018b01  00000000  00000000  0000b978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c95  00000000  00000000  00024479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007e41  00000000  00000000  0002810e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002aa8  00000000  00000000  0002ff50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004df9  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e075  00000000  00000000  000377f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c58  00000000  00000000  00045868  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <EraseAppTablePage>:
 *  \param pageAddress Page address to the page to erase.
 */
void EraseAppTablePage(uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
   20000:	68 2f       	mov	r22, r24
   20002:	70 e0       	ldi	r23, 0x00	; 0
   20004:	76 2f       	mov	r23, r22
   20006:	66 27       	eor	r22, r22
   20008:	77 0f       	add	r23, r23
	
	/* Perform page erase. */
	SP_EraseApplicationPage(APP_SECTION_START + tableAddress);
   2000a:	80 e0       	ldi	r24, 0x00	; 0
   2000c:	90 e0       	ldi	r25, 0x00	; 0
   2000e:	0e 94 3c 08 	call	0x1078	; 0x1078 <SP_EraseApplicationPage>

	/* Wait for NVM to finish. */
	SP_WaitForSPM();
   20012:	0e 94 85 08 	call	0x110a	; 0x110a <SP_WaitForSPM>
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   20016:	10 92 ca 01 	sts	0x01CA, r1
   2001a:	08 95       	ret

0002001c <EraseWriteAppTablePage>:
 *  \param pageAddress Page address to the page to erase/write.
 */
void EraseWriteAppTablePage(uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
   2001c:	68 2f       	mov	r22, r24
   2001e:	70 e0       	ldi	r23, 0x00	; 0
   20020:	76 2f       	mov	r23, r22
   20022:	66 27       	eor	r22, r22
   20024:	77 0f       	add	r23, r23
	
	/* Perform page erase. */
	SP_EraseWriteApplicationPage(APP_SECTION_START + tableAddress);
   20026:	80 e0       	ldi	r24, 0x00	; 0
   20028:	90 e0       	ldi	r25, 0x00	; 0
   2002a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SP_EraseWriteApplicationPage>

	/* Wait for NVM to finish. */
	SP_WaitForSPM();
   2002e:	0e 94 85 08 	call	0x110a	; 0x110a <SP_WaitForSPM>
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   20032:	10 92 ca 01 	sts	0x01CA, r1
   20036:	08 95       	ret

00020038 <WriteAppTablePage>:
 *  \param pageAddress Page address to the page to write.
 */
void WriteAppTablePage(uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
   20038:	68 2f       	mov	r22, r24
   2003a:	70 e0       	ldi	r23, 0x00	; 0
   2003c:	76 2f       	mov	r23, r22
   2003e:	66 27       	eor	r22, r22
   20040:	77 0f       	add	r23, r23
	
	/* Perform page write. */
	SP_WriteApplicationPage(APP_SECTION_START + tableAddress);
   20042:	80 e0       	ldi	r24, 0x00	; 0
   20044:	90 e0       	ldi	r25, 0x00	; 0
   20046:	0e 94 58 08 	call	0x10b0	; 0x10b0 <SP_WriteApplicationPage>

	/* Wait for NVM to finish. */
	SP_WaitForSPM();
   2004a:	0e 94 85 08 	call	0x110a	; 0x110a <SP_WaitForSPM>
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   2004e:	10 92 ca 01 	sts	0x01CA, r1
   20052:	08 95       	ret

00020054 <LoadAppTableWord>:
 *  \param highByte     The high byte of the word to load.
 */
void LoadAppTableWord(uint16_t tableAddress, uint8_t lowByte, uint8_t highByte)
{
	/* Perform word load. */
	SP_LoadFlashWord(tableAddress, ((uint16_t) highByte << 8) | lowByte);
   20054:	70 e0       	ldi	r23, 0x00	; 0
   20056:	74 2b       	or	r23, r20
   20058:	0e 94 42 08 	call	0x1084	; 0x1084 <SP_LoadFlashWord>

	/* Wait for NVM to finish. */
	SP_WaitForSPM();
   2005c:	0e 94 85 08 	call	0x110a	; 0x110a <SP_WaitForSPM>
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   20060:	10 92 ca 01 	sts	0x01CA, r1
   20064:	08 95       	ret

00020066 <ReadFlashPage>:
 *  \param pageAddress  Page address to read from. 
 */
void ReadFlashPage(const uint8_t * data, uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
   20066:	46 2f       	mov	r20, r22
   20068:	50 e0       	ldi	r21, 0x00	; 0
   2006a:	54 2f       	mov	r21, r20
   2006c:	44 27       	eor	r20, r20
   2006e:	55 0f       	add	r21, r21
	
	/* Read the flash page into the buffer. */
	SP_ReadFlashPage(data, APP_SECTION_START + tableAddress);
   20070:	60 e0       	ldi	r22, 0x00	; 0
   20072:	70 e0       	ldi	r23, 0x00	; 0
   20074:	0e 94 47 08 	call	0x108e	; 0x108e <SP_ReadFlashPage>
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   20078:	10 92 ca 01 	sts	0x01CA, r1
   2007c:	08 95       	ret

0002007e <SP_LoadFlashPage>:
		
.section .BOOT, "ax"
.global SP_LoadFlashPage

SP_LoadFlashPage:
	clr	ZL              ; Clear low byte of Z, to indicate start of page.
   2007e:	ee 27       	eor	r30, r30
	clr	ZH              ; Clear high byte of Z, to indicate start of page.
   20080:	ff 27       	eor	r31, r31

	out	RAMPX, r1       ; Clear RAMPX pointer.
   20082:	19 be       	out	0x39, r1	; 57
	movw	XL, r24         ; Load X with data buffer address.
   20084:	dc 01       	movw	r26, r24

	ldi 	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command code in R20.
   20086:	43 e2       	ldi	r20, 0x23	; 35
	sts	NVM_CMD, r20                       ; Load it into NVM command register.
   20088:	40 93 ca 01 	sts	0x01CA, r20

#if FLASH_PAGE_SIZE > 512
	ldi	r22, ((FLASH_PAGE_SIZE/2) >> 8)
#endif

	ldi	r21, ((FLASH_PAGE_SIZE/2)&0xFF)    ; Load R21 with page word count.
   2008c:	50 e0       	ldi	r21, 0x00	; 0
	ldi	r18, CCP_SPM_gc                    ; Prepare Protect SPM signature in R16.
   2008e:	2d e9       	ldi	r18, 0x9D	; 157

00020090 <SP_LoadFlashPage_1>:

SP_LoadFlashPage_1:
	ld	r0, X+         ; Load low byte from buffer into R0.
   20090:	0d 90       	ld	r0, X+
	ld	r1, X+         ; Load high byte from buffer into R1.
   20092:	1d 90       	ld	r1, X+
	sts	CCP, r18       ; Enable SPM operation (this disables interrupts for 4 cycles).
   20094:	20 93 34 00 	sts	0x0034, r18
	spm                    ; Self-program.
   20098:	e8 95       	spm
	adiw	ZL, 2          ; Move Z to next Flash word.
   2009a:	32 96       	adiw	r30, 0x02	; 2

#if FLASH_PAGE_SIZE > 512
	subi	r21, 1         ; Decrement word count.
	sbci	r22, 0
#else
	dec	r21            ; Decrement word count.
   2009c:	5a 95       	dec	r21
#endif

	brne	SP_LoadFlashPage_1   ; Repeat until word cont is zero.
   2009e:	c1 f7       	brne	.-16     	; 0x20090 <SP_LoadFlashPage_1>

	clr	r1                   ; Clear R1 for GCC _zero_reg_ to function properly.
   200a0:	11 24       	eor	r1, r1
	ret
   200a2:	08 95       	ret

000200a4 <SP_CommonSPM>:
; ---

.section .BOOT, "ax"

SP_CommonSPM:
	movw	ZL, r24          ; Load R25:R24 into Z.
   200a4:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20     ; Load prepared command into NVM Command register.
   200a6:	40 93 ca 01 	sts	0x01CA, r20
	ldi	r18, CCP_SPM_gc  ; Prepare Protect SPM signature in R18
   200aa:	2d e9       	ldi	r18, 0x9D	; 157
	sts	CCP, r18         ; Enable SPM operation (this disables interrupts for 4 cycles).
   200ac:	20 93 34 00 	sts	0x0034, r18
	spm                      ; Self-program.
   200b0:	e8 95       	spm
	clr	r1               ; Clear R1 for GCC _zero_reg_ to function properly.
   200b2:	11 24       	eor	r1, r1
	out	RAMPZ, r19       ; Restore RAMPZ register.
   200b4:	3b bf       	out	0x3b, r19	; 59
	ret
   200b6:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__ctors_end>
       4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
       8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
       c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      10:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      14:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      18:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      1c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      20:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      24:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      28:	0c 94 d8 3e 	jmp	0x7db0	; 0x7db0 <__vector_10>
      2c:	0c 94 65 3e 	jmp	0x7cca	; 0x7cca <__vector_11>
      30:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      34:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      38:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      3c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      40:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      44:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      48:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      4c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      50:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      54:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      58:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      5c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      60:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      64:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__vector_25>
      68:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__vector_26>
      6c:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__vector_27>
      70:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__vector_28>
      74:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__vector_29>
      78:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__vector_30>
      7c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      80:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      84:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      88:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      8c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      90:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      94:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      98:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      9c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      a0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      a4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      a8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      ac:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      b0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      b4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      b8:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_46>
      bc:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_47>
      c0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      c4:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_49>
      c8:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_50>
      cc:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      d0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      d4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      d8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      dc:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      e0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      e4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
      e8:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__vector_58>
      ec:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__vector_59>
      f0:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__vector_60>
      f4:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__vector_61>
      f8:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__vector_62>
      fc:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__vector_63>
     100:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     104:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     108:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     10c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     110:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     114:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     118:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <__vector_70>
     11c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     120:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     124:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     128:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     12c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     130:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     134:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     138:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     13c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     140:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     144:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     148:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     14c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     150:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     154:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     158:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     15c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     160:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__vector_88>
     164:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__vector_89>
     168:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <__vector_90>
     16c:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__vector_91>
     170:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     174:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     178:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     17c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     180:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     184:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     188:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     18c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     190:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     194:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     198:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     19c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1a0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1a4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1a8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1ac:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1b0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1b4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1b8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1bc:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1c0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1c4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1c8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1cc:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1d0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1d4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1d8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1dc:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__vector_119>
     1e0:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__vector_120>
     1e4:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__vector_121>
     1e8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1ec:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1f0:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1f4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1f8:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__bad_interrupt>
     1fc:	87 13       	cpse	r24, r23
     1fe:	94 13       	cpse	r25, r20
     200:	a2 13       	cpse	r26, r18
     202:	af 13       	cpse	r26, r31
     204:	bd 13       	cpse	r27, r29
     206:	f8 13       	cpse	r31, r24
     208:	05 14       	cp	r0, r5
     20a:	30 14       	cp	r3, r0
     20c:	66 15       	cp	r22, r6
     20e:	73 15       	cp	r23, r3
     210:	80 15       	cp	r24, r0
     212:	8d 15       	cp	r24, r13
     214:	9a 15       	cp	r25, r10
     216:	b5 15       	cp	r27, r5
     218:	c2 15       	cp	r28, r2
     21a:	cf 15       	cp	r28, r15
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 05       	cpc	r19, r15
     24a:	a8 4c       	sbci	r26, 0xC8	; 200
     24c:	cd b2       	in	r12, 0x1d	; 29
     24e:	d4 4e       	sbci	r29, 0xE4	; 228
     250:	b9 38       	cpi	r27, 0x89	; 137
     252:	36 a9       	ldd	r19, Z+54	; 0x36
     254:	02 0c       	add	r0, r2
     256:	50 b9       	out	0x00, r21	; 0
     258:	91 86       	std	Z+9, r9	; 0x09
     25a:	88 08       	sbc	r8, r8
     25c:	3c a6       	std	Y+44, r3	; 0x2c
     25e:	aa aa       	std	Y+50, r10	; 0x32
     260:	2a be       	out	0x3a, r2	; 58
     262:	00 00       	nop
     264:	00 80       	ld	r0, Z
     266:	3f 07       	cpc	r19, r31
     268:	63 42       	sbci	r22, 0x23	; 35
     26a:	36 b7       	in	r19, 0x36	; 54
     26c:	9b d8       	rcall	.-3786   	; 0xfffff3a4 <__eeprom_end+0xff7ef3a4>
     26e:	a7 1a       	sub	r10, r23
     270:	39 68       	ori	r19, 0x89	; 137
     272:	56 18       	sub	r5, r6
     274:	ae ba       	out	0x1e, r10	; 30
     276:	ab 55       	subi	r26, 0x5B	; 91
     278:	8c 1d       	adc	r24, r12
     27a:	3c b7       	in	r19, 0x3c	; 60
     27c:	cc 57       	subi	r28, 0x7C	; 124
     27e:	63 bd       	out	0x23, r22	; 35
     280:	6d ed       	ldi	r22, 0xDD	; 221
     282:	fd 75       	andi	r31, 0x5D	; 93
     284:	3e f6       	brtc	.-114    	; 0x214 <__SREG__+0x1d5>
     286:	17 72       	andi	r17, 0x27	; 39
     288:	31 bf       	out	0x31, r19	; 49
     28a:	00 00       	nop
     28c:	00 80       	ld	r0, Z
     28e:	3f 08       	sbc	r3, r15
     290:	00 00       	nop
     292:	00 be       	out	0x30, r0	; 48
     294:	92 24       	eor	r9, r2
     296:	49 12       	cpse	r4, r25
     298:	3e ab       	std	Y+54, r19	; 0x36
     29a:	aa aa       	std	Y+50, r10	; 0x32
     29c:	2a be       	out	0x3a, r2	; 58
     29e:	cd cc       	rjmp	.-1638   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
     2a0:	cc 4c       	sbci	r28, 0xCC	; 204
     2a2:	3e 00       	.word	0x003e	; ????
     2a4:	00 00       	nop
     2a6:	80 be       	out	0x30, r8	; 48
     2a8:	ab aa       	std	Y+51, r10	; 0x33
     2aa:	aa aa       	std	Y+50, r10	; 0x32
     2ac:	3e 00       	.word	0x003e	; ????
     2ae:	00 00       	nop
     2b0:	00 bf       	out	0x30, r16	; 48
     2b2:	00 00       	nop
     2b4:	00 80       	ld	r0, Z
     2b6:	3f 00       	.word	0x003f	; ????
     2b8:	00 00       	nop
     2ba:	00 00       	nop
     2bc:	08 41       	sbci	r16, 0x18	; 24
     2be:	78 d3       	rcall	.+1776   	; 0x9b0 <__c.4409+0x6f>
     2c0:	bb 43       	sbci	r27, 0x3B	; 59
     2c2:	87 d1       	rcall	.+782    	; 0x5d2 <__c.5267+0x26>
     2c4:	13 3d       	cpi	r17, 0xD3	; 211
     2c6:	19 0e       	add	r1, r25
     2c8:	3c c3       	rjmp	.+1656   	; 0x942 <__c.4409+0x1>
     2ca:	bd 42       	sbci	r27, 0x2D	; 45
     2cc:	82 ad       	ldd	r24, Z+58	; 0x3a
     2ce:	2b 3e       	cpi	r18, 0xEB	; 235
     2d0:	68 ec       	ldi	r22, 0xC8	; 200
     2d2:	82 76       	andi	r24, 0x62	; 98
     2d4:	be d9       	rcall	.-3204   	; 0xfffff652 <__eeprom_end+0xff7ef652>
     2d6:	8f e1       	ldi	r24, 0x1F	; 31
     2d8:	a9 3e       	cpi	r26, 0xE9	; 233
     2da:	4c 80       	ldd	r4, Y+4	; 0x04
     2dc:	ef ff       	.word	0xffef	; ????
     2de:	be 01       	movw	r22, r28
     2e0:	c4 ff       	sbrs	r28, 4
     2e2:	7f 3f       	cpi	r23, 0xFF	; 255
     2e4:	00 00       	nop
     2e6:	00 00       	nop
	...

000002ea <__trampolines_start>:
     2ea:	0c 94 af 13 	jmp	0x275e	; 0x275e <ir_receive+0xe6>
     2ee:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <pc_comm_putchar>
     2f2:	0c 94 87 13 	jmp	0x270e	; 0x270e <ir_receive+0x96>
     2f6:	0c 94 30 14 	jmp	0x2860	; 0x2860 <ir_receive+0x1e8>
     2fa:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <ir_transmit+0x66>
     2fe:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <ir_transmit+0x4c>
     302:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <ir_transmit+0x80>
     306:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <handle_cmd_wrapper>
     30a:	0c 94 36 0b 	jmp	0x166c	; 0x166c <sendPing>
     30e:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <ir_receive+0xcc>
     312:	0c 94 85 34 	jmp	0x690a	; 0x690a <use_rnb_data>
     316:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <broadcast_rnb_data>
     31a:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <ir_transmit+0x9a>
     31e:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <stop_move>
     322:	0c 94 bd 13 	jmp	0x277a	; 0x277a <ir_receive+0x102>
     326:	0c 94 83 3f 	jmp	0x7f06	; 0x7f06 <send_id>
     32a:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <processObsQueue>
     32e:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <initialize_ir_baselines>
     332:	0c 94 05 14 	jmp	0x280a	; 0x280a <ir_receive+0x192>
     336:	0c 94 48 25 	jmp	0x4a90	; 0x4a90 <leg_float>
     33a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <ir_transmit+0x104>
     33e:	0c 94 c2 15 	jmp	0x2b84	; 0x2b84 <ir_transmit+0xea>
     342:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <update_ir_baselines>
     346:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <set_all_ir_powers>
     34a:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <ir_receive+0x178>
     34e:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <ir_transmit+0x32>
     352:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <perform_ir_upkeep>
     356:	0c 94 94 13 	jmp	0x2728	; 0x2728 <ir_receive+0xb0>
     35a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <ir_transmit+0xd0>

0000035e <__trampolines_end>:
     35e:	45 52       	subi	r20, 0x25	; 37
     360:	52 4f       	sbci	r21, 0xF2	; 242
     362:	52 3a       	cpi	r21, 0xA2	; 162
     364:	20 4d       	sbci	r18, 0xD0	; 208
     366:	65 73       	andi	r22, 0x35	; 53
     368:	73 61       	ori	r23, 0x13	; 19
     36a:	67 65       	ori	r22, 0x57	; 87
     36c:	20 6c       	ori	r18, 0xC0	; 192
     36e:	65 6e       	ori	r22, 0xE5	; 229
     370:	67 74       	andi	r22, 0x47	; 71
     372:	68 20       	and	r6, r8
     374:	30 20       	and	r3, r0
     376:	66 6f       	ori	r22, 0xF6	; 246
     378:	72 20       	and	r7, r2
     37a:	6d 73       	andi	r22, 0x3D	; 61
     37c:	67 5f       	subi	r22, 0xF7	; 247
     37e:	6e 6f       	ori	r22, 0xFE	; 254
     380:	64 65       	ori	r22, 0x54	; 84
     382:	2e 0d       	add	r18, r14
     384:	0a 00       	.word	0x000a	; ????

00000386 <__c.5243>:
     386:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     396:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     3a6:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     3b6:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     3c6:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     3d6:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     3e6:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000003ef <__c.5234>:
     3ef:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     3ff:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     40f:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     41f:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     42f:	65 2e 0d 0a 00                                      e....

00000434 <__c.4442>:
     434:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     444:	79 2e 0d 0a 00                                      y....

00000449 <__c.5325>:
     449:	0d 0a 43 68 61 6e 6e 65 6c 73 20 61 72 65 20 70     ..Channels are p
     459:	72 6f 62 61 62 6c 79 20 62 6c 6f 63 6b 65 64 20     robably blocked 
     469:	62 79 20 79 6f 75 72 20 70 72 65 76 69 6f 75 73     by your previous
     479:	20 6d 65 73 73 61 67 65 2e 0d 0a 00                  message....

00000485 <__c.5319>:
     485:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     495:	20 77 68 69 6c 65 20 74 72 79 69 6e 67 3a 0d 0a      while trying:..
     4a5:	09 00                                               ..

000004a7 <__c.5293>:
     4a7:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     4b7:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     4c7:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000004d0 <__c.5279>:
     4d0:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     4e0:	65 6e 67 74 68 20 30 20 69 6e 20 70 65 72 66 6f     ength 0 in perfo
     4f0:	72 6d 5f 69 72 5f 75 70 6b 65 65 70 2e 0d 0a 00     rm_ir_upkeep....

00000500 <__c.4459>:
     500:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     510:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     520:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     530:	79 2e 0d 0a 00                                      y....

00000535 <TWI_TIMEOUT_STR>:
     535:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 77 68 65     .TWI timeout whe
     545:	6e 20 73 65 74 74 69 6e 67 20 49 52 20 50 6f 77     n setting IR Pow
     555:	65 72 73 20 00                                      ers .

0000055a <TWI_WAITING_STR>:
     55a:	09 57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49     .Waiting for TWI
     56a:	2e 2e 2e 0d 0a 00                                   ......

00000570 <__c.5337>:
     570:	09 25 69 09 25 68 75 0d 0a 00                       .%i.%hu...

0000057a <__c.5334>:
     57a:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     58a:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

00000593 <__c.5321>:
     593:	09 64 69 72 3a 20 25 64 09 00                       .dir: %d..

0000059d <__c.5318>:
     59d:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

000005ac <__c.5267>:
     5ac:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     5bc:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     5cc:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     5dc:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

000005ea <__c.5253>:
     5ea:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     5fa:	66 66 73 65 74 3a 20 25 68 75 20 61 6e 64 20 74     ffset: %hu and t
     60a:	6f 74 61 6c 5f 74 69 6d 65 3a 20 25 68 75 20 6e     otal_time: %hu n
     61a:	6f 74 20 65 71 75 61 6c 21 0d 0a 00                 ot equal!...

00000626 <__c.5240>:
     626:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     636:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     646:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     656:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     666:	0d 0a 00                                            ...

00000669 <__c.5562>:
     669:	45 52 52 4f 52 3a 20 55 6e 65 78 70 65 63 74 65     ERROR: Unexpecte
     679:	64 20 70 6f 77 65 72 3a 20 25 68 68 75 0d 0a 00     d power: %hhu...

00000689 <__c.5488>:
     689:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     699:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     6a9:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     6b9:	09 21 21 21 0d 0a 00                                .!!!...

000006c0 <__c.4534>:
     6c0:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     6d0:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     6e0:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     6f0:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

000006fe <__c.4529>:
     6fe:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     70e:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     71e:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     72e:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

0000073b <__c.4515>:
     73b:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     74b:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     75b:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     76b:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

00000776 <__c.4510>:
     776:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     786:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     796:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     7a6:	61 72 72 61 79 2e 0d 0a 00                          array....

000007af <__c.4494>:
     7af:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     7bf:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     7cf:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     7df:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

000007ed <__c.4492>:
     7ed:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 68 75     Task Queue (%hhu
     7fd:	20 74 61 73 6b 73 2c 20 25 68 68 75 20 65 78 65      tasks, %hhu exe
     80d:	63 75 74 69 6e 67 29 3a 0d 0a 00                    cuting):...

00000818 <__c.4467>:
     818:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     828:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     838:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     848:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
	...

00000859 <__c.4465>:
     859:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     869:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     879:	6e 63 65 2e 0d 0a 00                                nce....

00000880 <__c.4445>:
     880:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     890:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     8a0:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     8b0:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     8c0:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     8d0:	61 72 72 61 79 2e 0d 0a 00                          array....

000008d9 <__c.4443>:
     8d9:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     8e9:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     8f9:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     909:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     919:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     929:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     939:	61 73 6b 73 2e 0d 0a 00                             asks....

00000941 <__c.4409>:
     941:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     951:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     961:	20 28 62 79 20 64 72 6f 70 70 69 6e 67 20 61 6c      (by dropping al
     971:	6c 20 6e 6f 6e 2d 70 65 72 69 6f 64 69 63 20 74     l non-periodic t
     981:	61 73 6b 73 2e 0d 0a 09 49 66 20 79 6f 75 20 6f     asks....If you o
     991:	6e 6c 79 20 73 65 65 20 74 68 69 73 20 6d 65 73     nly see this mes
     9a1:	73 61 67 65 20 72 61 72 65 6c 79 2c 20 64 6f 6e     sage rarely, don
     9b1:	27 74 20 77 6f 72 72 79 20 74 6f 6f 20 6d 75 63     't worry too muc
     9c1:	68 2e 0d 0a 00                                      h....

000009c6 <__c.4367>:
     9c6:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     9d6:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     9e6:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     9f6:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     a06:	2e 0d 0a 00                                         ....

00000a0a <__c.5421>:
     a0a:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     a1a:	61 73 20 25 64 20 63 68 61 72 73 2c 20 77 68 69     as %d chars, whi
     a2a:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     a3a:	61 78 69 6d 75 6d 20 6f 66 20 25 64 00              aximum of %d.

00000a47 <__c.5416>:
     a47:	63 6f 6d 6d 61 6e 64 20 73 74 72 69 6e 67 3a 20     command string: 
     a57:	25 73 2c 20 6c 65 6e 67 74 68 3a 20 25 64 0d 0a     %s, length: %d..
	...

00000a68 <__c.5407>:
     a68:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     a78:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     a88:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000a94 <__c.5399>:
     a94:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
	...

00000aa5 <__c.5393>:
     aa5:	09 20 22 73 65 74 5f 6c 65 64 20 62 67 72 20 35     . "set_led bgr 5
     ab5:	20 33 30 20 30 22 20 67 69 76 65 73 20 61 20 62      30 0" gives a b
     ac5:	6c 75 69 73 68 20 67 72 65 65 6e 2e 0d 0a 00        luish green....

00000ad4 <__c.5391>:
     ad4:	09 20 6f 72 64 65 72 2c 20 69 6e 64 69 63 61 74     . order, indicat
     ae4:	69 6e 67 20 74 68 65 20 62 72 69 67 68 74 6e 65     ing the brightne
     af4:	73 73 20 6f 66 20 74 68 65 20 61 73 73 6f 63 69     ss of the associ
     b04:	61 74 65 64 20 4c 45 44 73 2e 20 45 78 61 6d 70     ated LEDs. Examp
     b14:	6c 65 3a 20 0d 0a 00                                le: ...

00000b1b <__c.5389>:
     b1b:	09 20 4c 65 74 74 65 72 73 20 72 2c 67 2c 62 2c     . Letters r,g,b,
     b2b:	20 69 6e 20 61 6e 79 20 6f 72 64 65 72 2c 20 66      in any order, f
     b3b:	6f 6c 6c 6f 77 65 64 20 62 79 20 76 61 6c 75 65     ollowed by value
     b4b:	73 20 30 2d 32 35 35 2c 20 69 6e 20 73 61 6d 65     s 0-255, in same
     b5b:	20 0d 0a 00                                          ...

00000b5f <__c.5387>:
     b5f:	09 47 6f 74 20 63 6f 6d 6d 61 6e 64 20 73 65 74     .Got command set
     b6f:	5f 6c 65 64 2c 20 62 75 74 20 61 72 67 75 6d 65     _led, but argume
     b7f:	6e 74 73 20 28 25 73 29 20 77 65 72 65 20 69 6e     nts (%s) were in
     b8f:	76 61 6c 69 64 2e 20 46 6f 72 6d 61 74 20 73 68     valid. Format sh
     b9f:	6f 75 6c 64 20 62 65 3a 0d 0a 00                    ould be:...

00000baa <__c.5361>:
     baa:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
     bba:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
     bca:	74 69 6f 6e 3a 20 25 68 68 75 2c 20 4e 65 77 20     tion: %hhu, New 
     bda:	53 65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25     Settings: (%d, %
     bea:	64 2c 20 25 64 29 0d 0a 00                          d, %d)...

00000bf3 <__c.5359>:
     bf3:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     c03:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     c13:	6c 2e 0d 0a 00                                      l....

00000c18 <__c.5357>:
     c18:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     c28:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     c38:	61 6c 2e 0d 0a 00                                   al....

00000c3e <__c.5355>:
     c3e:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     c4e:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     c5e:	6c 2e 0d 0a 00                                      l....

00000c63 <__c.5353>:
     c63:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     c73:	6f 74 3a 20 25 68 68 75 2e 0d 0a 00                 ot: %hhu....

00000c7f <__c.5350>:
     c7f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     c8f:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     c9f:	6e 2e 0d 0a 00                                      n....

00000ca4 <__c.5340>:
     ca4:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
     cb4:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
     cc4:	6e 3a 20 25 68 68 75 2c 20 76 61 6c 73 3a 20 28     n: %hhu, vals: (
     cd4:	25 64 2c 20 25 64 2c 20 25 64 29 0d 0a 00           %d, %d, %d)...

00000ce2 <__c.5338>:
     ce2:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     cf2:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     d02:	6c 2e 0d 0a 00                                      l....

00000d07 <__c.5336>:
     d07:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d17:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     d27:	61 6c 2e 0d 0a 00                                   al....

00000d2d <__c.5334>:
     d2d:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d3d:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     d4d:	6c 2e 0d 0a 00                                      l....

00000d52 <__c.5332>:
     d52:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     d62:	6f 74 3a 20 25 68 68 75 2e 0d 0a 00                 ot: %hhu....

00000d6e <__c.5329>:
     d6e:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d7e:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     d8e:	6e 2e 0d 0a 00                                      n....

00000d93 <__c.5311>:
     d93:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
     da3:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

00000dac <__c.5297>:
     dac:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
     dbc:	75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75 0d     u, num_steps %u.
     dcc:	0a 00                                               ..

00000dce <__c.5280>:
     dce:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
     dde:	69 6e 67 73 00                                      ings.

00000de3 <__c.5278>:
     de3:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
     df3:	69 6e 67 73 00                                      ings.

00000df8 <__c.5276>:
     df8:	72 65 73 65 74 00                                   reset.

00000dfe <__c.5274>:
     dfe:	74 61 73 6b 73 00                                   tasks.

00000e04 <__c.5272>:
     e04:	74 67 74 00                                         tgt.

00000e08 <__c.5270>:
     e08:	6d 73 67 5f 74 73 74 00                             msg_tst.

00000e10 <__c.5268>:
     e10:	6d 73 67 00                                         msg.

00000e14 <__c.5266>:
     e14:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

00000e1c <__c.5264>:
     e1c:	63 6d 64 00                                         cmd.

00000e20 <__c.5262>:
     e20:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00000e2d <__c.5260>:
     e2d:	67 65 74 5f 69 64 00                                get_id.

00000e34 <__c.5258>:
     e34:	73 65 74 5f 6c 65 64 00                             set_led.

00000e3c <__c.5256>:
     e3c:	72 6e 62 5f 62 00                                   rnb_b.

00000e42 <__c.5254>:
     e42:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
     e52:	70 00                                               p.

00000e54 <__c.5252>:
     e54:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00000e5f <__c.5250>:
     e5f:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

00000e6a <__c.5248>:
     e6a:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00000e74 <__c.5246>:
     e74:	63 6f 6c 6c 00                                      coll.

00000e79 <__c.5244>:
     e79:	73 65 74 5f 69 72 00                                set_ir.

00000e80 <__c.5242>:
     e80:	67 65 74 5f 72 67 62 00                             get_rgb.

00000e88 <__c.5240>:
     e88:	77 61 6c 6b 00                                      walk.

00000e8d <__c.5238>:
     e8d:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

00000e98 <CMD_NOT_RECOGNIZED_STR>:
     e98:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
     ea8:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
     eb8:	0a 00                                               ..

00000eba <__c.2242>:
     eba:	6e 61 6e 00                                         nan.

00000ebe <__c.2240>:
     ebe:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     ece:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     ede:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     eee:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     efe:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     f0e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     f1e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     f2e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     f3e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     f4e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     f5e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     f6e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     f7e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     f8e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     f9e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     fae:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000fbc <__ctors_end>:
     fbc:	11 24       	eor	r1, r1
     fbe:	1f be       	out	0x3f, r1	; 63
     fc0:	cf ef       	ldi	r28, 0xFF	; 255
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	df e3       	ldi	r29, 0x3F	; 63
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	00 e0       	ldi	r16, 0x00	; 0
     fca:	0c bf       	out	0x3c, r16	; 60

00000fcc <__do_copy_data>:
     fcc:	13 e2       	ldi	r17, 0x23	; 35
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	b0 e2       	ldi	r27, 0x20	; 32
     fd2:	ee e6       	ldi	r30, 0x6E	; 110
     fd4:	fb ea       	ldi	r31, 0xAB	; 171
     fd6:	00 e0       	ldi	r16, 0x00	; 0
     fd8:	0b bf       	out	0x3b, r16	; 59
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <__do_copy_data+0x14>
     fdc:	07 90       	elpm	r0, Z+
     fde:	0d 92       	st	X+, r0
     fe0:	ae 3a       	cpi	r26, 0xAE	; 174
     fe2:	b1 07       	cpc	r27, r17
     fe4:	d9 f7       	brne	.-10     	; 0xfdc <__do_copy_data+0x10>

00000fe6 <__do_clear_bss>:
     fe6:	2d e2       	ldi	r18, 0x2D	; 45
     fe8:	ae ea       	ldi	r26, 0xAE	; 174
     fea:	b3 e2       	ldi	r27, 0x23	; 35
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <.do_clear_bss_start>

00000fee <.do_clear_bss_loop>:
     fee:	1d 92       	st	X+, r1

00000ff0 <.do_clear_bss_start>:
     ff0:	ac 32       	cpi	r26, 0x2C	; 44
     ff2:	b2 07       	cpc	r27, r18
     ff4:	e1 f7       	brne	.-8      	; 0xfee <.do_clear_bss_loop>
     ff6:	0e 94 23 0a 	call	0x1446	; 0x1446 <main>
     ffa:	0c 94 b5 55 	jmp	0xab6a	; 0xab6a <_exit>

00000ffe <__bad_interrupt>:
     ffe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001002 <get_time>:
*/

; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0, _SFR_IO_ADDR(SREG)		; Save the state of the status register
    1002:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    1004:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    1006:	60 91 08 04 	lds	r22, 0x0408
	lds		r23, RTC_CNT+1
    100a:	70 91 09 04 	lds	r23, 0x0409
	lds		r24, rtc_epoch				; epoch 16-bit high word
    100e:	80 91 48 24 	lds	r24, 0x2448
	lds		r25, rtc_epoch+1
    1012:	90 91 49 24 	lds	r25, 0x2449
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    1016:	0f be       	out	0x3f, r0	; 63
	ret
    1018:	08 95       	ret

0000101a <SP_ReadByte>:

.section .text
.global SP_ReadByte

SP_ReadByte:
	in	r19, RAMPZ      ; Save RAMPZ.
    101a:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
    101c:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
    101e:	fb 01       	movw	r30, r22
	elpm	r24, Z          ; Extended load byte from address pointed to by Z.
    1020:	86 91       	elpm	r24, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
    1022:	3b bf       	out	0x3b, r19	; 59
	ret
    1024:	08 95       	ret

00001026 <SP_ReadWord>:

.section .text
.global SP_ReadWord

SP_ReadWord:
	in	r19, RAMPZ      ; Save RAMPZ.
    1026:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
    1028:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
    102a:	fb 01       	movw	r30, r22
	elpm	r24, Z+         ; Extended load byte from address pointed to by Z.
    102c:	87 91       	elpm	r24, Z+
	elpm	r25, Z          ; Extended load byte from address pointed to by Z.
    102e:	96 91       	elpm	r25, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
    1030:	3b bf       	out	0x3b, r19	; 59
	ret
    1032:	08 95       	ret

00001034 <SP_ReadCalibrationByte>:

.section .text
.global SP_ReadCalibrationByte	

SP_ReadCalibrationByte:
	ldi	r20, NVM_CMD_READ_CALIB_ROW_gc    ; Prepare NVM command in R20.
    1034:	42 e0       	ldi	r20, 0x02	; 2
	rjmp	SP_CommonLPM                      ; Jump to common LPM code.
    1036:	81 c0       	rjmp	.+258    	; 0x113a <SP_CommonLPM>

00001038 <SP_ReadUserSignatureByte>:

.section .text	
.global SP_ReadUserSignatureByte

SP_ReadUserSignatureByte:
	ldi	r20, NVM_CMD_READ_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
    1038:	41 e0       	ldi	r20, 0x01	; 1
	rjmp	SP_CommonLPM                       ; Jump to common LPM code.
    103a:	7f c0       	rjmp	.+254    	; 0x113a <SP_CommonLPM>

0000103c <SP_ReadFuseByte>:

.section .text	
.global SP_ReadFuseByte

SP_ReadFuseByte:
	sts	NVM_ADDR0, r24              ; Load fuse byte index into NVM Address Register 0.
    103c:	80 93 c0 01 	sts	0x01C0, r24
	clr	r24                         ; Prepare a zero.
    1040:	88 27       	eor	r24, r24
	sts	NVM_ADDR1, r24              ; Load zero into NVM Address Register 1.
    1042:	80 93 c1 01 	sts	0x01C1, r24
	sts	NVM_ADDR2, r24              ; Load zero into NVM Address Register 2.
    1046:	80 93 c2 01 	sts	0x01C2, r24
	ldi	r20, NVM_CMD_READ_FUSES_gc  ; Prepare NVM command in R20.
    104a:	47 e0       	ldi	r20, 0x07	; 7
	rcall	SP_CommonCMD                ; Jump to common NVM Action code.
    104c:	66 d0       	rcall	.+204    	; 0x111a <SP_CommonCMD>
	movw	r24, r22                    ; Move low byte to 1 byte return address.
    104e:	cb 01       	movw	r24, r22
	ret
    1050:	08 95       	ret

00001052 <SP_WriteLockBits>:

.section .text	
.global SP_WriteLockBits

SP_WriteLockBits:
	sts	NVM_DATA0, r24                  ; Load lock bits into NVM Data Register 0.
    1052:	80 93 c4 01 	sts	0x01C4, r24
	ldi	r20, NVM_CMD_WRITE_LOCK_BITS_gc ; Prepare NVM command in R20.
    1056:	48 e0       	ldi	r20, 0x08	; 8
	rjmp	SP_CommonCMD                    ; Jump to common NVM Action code.
    1058:	60 c0       	rjmp	.+192    	; 0x111a <SP_CommonCMD>

0000105a <SP_ReadLockBits>:

.section .text		
.global SP_ReadLockBits

SP_ReadLockBits:
	lds	r24, NVM_LOCKBITS       ; Read IO-mapped lock bits.
    105a:	80 91 d0 01 	lds	r24, 0x01D0
	ret
    105e:	08 95       	ret

00001060 <SP_EraseUserSignatureRow>:

.section .text
.global SP_EraseUserSignatureRow

SP_EraseUserSignatureRow:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
    1060:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_USER_SIG_ROW_gc ; Prepare NVM command in R20.
    1062:	48 e1       	ldi	r20, 0x18	; 24
	jmp 	SP_CommonSPM                       ; Jump to common SPM code.
    1064:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

00001068 <SP_WriteUserSignatureRow>:

.section .text
.global SP_WriteUserSignatureRow

SP_WriteUserSignatureRow:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
    1068:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_WRITE_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
    106a:	4a e1       	ldi	r20, 0x1A	; 26
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
    106c:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

00001070 <SP_EraseApplicationSection>:

.section .text
.global SP_EraseApplicationSection

SP_EraseApplicationSection:
	in	r19, RAMPZ                 ; Save RAMPZ, which is restored in SP_CommonSPM.
    1070:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_APP_gc  ; Prepare NVM command in R20.
    1072:	40 e2       	ldi	r20, 0x20	; 32
	jmp	SP_CommonSPM               ; Jump to common SPM code.
    1074:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

00001078 <SP_EraseApplicationPage>:

.section .text	
.global SP_EraseApplicationPage

SP_EraseApplicationPage:
	in	r19, RAMPZ                      ; Save RAMPZ, which is restored in SP_CommonSPM.
    1078:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                      ; Load RAMPZ with the MSB of the address.
    107a:	8b bf       	out	0x3b, r24	; 59
	movw    r24, r22                        ; Move low bytes for ZH:ZL to R25:R24
    107c:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_APP_PAGE_gc  ; Prepare NVM command in R20.
    107e:	42 e2       	ldi	r20, 0x22	; 34
	jmp	SP_CommonSPM                    ; Jump to common SPM code.
    1080:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

00001084 <SP_LoadFlashWord>:

.section .text
.global SP_LoadFlashWord

SP_LoadFlashWord:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
    1084:	3b b7       	in	r19, 0x3b	; 59
	movw	r0, r22                            ; Prepare flash word in R1:R0.
    1086:	0b 01       	movw	r0, r22
	ldi	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
    1088:	43 e2       	ldi	r20, 0x23	; 35
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
    108a:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

0000108e <SP_ReadFlashPage>:
.section .text		
.global SP_ReadFlashPage

SP_ReadFlashPage:

	in	r19, RAMPZ                   ; Save RAMPZ during assembly.
    108e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r22                   ; Load RAMPZ with MSB of address
    1090:	6b bf       	out	0x3b, r22	; 59
	movw    ZL, r20                      ; Load Z with Flash address.
    1092:	fa 01       	movw	r30, r20

	out	RAMPX, r1                    ; Load RAMPX with data pointer
    1094:	19 be       	out	0x39, r1	; 57
	movw	XL, r24                      ; Load X with data buffer address.
    1096:	dc 01       	movw	r26, r24

	ldi	r20, NVM_CMD_NO_OPERATION_gc ; Prepare NVM command code in R20.
    1098:	40 e0       	ldi	r20, 0x00	; 0
	sts	NVM_CMD, r20                 ; Set NVM command to No Operation so that LPM reads Flash.
    109a:	40 93 ca 01 	sts	0x01CA, r20

#if FLASH_PAGE_SIZE > 512
	ldi	r22, ((FLASH_PAGE_SIZE/2) >> 8) ; Load R22 with byte cont high if flash page is large.
#endif	

	ldi	r21, ((FLASH_PAGE_SIZE)&0xFF)   ; Load R21 with byte count.
    109e:	50 e0       	ldi	r21, 0x00	; 0

000010a0 <SP_ReadFlashPage_1>:

SP_ReadFlashPage_1:
	elpm	r24, Z+                         ; Load Flash bytes into R18:r19
    10a0:	87 91       	elpm	r24, Z+
	elpm	r25, Z+
    10a2:	97 91       	elpm	r25, Z+
	st	X+, r24                         ; Write bytes to buffer.
    10a4:	8d 93       	st	X+, r24
	st	X+, r25
    10a6:	9d 93       	st	X+, r25

#if FLASH_PAGE_SIZE > 512
	subi	r21, 1                          ; Decrement word count.
	sbci	r22, 0
#else
	dec	r21                             ; Decrement word count.
    10a8:	5a 95       	dec	r21
#endif	

	brne	SP_ReadFlashPage_1              ; Repeat until byte count is zero.
    10aa:	d1 f7       	brne	.-12     	; 0x10a0 <SP_ReadFlashPage_1>

	out	RAMPZ, r19
    10ac:	3b bf       	out	0x3b, r19	; 59
	ret
    10ae:	08 95       	ret

000010b0 <SP_WriteApplicationPage>:

.section .text		
.global SP_WriteApplicationPage

SP_WriteApplicationPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
    10b0:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
    10b2:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
    10b4:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_APP_PAGE_gc   ; Prepare NVM command in R20.
    10b6:	44 e2       	ldi	r20, 0x24	; 36
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
    10b8:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

000010bc <SP_EraseWriteApplicationPage>:

.section .text
.global SP_EraseWriteApplicationPage

SP_EraseWriteApplicationPage:
	in	r19, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
    10bc:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                            ; Load RAMPZ with the MSB of the address.
    10be:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                              ; Move low bytes of address to ZH:ZL from R23:R22
    10c0:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
    10c2:	45 e2       	ldi	r20, 0x25	; 37
	jmp	SP_CommonSPM                          ; Jump to common SPM code.
    10c4:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

000010c8 <SP_EraseFlashBuffer>:

.section .text		
.global SP_EraseFlashBuffer

SP_EraseFlashBuffer:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
    10c8:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
    10ca:	46 e2       	ldi	r20, 0x26	; 38
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
    10cc:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

000010d0 <SP_EraseBootPage>:

.section .text		
.global SP_EraseBootPage

SP_EraseBootPage:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
    10d0:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                         ; Load RAMPZ with the MSB of the address.
    10d2:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                           ; Move low bytes of address to ZH:ZL from R23:R22
    10d4:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_BOOT_PAGE_gc    ; Prepare NVM command in R20.
    10d6:	4a e2       	ldi	r20, 0x2A	; 42
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
    10d8:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

000010dc <SP_WriteBootPage>:

.section .text		
.global SP_WriteBootPage

SP_WriteBootPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
    10dc:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
    10de:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
    10e0:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
    10e2:	4c e2       	ldi	r20, 0x2C	; 44
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
    10e4:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

000010e8 <SP_EraseWriteBootPage>:

.section .text		
.global SP_EraseWriteBootPage

SP_EraseWriteBootPage:
	in	r19, RAMPZ                             ; Save RAMPZ, which is restored in SP_CommonSPM.
    10e8:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                             ; Load RAMPZ with the MSB of the address.
    10ea:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                               ; Move low bytes of address to ZH:ZL from R23:R22
    10ec:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
    10ee:	4d e2       	ldi	r20, 0x2D	; 45
	jmp	SP_CommonSPM                           ; Jump to common SPM code.
    10f0:	0d 94 52 00 	jmp	0x200a4	; 0x200a4 <SP_CommonSPM>

000010f4 <SP_ApplicationCRC>:

.section .text	
.global SP_ApplicationCRC

SP_ApplicationCRC:
	ldi	r20, NVM_CMD_APP_CRC_gc    ; Prepare NVM command in R20.
    10f4:	48 e3       	ldi	r20, 0x38	; 56
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <SP_CommonCMD>

000010f8 <SP_BootCRC>:

.section .text
.global SP_BootCRC

SP_BootCRC:
	ldi	r20, NVM_CMD_BOOT_CRC_gc   ; Prepare NVM command in R20.
    10f8:	49 e3       	ldi	r20, 0x39	; 57
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <SP_CommonCMD>

000010fc <SP_LockSPM>:

.section .text
.global SP_LockSPM

SP_LockSPM:
	ldi	r18, CCP_IOREG_gc     ; Prepare Protect IO-register signature in R18.
    10fc:	28 ed       	ldi	r18, 0xD8	; 216
	sts	CCP, r18              ; Enable IO-register operation (this disables interrupts for 4 cycles).
    10fe:	20 93 34 00 	sts	0x0034, r18
	ldi	r18, NVM_SPMLOCK_bm   ; Prepare bitmask for locking SPM into R18.
    1102:	21 e0       	ldi	r18, 0x01	; 1
	sts	NVM_CTRLB, r18        ; Load bitmask into NVM Control Register B, which locks SPM.
    1104:	20 93 cc 01 	sts	0x01CC, r18
	ret
    1108:	08 95       	ret

0000110a <SP_WaitForSPM>:

.section .text
.global SP_WaitForSPM		

SP_WaitForSPM:
	lds	r18, NVM_STATUS     ; Load the NVM Status register.
    110a:	20 91 cf 01 	lds	r18, 0x01CF
	sbrc	r18, NVM_NVMBUSY_bp ; Check if bit is cleared.
    110e:	27 fd       	sbrc	r18, 7
	rjmp	SP_WaitForSPM       ; Repeat check if bit is not cleared.
    1110:	fc cf       	rjmp	.-8      	; 0x110a <SP_WaitForSPM>
	clr	r18
    1112:	22 27       	eor	r18, r18
	sts	NVM_CMD, r18        ; Clear up command register to NO_OPERATION.
    1114:	20 93 ca 01 	sts	0x01CA, r18
	ret
    1118:	08 95       	ret

0000111a <SP_CommonCMD>:
; ---

.section .text		

SP_CommonCMD:
	sts	NVM_CMD, r20        ; Load command into NVM Command register.
    111a:	40 93 ca 01 	sts	0x01CA, r20
	ldi	r18, CCP_IOREG_gc   ; Prepare Protect IO-register signature in R18.
    111e:	28 ed       	ldi	r18, 0xD8	; 216
	ldi	r19, NVM_CMDEX_bm   ; Prepare bitmask for setting NVM Command Execute bit into R19.
    1120:	31 e0       	ldi	r19, 0x01	; 1
	sts	CCP, r18            ; Enable IO-register operation (this disables interrupts for 4 cycles).
    1122:	20 93 34 00 	sts	0x0034, r18
	sts	NVM_CTRLA, r19      ; Load bitmask into NVM Control Register A, which executes the command.
    1126:	30 93 cb 01 	sts	0x01CB, r19
	lds	r22, NVM_DATA0      ; Load NVM Data Register 0 into R22.
    112a:	60 91 c4 01 	lds	r22, 0x01C4
	lds	r23, NVM_DATA1      ; Load NVM Data Register 1 into R23.
    112e:	70 91 c5 01 	lds	r23, 0x01C5
	lds	r24, NVM_DATA2      ; Load NVM Data Register 2 into R24.
    1132:	80 91 c6 01 	lds	r24, 0x01C6
	clr	r25                 ; Clear R25 in order to return a clean 32-bit value.
    1136:	99 27       	eor	r25, r25
	ret
    1138:	08 95       	ret

0000113a <SP_CommonLPM>:
; ---

.section .text		

SP_CommonLPM:
	movw	ZL, r24             ; Load index into Z.
    113a:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20        ; Load prepared command into NVM Command register.
    113c:	40 93 ca 01 	sts	0x01CA, r20
	lpm	r24,Z
    1140:	84 91       	lpm	r24, Z
	ret
    1142:	08 95       	ret

00001144 <check_messages>:
	}
	return 0;
}

void check_messages ()
{
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	c0 54       	subi	r28, 0x40	; 64
    115a:	d1 09       	sbc	r29, r1
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	de bf       	out	0x3e, r29	; 62
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
    1160:	ce 01       	movw	r24, r28
    1162:	48 96       	adiw	r24, 0x18	; 24
    1164:	8b 8b       	std	Y+19, r24	; 0x13
    1166:	9c 8b       	std	Y+20, r25	; 0x14
	uint8_t i;
	
	if(user_facing_messages_ovf)
    1168:	80 91 47 24 	lds	r24, 0x2447
    116c:	88 23       	and	r24, r24
    116e:	69 f0       	breq	.+26     	; 0x118a <check_messages+0x46>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	80 93 1c 26 	sts	0x261C, r24
		user_facing_messages_ovf=0;
    1176:	10 92 47 24 	sts	0x2447, r1
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    117a:	86 e8       	ldi	r24, 0x86	; 134
    117c:	93 e0       	ldi	r25, 0x03	; 3
    117e:	9f 93       	push	r25
    1180:	8f 93       	push	r24
    1182:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
    118a:	80 91 1c 26 	lds	r24, 0x261C
    118e:	88 23       	and	r24, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <check_messages+0x50>
    1192:	70 c0       	rjmp	.+224    	; 0x1274 <check_messages+0x130>
		i=num_waiting_msgs-1;
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if(msg_node[i].msg_length==0)
    1194:	0f 2e       	mov	r0, r31
    1196:	fd e3       	ldi	r31, 0x3D	; 61
    1198:	df 2e       	mov	r13, r31
    119a:	f0 2d       	mov	r31, r0
			{
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    119c:	0f 2e       	mov	r0, r31
    119e:	fe e5       	ldi	r31, 0x5E	; 94
    11a0:	ef 2e       	mov	r14, r31
    11a2:	f3 e0       	ldi	r31, 0x03	; 3
    11a4:	ff 2e       	mov	r15, r31
    11a6:	f0 2d       	mov	r31, r0
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
    11a8:	00 91 1c 26 	lds	r16, 0x261C
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11ac:	cf b6       	in	r12, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11ae:	f8 94       	cli
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
    11b0:	01 50       	subi	r16, 0x01	; 1
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if(msg_node[i].msg_length==0)
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	d0 9e       	mul	r13, r16
    11b6:	f0 01       	movw	r30, r0
    11b8:	d1 9e       	mul	r13, r17
    11ba:	f0 0d       	add	r31, r0
    11bc:	11 24       	eor	r1, r1
    11be:	ee 55       	subi	r30, 0x5E	; 94
    11c0:	fb 4d       	sbci	r31, 0xDB	; 219
    11c2:	83 ad       	ldd	r24, Z+59	; 0x3b
    11c4:	81 11       	cpse	r24, r1
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <check_messages+0x90>
			{
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    11c8:	ff 92       	push	r15
    11ca:	ef 92       	push	r14
    11cc:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
			}
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
    11d4:	d0 9e       	mul	r13, r16
    11d6:	b0 01       	movw	r22, r0
    11d8:	d1 9e       	mul	r13, r17
    11da:	70 0d       	add	r23, r0
    11dc:	11 24       	eor	r1, r1
    11de:	8b 01       	movw	r16, r22
    11e0:	0e 55       	subi	r16, 0x5E	; 94
    11e2:	1b 4d       	sbci	r17, 0xDB	; 219
    11e4:	f8 01       	movw	r30, r16
    11e6:	43 ad       	ldd	r20, Z+59	; 0x3b
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	6c 54       	subi	r22, 0x4C	; 76
    11ec:	7b 4d       	sbci	r23, 0xDB	; 219
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <memcpy>
			msg_struct->arrival_time					= msg_node[i].arrival_time;
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	a2 81       	ldd	r26, Z+2	; 0x02
    11fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	ab 83       	std	Y+3, r26	; 0x03
    1206:	bc 83       	std	Y+4, r27	; 0x04
			msg_struct->sender_ID						= msg_node[i].sender_ID;
    1208:	80 89       	ldd	r24, Z+16	; 0x10
    120a:	91 89       	ldd	r25, Z+17	; 0x11
    120c:	89 8b       	std	Y+17, r24	; 0x11
    120e:	9a 8b       	std	Y+18, r25	; 0x12
			msg_struct->dir_received					= msg_node[i].arrival_dir;
    1210:	82 ad       	ldd	r24, Z+58	; 0x3a
    1212:	8d 8b       	std	Y+21, r24	; 0x15
			msg_struct->length							= msg_node[i].msg_length;
    1214:	83 ad       	ldd	r24, Z+59	; 0x3b
    1216:	8e 8b       	std	Y+22, r24	; 0x16
			msg_struct->range							= msg_node[i].range;
    1218:	84 81       	ldd	r24, Z+4	; 0x04
    121a:	95 81       	ldd	r25, Z+5	; 0x05
    121c:	a6 81       	ldd	r26, Z+6	; 0x06
    121e:	b7 81       	ldd	r27, Z+7	; 0x07
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	af 83       	std	Y+7, r26	; 0x07
    1226:	b8 87       	std	Y+8, r27	; 0x08
			msg_struct->bearing							= msg_node[i].bearing;
    1228:	80 85       	ldd	r24, Z+8	; 0x08
    122a:	91 85       	ldd	r25, Z+9	; 0x09
    122c:	a2 85       	ldd	r26, Z+10	; 0x0a
    122e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1230:	89 87       	std	Y+9, r24	; 0x09
    1232:	9a 87       	std	Y+10, r25	; 0x0a
    1234:	ab 87       	std	Y+11, r26	; 0x0b
    1236:	bc 87       	std	Y+12, r27	; 0x0c
			msg_struct->heading							= msg_node[i].heading;
    1238:	84 85       	ldd	r24, Z+12	; 0x0c
    123a:	95 85       	ldd	r25, Z+13	; 0x0d
    123c:	a6 85       	ldd	r26, Z+14	; 0x0e
    123e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1240:	8d 87       	std	Y+13, r24	; 0x0d
    1242:	9e 87       	std	Y+14, r25	; 0x0e
    1244:	af 87       	std	Y+15, r26	; 0x0f
    1246:	b8 8b       	std	Y+16, r27	; 0x10
			msg_struct->wasTargeted						= msg_node[i].wasTargeted;
    1248:	84 ad       	ldd	r24, Z+60	; 0x3c
    124a:	8f 8b       	std	Y+23, r24	; 0x17
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    124c:	cf be       	out	0x3f, r12	; 63
		}			
		msg_struct->msg[msg_node[i].msg_length]	= '\0';		
    124e:	83 ad       	ldd	r24, Z+59	; 0x3b
    1250:	eb 89       	ldd	r30, Y+19	; 0x13
    1252:	fc 89       	ldd	r31, Y+20	; 0x14
    1254:	e8 0f       	add	r30, r24
    1256:	f1 1d       	adc	r31, r1
    1258:	10 82       	st	Z, r1
		num_waiting_msgs--;
    125a:	80 91 1c 26 	lds	r24, 0x261C
    125e:	81 50       	subi	r24, 0x01	; 1
    1260:	80 93 1c 26 	sts	0x261C, r24


		handle_msg(msg_struct);
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 76 46 	call	0x8cec	; 0x8cec <handle_msg>
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		user_facing_messages_ovf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
    126c:	80 91 1c 26 	lds	r24, 0x261C
    1270:	81 11       	cpse	r24, r1
    1272:	9a cf       	rjmp	.-204    	; 0x11a8 <check_messages+0x64>
		num_waiting_msgs--;


		handle_msg(msg_struct);
	}
}
    1274:	c0 5c       	subi	r28, 0xC0	; 192
    1276:	df 4f       	sbci	r29, 0xFF	; 255
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <calculate_id_number>:

void calculate_id_number()
{
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	c0 54       	subi	r28, 0x40	; 64
    1298:	d1 09       	sbc	r29, r1
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	de bf       	out	0x3e, r29	; 62
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	80 93 ca 01 	sts	0x01CA, r24

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    12a4:	80 e4       	ldi	r24, 0x40	; 64
    12a6:	e6 e5       	ldi	r30, 0x56	; 86
    12a8:	f0 e2       	ldi	r31, 0x20	; 32
    12aa:	de 01       	movw	r26, r28
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	8a 95       	dec	r24
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <calculate_id_number+0x20>
    12b6:	9e 01       	movw	r18, r28
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	be 01       	movw	r22, r28
    12be:	6f 5b       	subi	r22, 0xBF	; 191
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
void calculate_id_number()
{
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
    12c6:	f9 01       	movw	r30, r18
    12c8:	81 91       	ld	r24, Z+
    12ca:	91 91       	ld	r25, Z+
    12cc:	a1 91       	ld	r26, Z+
    12ce:	b1 91       	ld	r27, Z+
    12d0:	9f 01       	movw	r18, r30
    12d2:	ab bf       	out	0x3b, r26	; 59
    12d4:	fc 01       	movw	r30, r24
    12d6:	87 91       	elpm	r24, Z+
    12d8:	96 91       	elpm	r25, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    12da:	48 27       	eor	r20, r24
    12dc:	84 2f       	mov	r24, r20
    12de:	82 95       	swap	r24
    12e0:	84 27       	eor	r24, r20
    12e2:	08 2e       	mov	r0, r24
    12e4:	86 95       	lsr	r24
    12e6:	86 95       	lsr	r24
    12e8:	80 25       	eor	r24, r0
    12ea:	08 2e       	mov	r0, r24
    12ec:	86 95       	lsr	r24
    12ee:	80 25       	eor	r24, r0
    12f0:	87 70       	andi	r24, 0x07	; 7
    12f2:	04 2e       	mov	r0, r20
    12f4:	45 2f       	mov	r20, r21
    12f6:	86 95       	lsr	r24
    12f8:	07 94       	ror	r0
    12fa:	87 95       	ror	r24
    12fc:	50 2d       	mov	r21, r0
    12fe:	48 27       	eor	r20, r24
    1300:	06 94       	lsr	r0
    1302:	87 95       	ror	r24
    1304:	50 25       	eor	r21, r0
    1306:	48 27       	eor	r20, r24
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
    1308:	26 17       	cp	r18, r22
    130a:	37 07       	cpc	r19, r23
    130c:	09 f0       	breq	.+2      	; 0x1310 <calculate_id_number+0x82>
    130e:	db cf       	rjmp	.-74     	; 0x12c6 <calculate_id_number+0x38>
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1310:	10 92 ca 01 	sts	0x01CA, r1

	droplet_ID = crc;
    1314:	40 93 b0 23 	sts	0x23B0, r20
    1318:	50 93 b1 23 	sts	0x23B1, r21
}
    131c:	c0 5c       	subi	r28, 0xC0	; 192
    131e:	df 4f       	sbci	r29, 0xFF	; 255
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <enable_interrupts>:

void enable_interrupts()
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    132a:	e0 ea       	ldi	r30, 0xA0	; 160
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	81 60       	ori	r24, 0x01	; 1
    1332:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	82 60       	ori	r24, 0x02	; 2
    1338:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_RREN_bm;
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	80 68       	ori	r24, 0x80	; 128
    1344:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1346:	78 94       	sei
    1348:	08 95       	ret

0000134a <startup_light_sequence>:
}

void startup_light_sequence()
{
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	84 e6       	ldi	r24, 0x64	; 100
    1350:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    1354:	84 e6       	ldi	r24, 0x64	; 100
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	64 e6       	ldi	r22, 0x64	; 100
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    1366:	84 e6       	ldi	r24, 0x64	; 100
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    136e:	44 e6       	ldi	r20, 0x64	; 100
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    1378:	84 e6       	ldi	r24, 0x64	; 100
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    1380:	0e 94 d5 35 	call	0x6baa	; 0x6baa <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	84 e6       	ldi	r24, 0x64	; 100
    138a:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    138e:	84 e6       	ldi	r24, 0x64	; 100
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	64 e6       	ldi	r22, 0x64	; 100
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    13a0:	84 e6       	ldi	r24, 0x64	; 100
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    13a8:	44 e6       	ldi	r20, 0x64	; 100
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    13b2:	84 e6       	ldi	r24, 0x64	; 100
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    13ba:	0e 94 d5 35 	call	0x6baa	; 0x6baa <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	84 e6       	ldi	r24, 0x64	; 100
    13c4:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    13c8:	84 e6       	ldi	r24, 0x64	; 100
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	64 e6       	ldi	r22, 0x64	; 100
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    13da:	84 e6       	ldi	r24, 0x64	; 100
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    13e2:	44 e6       	ldi	r20, 0x64	; 100
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    13ec:	84 e6       	ldi	r24, 0x64	; 100
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    13f4:	0e 94 d5 35 	call	0x6baa	; 0x6baa <led_off>
    13f8:	08 95       	ret

000013fa <init_all_systems>:

uint16_t droplet_ID = 0;

void init_all_systems()
{
	cli();
    13fa:	f8 94       	cli
	Config32MHzClock();
    13fc:	0e 94 c6 38 	call	0x718c	; 0x718c <Config32MHzClock>
	
	calculate_id_number();
    1400:	0e 94 47 09 	call	0x128e	; 0x128e <calculate_id_number>
	
	scheduler_init();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    1404:	0e 94 45 39 	call	0x728a	; 0x728a <scheduler_init>
	pc_comm_init();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    1408:	0e 94 ed 23 	call	0x47da	; 0x47da <pc_comm_init>
	rgb_led_init();				INIT_DEBUG_PRINT("LED INIT\r\n");
    140c:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <rgb_led_init>
	power_init();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    1410:	0e 94 ff 24 	call	0x49fe	; 0x49fe <power_init>
	i2c_init();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    1414:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <i2c_init>
	
	enable_interrupts();	
    1418:	0e 94 95 09 	call	0x132a	; 0x132a <enable_interrupts>
	
	range_algs_init();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    141c:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <range_algs_init>
	rgb_sensor_init();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    1420:	0e 94 39 38 	call	0x7072	; 0x7072 <rgb_sensor_init>
	ir_led_init();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    1424:	0e 94 93 1b 	call	0x3726	; 0x3726 <ir_led_init>
	ir_sensor_init();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    1428:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <ir_sensor_init>
	#ifdef AUDIO_DROPLET
		speaker_init();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		mic_init();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motor_init();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    142c:	0e 94 c6 22 	call	0x458c	; 0x458c <motor_init>
	random_init();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    1430:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <random_init>
	
	#ifdef SYNCHRONIZED
		firefly_sync_init();
	#endif

	set_all_ir_powers(256);
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 44 1c 	call	0x3888	; 0x3888 <set_all_ir_powers>

	startup_light_sequence();
    143c:	0e 94 a5 09 	call	0x134a	; 0x134a <startup_light_sequence>
	
	ir_comm_init();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    1440:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <ir_comm_init>
    1444:	08 95       	ret

00001446 <main>:
}

int main()
{
	init_all_systems();
    1446:	0e 94 fd 09 	call	0x13fa	; 0x13fa <init_all_systems>
	init();
    144a:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <init>
	{
		loop();
		check_messages();
		if(task_list_check())
		{
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    144e:	cf ee       	ldi	r28, 0xEF	; 239
    1450:	d3 e0       	ldi	r29, 0x03	; 3
{
	init_all_systems();
	init();
	while(1)
	{
		loop();
    1452:	0e 94 75 46 	call	0x8cea	; 0x8cea <loop>
		check_messages();
    1456:	0e 94 a2 08 	call	0x1144	; 0x1144 <check_messages>
//}

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t task_list_check()
{ 
	if(task_executing)	return 0;
    145a:	80 91 95 28 	lds	r24, 0x2895
    145e:	81 11       	cpse	r24, r1
    1460:	1d c0       	rjmp	.+58     	; 0x149c <main+0x56>
	else				return (((int32_t)(get_time()-(task_list->scheduled_time)))>3000); 
    1462:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    1466:	e0 91 d3 28 	lds	r30, 0x28D3
    146a:	f0 91 d4 28 	lds	r31, 0x28D4
    146e:	00 81       	ld	r16, Z
    1470:	11 81       	ldd	r17, Z+1	; 0x01
    1472:	22 81       	ldd	r18, Z+2	; 0x02
    1474:	33 81       	ldd	r19, Z+3	; 0x03
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	80 1b       	sub	r24, r16
    147c:	91 0b       	sbc	r25, r17
    147e:	a2 0b       	sbc	r26, r18
    1480:	b3 0b       	sbc	r27, r19
		if(task_list_check())
    1482:	89 3b       	cpi	r24, 0xB9	; 185
    1484:	9b 40       	sbci	r25, 0x0B	; 11
    1486:	a1 05       	cpc	r26, r1
    1488:	b1 05       	cpc	r27, r1
    148a:	44 f0       	brlt	.+16     	; 0x149c <main+0x56>
		{
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			task_list_cleanup();
    1494:	0e 94 2d 3b 	call	0x765a	; 0x765a <task_list_cleanup>
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
		}
		delay_ms(1);	
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
	}
    14a4:	d6 cf       	rjmp	.-84     	; 0x1452 <main+0xc>

000014a6 <droplet_reboot>:
}


void droplet_reboot()
{
	CPU_CCP=CCP_IOREG_gc;
    14a6:	88 ed       	ldi	r24, 0xD8	; 216
    14a8:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	80 93 79 00 	sts	0x0079, r24
    14b0:	08 95       	ret

000014b2 <wait_for_nvm>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    14b2:	e0 ec       	ldi	r30, 0xC0	; 192
    14b4:	f1 e0       	ldi	r31, 0x01	; 1
    14b6:	87 85       	ldd	r24, Z+15	; 0x0f
    14b8:	88 23       	and	r24, r24
    14ba:	ec f3       	brlt	.-6      	; 0x14b6 <wait_for_nvm+0x4>
}
    14bc:	08 95       	ret

000014be <flush_buffer>:

void flush_buffer(void)
{
        wait_for_nvm();
    14be:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <wait_for_nvm>
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    14c2:	80 91 cf 01 	lds	r24, 0x01CF
    14c6:	81 ff       	sbrs	r24, 1
    14c8:	0b c0       	rjmp	.+22     	; 0x14e0 <flush_buffer+0x22>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    14ca:	86 e3       	ldi	r24, 0x36	; 54
    14cc:	80 93 ca 01 	sts	0x01CA, r24
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    14d0:	eb ec       	ldi	r30, 0xCB	; 203
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	21 e0       	ldi	r18, 0x01	; 1
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	88 ed       	ldi	r24, 0xD8	; 216
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	84 bf       	out	0x34, r24	; 52
    14de:	20 83       	st	Z, r18
    14e0:	08 95       	ret

000014e2 <EEPROM_read_byte>:
        }
}


uint8_t EEPROM_read_byte(uint16_t addr)
{
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	d8 2f       	mov	r29, r24
    14e8:	c9 2f       	mov	r28, r25
        wait_for_nvm();
    14ea:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <wait_for_nvm>
        
        NVM.ADDR0 = addr & 0xFF;
    14ee:	a0 ec       	ldi	r26, 0xC0	; 192
    14f0:	b1 e0       	ldi	r27, 0x01	; 1
    14f2:	dc 93       	st	X, r29
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    14f4:	cf 71       	andi	r28, 0x1F	; 31
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	cc 93       	st	X, r28
    14fa:	11 97       	sbiw	r26, 0x01	; 1
        NVM.ADDR2 = 0;
    14fc:	12 96       	adiw	r26, 0x02	; 2
    14fe:	1c 92       	st	X, r1
    1500:	12 97       	sbiw	r26, 0x02	; 2
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    1502:	86 e0       	ldi	r24, 0x06	; 6
    1504:	1a 96       	adiw	r26, 0x0a	; 10
    1506:	8c 93       	st	X, r24
    1508:	1a 97       	sbiw	r26, 0x0a	; 10
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    150a:	eb ec       	ldi	r30, 0xCB	; 203
    150c:	f1 e0       	ldi	r31, 0x01	; 1
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	88 ed       	ldi	r24, 0xD8	; 216
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	84 bf       	out	0x34, r24	; 52
    1518:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    151a:	14 96       	adiw	r26, 0x04	; 4
    151c:	8c 91       	ld	r24, X
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <EEPROM_write_byte>:


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	18 2f       	mov	r17, r24
    152c:	c9 2f       	mov	r28, r25
    152e:	d6 2f       	mov	r29, r22
        flush_buffer();
    1530:	0e 94 5f 0a 	call	0x14be	; 0x14be <flush_buffer>
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1534:	e0 ec       	ldi	r30, 0xC0	; 192
    1536:	f1 e0       	ldi	r31, 0x01	; 1
    1538:	83 e3       	ldi	r24, 0x33	; 51
    153a:	82 87       	std	Z+10, r24	; 0x0a
        
        NVM.ADDR0 = addr & 0xFF;
    153c:	10 83       	st	Z, r17
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    153e:	cf 71       	andi	r28, 0x1F	; 31
    1540:	c1 83       	std	Z+1, r28	; 0x01
        NVM.ADDR2 = 0;
    1542:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.DATA0 = byte;
    1544:	d4 83       	std	Z+4, r29	; 0x04
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1546:	85 e3       	ldi	r24, 0x35	; 53
    1548:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    154a:	eb ec       	ldi	r30, 0xCB	; 203
    154c:	f1 e0       	ldi	r31, 0x01	; 1
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	88 ed       	ldi	r24, 0xD8	; 216
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	84 bf       	out	0x34, r24	; 52
    1558:	20 83       	st	Z, r18
        
        NVM.DATA0 = byte;
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	08 95       	ret

00001562 <processObsQueue>:
		TCE0.CCB = 0;
	
	obsStart = malloc(sizeof(obsQueue));
	obsStart->obs = 0;
	obsStart->next = obsStart;
	obsStart->prev = obsStart;
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	e0 91 28 26 	lds	r30, 0x2628
    1578:	f0 91 29 26 	lds	r31, 0x2629
    157c:	c2 81       	ldd	r28, Z+2	; 0x02
    157e:	d3 81       	ldd	r29, Z+3	; 0x03
    1580:	ec 17       	cp	r30, r28
    1582:	fd 07       	cpc	r31, r29
    1584:	69 f1       	breq	.+90     	; 0x15e0 <processObsQueue+0x7e>
    1586:	c1 2c       	mov	r12, r1
    1588:	d1 2c       	mov	r13, r1
    158a:	76 01       	movw	r14, r12
    158c:	88 81       	ld	r24, Y
    158e:	99 81       	ldd	r25, Y+1	; 0x01
    1590:	bc 01       	movw	r22, r24
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 1f 48 	call	0x903e	; 0x903e <__floatunsisf>
    159a:	a7 01       	movw	r20, r14
    159c:	96 01       	movw	r18, r12
    159e:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e7       	ldi	r20, 0x70	; 112
    15a8:	52 e4       	ldi	r21, 0x42	; 66
    15aa:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    15ae:	9b 01       	movw	r18, r22
    15b0:	ac 01       	movw	r20, r24
    15b2:	c7 01       	movw	r24, r14
    15b4:	b6 01       	movw	r22, r12
    15b6:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    15ba:	6b 01       	movw	r12, r22
    15bc:	7c 01       	movw	r14, r24
    15be:	0a 81       	ldd	r16, Y+2	; 0x02
    15c0:	1b 81       	ldd	r17, Y+3	; 0x03
    15c2:	bf b6       	in	r11, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 94 11 51 	call	0xa222	; 0xa222 <free>
    15cc:	bf be       	out	0x3f, r11	; 63
    15ce:	e8 01       	movw	r28, r16
    15d0:	80 91 28 26 	lds	r24, 0x2628
    15d4:	90 91 29 26 	lds	r25, 0x2629
    15d8:	80 17       	cp	r24, r16
    15da:	91 07       	cpc	r25, r17
    15dc:	b9 f6       	brne	.-82     	; 0x158c <processObsQueue+0x2a>
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <processObsQueue+0x86>
    15e0:	8e 01       	movw	r16, r28
    15e2:	c1 2c       	mov	r12, r1
    15e4:	d1 2c       	mov	r13, r1
    15e6:	76 01       	movw	r14, r12
    15e8:	f8 01       	movw	r30, r16
    15ea:	02 83       	std	Z+2, r16	; 0x02
    15ec:	13 83       	std	Z+3, r17	; 0x03
    15ee:	04 83       	std	Z+4, r16	; 0x04
    15f0:	15 83       	std	Z+5, r17	; 0x05
    15f2:	e0 e0       	ldi	r30, 0x00	; 0
    15f4:	fa e0       	ldi	r31, 0x0A	; 10
    15f6:	c0 a1       	ldd	r28, Z+32	; 0x20
    15f8:	d1 a1       	ldd	r29, Z+33	; 0x21
    15fa:	82 a5       	ldd	r24, Z+42	; 0x2a
    15fc:	93 a5       	ldd	r25, Z+43	; 0x2b
    15fe:	c8 17       	cp	r28, r24
    1600:	d9 07       	cpc	r29, r25
    1602:	a8 f4       	brcc	.+42     	; 0x162e <processObsQueue+0xcc>
    1604:	00 91 2a 0a 	lds	r16, 0x0A2A
    1608:	10 91 2b 0a 	lds	r17, 0x0A2B
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    1614:	6c 0f       	add	r22, r28
    1616:	7d 1f       	adc	r23, r29
    1618:	06 17       	cp	r16, r22
    161a:	17 07       	cpc	r17, r23
    161c:	40 f4       	brcc	.+16     	; 0x162e <processObsQueue+0xcc>
    161e:	40 91 10 26 	lds	r20, 0x2610
    1622:	60 91 ce 28 	lds	r22, 0x28CE
    1626:	80 91 1d 26 	lds	r24, 0x261D
    162a:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    1636:	c6 0f       	add	r28, r22
    1638:	d7 1f       	adc	r29, r23
    163a:	c1 34       	cpi	r28, 0x41	; 65
    163c:	fd e9       	ldi	r31, 0x9D	; 157
    163e:	df 07       	cpc	r29, r31
    1640:	38 f0       	brcs	.+14     	; 0x1650 <processObsQueue+0xee>
    1642:	80 e4       	ldi	r24, 0x40	; 64
    1644:	9d e9       	ldi	r25, 0x9D	; 157
    1646:	80 93 20 0a 	sts	0x0A20, r24
    164a:	90 93 21 0a 	sts	0x0A21, r25
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <processObsQueue+0xf6>
    1650:	c0 93 20 0a 	sts	0x0A20, r28
    1654:	d0 93 21 0a 	sts	0x0A21, r29
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	bf 90       	pop	r11
    166a:	08 95       	ret

0000166c <sendPing>:
    166c:	9c 01       	movw	r18, r24
    166e:	40 e4       	ldi	r20, 0x40	; 64
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	8f e3       	ldi	r24, 0x3F	; 63
    1676:	0e 94 59 11 	call	0x22b2	; 0x22b2 <hp_ir_targeted_cmd>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	41 eb       	ldi	r20, 0xB1	; 177
    1680:	5a e0       	ldi	r21, 0x0A	; 10
    1682:	68 ec       	ldi	r22, 0xC8	; 200
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    168e:	08 95       	ret

00001690 <__vector_49>:
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	0b b6       	in	r0, 0x3b	; 59
    169c:	0f 92       	push	r0
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	e0 e4       	ldi	r30, 0x40	; 64
    16b8:	fa e0       	ldi	r31, 0x0A	; 10
    16ba:	82 ad       	ldd	r24, Z+58	; 0x3a
    16bc:	93 ad       	ldd	r25, Z+59	; 0x3b
    16be:	80 93 1d 26 	sts	0x261D, r24
    16c2:	80 ad       	ldd	r24, Z+56	; 0x38
    16c4:	91 ad       	ldd	r25, Z+57	; 0x39
    16c6:	80 93 ce 28 	sts	0x28CE, r24
    16ca:	80 91 78 09 	lds	r24, 0x0978
    16ce:	90 91 79 09 	lds	r25, 0x0979
    16d2:	80 93 10 26 	sts	0x2610, r24
    16d6:	40 91 44 24 	lds	r20, 0x2444
    16da:	60 91 23 26 	lds	r22, 0x2623
    16de:	80 91 19 26 	lds	r24, 0x2619
    16e2:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_50>:
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	0b b6       	in	r0, 0x3b	; 59
    1718:	0f 92       	push	r0
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	40 91 10 26 	lds	r20, 0x2610
    1736:	60 91 ce 28 	lds	r22, 0x28CE
    173a:	80 91 1d 26 	lds	r24, 0x261D
    173e:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0b be       	out	0x3b, r0	; 59
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <updateRTC>:
	}else{
		TCE0.CNT = theCount+(uint16_t)newStart;
	}
}

void updateRTC(){
    1768:	8f 92       	push	r8
    176a:	9f 92       	push	r9
    176c:	af 92       	push	r10
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
	int16_t change;
	int16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    177e:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1780:	f8 94       	cli
	{
		uint32_t currTime = get_time();
    1782:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    1786:	6b 01       	movw	r12, r22
    1788:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    178a:	21 e2       	ldi	r18, 0x21	; 33
    178c:	34 e1       	ldi	r19, 0x14	; 20
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	0e 94 34 50 	call	0xa068	; 0xa068 <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    1796:	61 31       	cpi	r22, 0x11	; 17
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	72 07       	cpc	r23, r18
    179c:	bc f0       	brlt	.+46     	; 0x17cc <updateRTC+0x64>
			change = FFSYNC_FULL_PERIOD_MS-remainder;
    179e:	21 e2       	ldi	r18, 0x21	; 33
    17a0:	34 e1       	ldi	r19, 0x14	; 20
    17a2:	26 1b       	sub	r18, r22
    17a4:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    17a6:	80 91 0a 04 	lds	r24, 0x040A
    17aa:	90 91 0b 04 	lds	r25, 0x040B
    17ae:	82 1b       	sub	r24, r18
    17b0:	93 0b       	sbc	r25, r19
    17b2:	8c 15       	cp	r24, r12
    17b4:	9d 05       	cpc	r25, r13
    17b6:	d0 f4       	brcc	.+52     	; 0x17ec <updateRTC+0x84>
    17b8:	80 91 48 24 	lds	r24, 0x2448
    17bc:	90 91 49 24 	lds	r25, 0x2449
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	80 93 48 24 	sts	0x2448, r24
    17c6:	90 93 49 24 	sts	0x2449, r25
    17ca:	10 c0       	rjmp	.+32     	; 0x17ec <updateRTC+0x84>
		}else{
			change = -remainder;
    17cc:	22 27       	eor	r18, r18
    17ce:	33 27       	eor	r19, r19
    17d0:	26 1b       	sub	r18, r22
    17d2:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    17d4:	c6 16       	cp	r12, r22
    17d6:	d7 06       	cpc	r13, r23
    17d8:	48 f4       	brcc	.+18     	; 0x17ec <updateRTC+0x84>
    17da:	80 91 48 24 	lds	r24, 0x2448
    17de:	90 91 49 24 	lds	r25, 0x2449
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	80 93 48 24 	sts	0x2448, r24
    17e8:	90 93 49 24 	sts	0x2449, r25
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    17ec:	e0 e0       	ldi	r30, 0x00	; 0
    17ee:	f4 e0       	ldi	r31, 0x04	; 4
    17f0:	81 81       	ldd	r24, Z+1	; 0x01
    17f2:	80 fd       	sbrc	r24, 0
    17f4:	fd cf       	rjmp	.-6      	; 0x17f0 <updateRTC+0x88>
		RTC.CNT =  (theCount+change);
    17f6:	a9 01       	movw	r20, r18
    17f8:	c2 0e       	add	r12, r18
    17fa:	d3 1e       	adc	r13, r19
    17fc:	e0 e0       	ldi	r30, 0x00	; 0
    17fe:	f4 e0       	ldi	r31, 0x04	; 4
    1800:	c0 86       	std	Z+8, r12	; 0x08
    1802:	d1 86       	std	Z+9, r13	; 0x09
		RTC.COMP = (RTC.COMP+change);
    1804:	84 85       	ldd	r24, Z+12	; 0x0c
    1806:	95 85       	ldd	r25, Z+13	; 0x0d
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	84 87       	std	Z+12, r24	; 0x0c
    180e:	95 87       	std	Z+13, r25	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1810:	cf bf       	out	0x3f, r28	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1812:	c9 01       	movw	r24, r18
    1814:	33 23       	and	r19, r19
    1816:	24 f4       	brge	.+8      	; 0x1820 <updateRTC+0xb8>
    1818:	88 27       	eor	r24, r24
    181a:	99 27       	eor	r25, r25
    181c:	82 1b       	sub	r24, r18
    181e:	93 0b       	sbc	r25, r19
    1820:	81 39       	cpi	r24, 0x91	; 145
    1822:	91 05       	cpc	r25, r1
    1824:	88 f4       	brcc	.+34     	; 0x1848 <updateRTC+0xe0>
		if(change>0) OSC.RC32KCAL++;
    1826:	12 16       	cp	r1, r18
    1828:	13 06       	cpc	r1, r19
    182a:	34 f4       	brge	.+12     	; 0x1838 <updateRTC+0xd0>
    182c:	e0 e5       	ldi	r30, 0x50	; 80
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	84 81       	ldd	r24, Z+4	; 0x04
    1832:	8f 5f       	subi	r24, 0xFF	; 255
    1834:	84 83       	std	Z+4, r24	; 0x04
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <updateRTC+0xe0>
		else if(change<-FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    1838:	43 3e       	cpi	r20, 0xE3	; 227
    183a:	5f 4f       	sbci	r21, 0xFF	; 255
    183c:	28 f4       	brcc	.+10     	; 0x1848 <updateRTC+0xe0>
    183e:	e0 e5       	ldi	r30, 0x50	; 80
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	84 81       	ldd	r24, Z+4	; 0x04
    1844:	81 50       	subi	r24, 0x01	; 1
    1846:	84 83       	std	Z+4, r24	; 0x04
	}
	//printf("\t\t%d\r\n",change);
}
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	08 95       	ret

00001860 <__vector_47>:
	obsStart->obs = 0;
	obsStart->next = obsStart;
	obsStart->prev = obsStart;
}

ISR(TCE0_OVF_vect){
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	0b b6       	in	r0, 0x3b	; 59
    186c:	0f 92       	push	r0
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	2f 93       	push	r18
    1878:	3f 93       	push	r19
    187a:	4f 93       	push	r20
    187c:	5f 93       	push	r21
    187e:	6f 93       	push	r22
    1880:	7f 93       	push	r23
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
    188a:	ef 93       	push	r30
    188c:	ff 93       	push	r31
	schedule_task(rand_short()%FFSYNC_D, sendPing, (void*)((uint16_t)(get_time()&0xFFFF)));
    188e:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    1892:	6b 01       	movw	r12, r22
    1894:	7c 01       	movw	r14, r24
    1896:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <rand_short>
    189a:	ac 01       	movw	r20, r24
    189c:	9c 01       	movw	r18, r24
    189e:	ad ec       	ldi	r26, 0xCD	; 205
    18a0:	bc ec       	ldi	r27, 0xCC	; 204
    18a2:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <__umulhisi3>
    18a6:	88 0f       	add	r24, r24
    18a8:	89 2f       	mov	r24, r25
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 0b       	sbc	r25, r25
    18ae:	91 95       	neg	r25
    18b0:	60 ea       	ldi	r22, 0xA0	; 160
    18b2:	68 9f       	mul	r22, r24
    18b4:	90 01       	movw	r18, r0
    18b6:	69 9f       	mul	r22, r25
    18b8:	30 0d       	add	r19, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	ca 01       	movw	r24, r20
    18be:	82 1b       	sub	r24, r18
    18c0:	93 0b       	sbc	r25, r19
    18c2:	bc 01       	movw	r22, r24
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	96 01       	movw	r18, r12
    18ca:	46 e3       	ldi	r20, 0x36	; 54
    18cc:	5b e0       	ldi	r21, 0x0B	; 11
    18ce:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
    18d2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <updateRTC>
	//printf("ovf @ %lu\r\n",get_time());
}
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	0f 90       	pop	r0
    18f8:	0b be       	out	0x3b, r0	; 59
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <writeRead>:


/*! \brief Example to show how to read and write to the flash.
 */
int writeRead(void) 
{
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	cb ed       	ldi	r28, 0xDB	; 219
    191a:	d8 e2       	ldi	r29, 0x28	; 40
    191c:	2b ed       	ldi	r18, 0xDB	; 219
    191e:	3a e2       	ldi	r19, 0x2A	; 42
    1920:	fe 01       	movw	r30, r28
    1922:	8e 2f       	mov	r24, r30
    1924:	8c 1b       	sub	r24, r28
	 */
	if (success) {

		/* Fill up a test buffer with 512 bytes with other values. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			WriteBuffer[i] = (uint8_t) i;
    1926:	81 93       	st	Z+, r24
	 *  and an erase-write of the page.
	 */
	if (success) {

		/* Fill up a test buffer with 512 bytes with other values. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
    1928:	e2 17       	cp	r30, r18
    192a:	f3 07       	cpc	r31, r19
    192c:	d1 f7       	brne	.-12     	; 0x1922 <writeRead+0x1e>
			WriteBuffer[i] = (uint8_t) i;
		}

		/* Load the flashbuffer with the test buffer. */
		SP_LoadFlashPage(WriteBuffer);
    192e:	8b ed       	ldi	r24, 0xDB	; 219
    1930:	98 e2       	ldi	r25, 0x28	; 40
    1932:	0f 94 3f 00 	call	0x2007e	; 0x2007e <SP_LoadFlashPage>
		NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    1936:	10 92 ca 01 	sts	0x01CA, r1

		/* Do a Erase-Write of the page. */
		EraseWriteAppTablePage(16);
    193a:	80 e1       	ldi	r24, 0x10	; 16
    193c:	0f 94 0e 00 	call	0x2001c	; 0x2001c <EraseWriteAppTablePage>

		/* Read a flashpage into the read buffer. */
		ReadFlashPage(ReadBuffer, 16);
    1940:	60 e1       	ldi	r22, 0x10	; 16
    1942:	8b ed       	ldi	r24, 0xDB	; 219
    1944:	9a e2       	ldi	r25, 0x2A	; 42
    1946:	0f 94 33 00 	call	0x20066	; 0x20066 <ReadFlashPage>
    194a:	0b ed       	ldi	r16, 0xDB	; 219
    194c:	1a e2       	ldi	r17, 0x2A	; 42
    194e:	0f 2e       	mov	r0, r31
    1950:	fb ed       	ldi	r31, 0xDB	; 219
    1952:	cf 2e       	mov	r12, r31
    1954:	fc e2       	ldi	r31, 0x2C	; 44
    1956:	df 2e       	mov	r13, r31
    1958:	f0 2d       	mov	r31, r0

		/* Verify Flash contents. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			printf(" ReadBuffer %d\n\r",ReadBuffer[i] );
    195a:	0f 2e       	mov	r0, r31
    195c:	f6 e9       	ldi	r31, 0x96	; 150
    195e:	ef 2e       	mov	r14, r31
    1960:	f0 e2       	ldi	r31, 0x20	; 32
    1962:	ff 2e       	mov	r15, r31
    1964:	f0 2d       	mov	r31, r0
    1966:	58 01       	movw	r10, r16
    1968:	f8 01       	movw	r30, r16
    196a:	81 91       	ld	r24, Z+
    196c:	8f 01       	movw	r16, r30
    196e:	1f 92       	push	r1
    1970:	8f 93       	push	r24
    1972:	ff 92       	push	r15
    1974:	ef 92       	push	r14
    1976:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
			if (ReadBuffer[i] != WriteBuffer[i]){
    197a:	89 91       	ld	r24, Y+
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	f5 01       	movw	r30, r10
    1986:	90 81       	ld	r25, Z
    1988:	98 13       	cpse	r25, r24
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <writeRead+0x94>

		/* Read a flashpage into the read buffer. */
		ReadFlashPage(ReadBuffer, 16);

		/* Verify Flash contents. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
    198c:	0c 15       	cp	r16, r12
    198e:	1d 05       	cpc	r17, r13
    1990:	51 f7       	brne	.-44     	; 0x1966 <writeRead+0x62>
/*! \brief Example to show how to read and write to the flash.
 */
int writeRead(void) 
{
	/* Assume success until proven otherwise. */
	int success = 1;	
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 c0       	rjmp	.+4      	; 0x199c <writeRead+0x98>

		/* Verify Flash contents. */
		for (uint16_t i = 0; i < FLASH_PAGE_SIZE; i++) {
			printf(" ReadBuffer %d\n\r",ReadBuffer[i] );
			if (ReadBuffer[i] != WriteBuffer[i]){
				success = 0;
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}
		
		printf("\n\rsuccess 2nd attempt %d\n\r", success);
    199c:	9f 93       	push	r25
    199e:	8f 93       	push	r24
    19a0:	87 ea       	ldi	r24, 0xA7	; 167
    19a2:	90 e2       	ldi	r25, 0x20	; 32
    19a4:	9f 93       	push	r25
    19a6:	8f 93       	push	r24
    19a8:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
		success = 1;
	}
	
	
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	08 95       	ret

000019ca <TWI_MasterInit>:
uint8_t TWI_MasterRead(uint8_t address,
                    uint8_t bytesToRead)
{
	uint8_t twi_status = TWI_MasterWriteRead(address, 0, 0, bytesToRead);
	return twi_status;
}
    19ca:	e0 91 d7 28 	lds	r30, 0x28D7
    19ce:	f0 91 d8 28 	lds	r31, 0x28D8
    19d2:	80 83       	st	Z, r24
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	e0 91 d7 28 	lds	r30, 0x28D7
    19da:	f0 91 d8 28 	lds	r31, 0x28D8
    19de:	01 90       	ld	r0, Z+
    19e0:	f0 81       	ld	r31, Z
    19e2:	e0 2d       	mov	r30, r0
    19e4:	68 63       	ori	r22, 0x38	; 56
    19e6:	61 83       	std	Z+1, r22	; 0x01
    19e8:	e0 91 d7 28 	lds	r30, 0x28D7
    19ec:	f0 91 d8 28 	lds	r31, 0x28D8
    19f0:	a0 81       	ld	r26, Z
    19f2:	b1 81       	ldd	r27, Z+1	; 0x01
    19f4:	15 96       	adiw	r26, 0x05	; 5
    19f6:	4c 93       	st	X, r20
    19f8:	01 90       	ld	r0, Z+
    19fa:	f0 81       	ld	r31, Z
    19fc:	e0 2d       	mov	r30, r0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	84 83       	std	Z+4, r24	; 0x04
    1a02:	08 95       	ret

00001a04 <i2c_init>:
    1a04:	e0 e2       	ldi	r30, 0x20	; 32
    1a06:	f6 e0       	ldi	r31, 0x06	; 6
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	82 83       	std	Z+2, r24	; 0x02
    1a0c:	85 8b       	std	Z+21, r24	; 0x15
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	80 93 81 06 	sts	0x0681, r24
    1a14:	8a e2       	ldi	r24, 0x2A	; 42
    1a16:	96 e2       	ldi	r25, 0x26	; 38
    1a18:	80 93 d7 28 	sts	0x28D7, r24
    1a1c:	90 93 d8 28 	sts	0x28D8, r25
    1a20:	4b e9       	ldi	r20, 0x9B	; 155
    1a22:	60 e8       	ldi	r22, 0x80	; 128
    1a24:	80 ea       	ldi	r24, 0xA0	; 160
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <TWI_MasterInit>
    1a2c:	08 95       	ret

00001a2e <TWI_MasterWriteRead>:
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	49 30       	cpi	r20, 0x09	; 9
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <TWI_MasterWriteRead+0xa>
    1a36:	41 c0       	rjmp	.+130    	; 0x1aba <TWI_MasterWriteRead+0x8c>
    1a38:	29 30       	cpi	r18, 0x09	; 9
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <TWI_MasterWriteRead+0x10>
    1a3c:	40 c0       	rjmp	.+128    	; 0x1abe <TWI_MasterWriteRead+0x90>
    1a3e:	e0 91 d7 28 	lds	r30, 0x28D7
    1a42:	f0 91 d8 28 	lds	r31, 0x28D8
    1a46:	97 89       	ldd	r25, Z+23	; 0x17
    1a48:	91 11       	cpse	r25, r1
    1a4a:	2d c0       	rjmp	.+90     	; 0x1aa6 <TWI_MasterWriteRead+0x78>
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	97 8b       	std	Z+23, r25	; 0x17
    1a50:	10 8e       	std	Z+24, r1	; 0x18
    1a52:	88 0f       	add	r24, r24
    1a54:	82 83       	std	Z+2, r24	; 0x02
    1a56:	44 23       	and	r20, r20
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <TWI_MasterWriteRead+0x44>
    1a5a:	a6 2f       	mov	r26, r22
    1a5c:	b7 2f       	mov	r27, r23
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	3d 91       	ld	r19, X+
    1a64:	ef 01       	movw	r28, r30
    1a66:	c8 0f       	add	r28, r24
    1a68:	d9 1f       	adc	r29, r25
    1a6a:	3b 83       	std	Y+3, r19	; 0x03
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	84 17       	cp	r24, r20
    1a70:	c0 f3       	brcs	.-16     	; 0x1a62 <TWI_MasterWriteRead+0x34>
    1a72:	43 8b       	std	Z+19, r20	; 0x13
    1a74:	24 8b       	std	Z+20, r18	; 0x14
    1a76:	15 8a       	std	Z+21, r1	; 0x15
    1a78:	16 8a       	std	Z+22, r1	; 0x16
    1a7a:	83 89       	ldd	r24, Z+19	; 0x13
    1a7c:	88 23       	and	r24, r24
    1a7e:	41 f0       	breq	.+16     	; 0x1a90 <TWI_MasterWriteRead+0x62>
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	8e 7f       	andi	r24, 0xFE	; 254
    1a84:	01 90       	ld	r0, Z+
    1a86:	f0 81       	ld	r31, Z
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	86 83       	std	Z+6, r24	; 0x06
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	1a c0       	rjmp	.+52     	; 0x1ac4 <TWI_MasterWriteRead+0x96>
    1a90:	84 89       	ldd	r24, Z+20	; 0x14
    1a92:	88 23       	and	r24, r24
    1a94:	b1 f0       	breq	.+44     	; 0x1ac2 <TWI_MasterWriteRead+0x94>
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	81 60       	ori	r24, 0x01	; 1
    1a9a:	01 90       	ld	r0, Z+
    1a9c:	f0 81       	ld	r31, Z
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	86 83       	std	Z+6, r24	; 0x06
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <TWI_MasterWriteRead+0x96>
    1aa6:	84 e3       	ldi	r24, 0x34	; 52
    1aa8:	94 e0       	ldi	r25, 0x04	; 4
    1aaa:	9f 93       	push	r25
    1aac:	8f 93       	push	r24
    1aae:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <TWI_MasterWriteRead+0x96>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <TWI_MasterWriteRead+0x96>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <TWI_MasterWriteRead+0x96>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	08 95       	ret

00001aca <TWI_MasterWrite>:
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <TWI_MasterWriteRead>
    1ad0:	08 95       	ret

00001ad2 <TWI_MasterArbitrationLostBusErrorHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1ad2:	e0 91 d7 28 	lds	r30, 0x28D7
    1ad6:	f0 91 d8 28 	lds	r31, 0x28D8
    1ada:	a0 81       	ld	r26, Z
    1adc:	b1 81       	ldd	r27, Z+1	; 0x01
    1ade:	14 96       	adiw	r26, 0x04	; 4
    1ae0:	8c 91       	ld	r24, X
    1ae2:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    1ae4:	82 ff       	sbrs	r24, 2
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <TWI_MasterArbitrationLostBusErrorHandler+0x1c>
		twi->result = TWIM_RESULT_BUS_ERROR;
    1ae8:	94 e0       	ldi	r25, 0x04	; 4
    1aea:	90 8f       	std	Z+24, r25	; 0x18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <TWI_MasterArbitrationLostBusErrorHandler+0x20>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1aee:	93 e0       	ldi	r25, 0x03	; 3
    1af0:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1af2:	88 60       	ori	r24, 0x08	; 8
    1af4:	14 96       	adiw	r26, 0x04	; 4
    1af6:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    1af8:	17 8a       	std	Z+23, r1	; 0x17
    1afa:	08 95       	ret

00001afc <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1afc:	e0 91 d7 28 	lds	r30, 0x28D7
    1b00:	f0 91 d8 28 	lds	r31, 0x28D8
    1b04:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1b06:	17 8a       	std	Z+23, r1	; 0x17
    1b08:	08 95       	ret

00001b0a <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler()
{
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1b0e:	e0 91 d7 28 	lds	r30, 0x28D7
    1b12:	f0 91 d8 28 	lds	r31, 0x28D8
    1b16:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1b18:	24 89       	ldd	r18, Z+20	; 0x14
	//printf("\t\tWH%hd/%hd\r\n",bytesToWrite, twi->bytesWritten);

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    1b1a:	a0 81       	ld	r26, Z
    1b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1e:	14 96       	adiw	r26, 0x04	; 4
    1b20:	8c 91       	ld	r24, X
    1b22:	14 97       	sbiw	r26, 0x04	; 4
    1b24:	84 ff       	sbrs	r24, 4
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <TWI_MasterWriteHandler+0x2c>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	13 96       	adiw	r26, 0x03	; 3
    1b2c:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1b2e:	85 e0       	ldi	r24, 0x05	; 5
    1b30:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1b32:	17 8a       	std	Z+23, r1	; 0x17
    1b34:	1c c0       	rjmp	.+56     	; 0x1b6e <TWI_MasterWriteHandler+0x64>
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1b36:	85 89       	ldd	r24, Z+21	; 0x15
    1b38:	89 17       	cp	r24, r25
    1b3a:	58 f4       	brcc	.+22     	; 0x1b52 <TWI_MasterWriteHandler+0x48>
		uint8_t data = twi->writeData[twi->bytesWritten];
    1b3c:	85 89       	ldd	r24, Z+21	; 0x15
    1b3e:	ef 01       	movw	r28, r30
    1b40:	c8 0f       	add	r28, r24
    1b42:	d1 1d       	adc	r29, r1
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1b46:	17 96       	adiw	r26, 0x07	; 7
    1b48:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1b4a:	85 89       	ldd	r24, Z+21	; 0x15
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	85 8b       	std	Z+21, r24	; 0x15
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <TWI_MasterWriteHandler+0x64>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1b52:	86 89       	ldd	r24, Z+22	; 0x16
    1b54:	82 17       	cp	r24, r18
    1b56:	28 f4       	brcc	.+10     	; 0x1b62 <TWI_MasterWriteHandler+0x58>
		uint8_t readAddress = twi->address | 0x01;
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    1b5c:	16 96       	adiw	r26, 0x06	; 6
    1b5e:	8c 93       	st	X, r24
    1b60:	06 c0       	rjmp	.+12     	; 0x1b6e <TWI_MasterWriteHandler+0x64>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	13 96       	adiw	r26, 0x03	; 3
    1b66:	8c 93       	st	X, r24
		TWI_MasterTransactionFinished(TWIM_RESULT_OK);
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TWI_MasterTransactionFinished>
	}
}
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1b74:	e0 91 d7 28 	lds	r30, 0x28D7
    1b78:	f0 91 d8 28 	lds	r31, 0x28D8
    1b7c:	86 89       	ldd	r24, Z+22	; 0x16
    1b7e:	88 30       	cpi	r24, 0x08	; 8
    1b80:	70 f4       	brcc	.+28     	; 0x1b9e <TWI_MasterReadHandler+0x2a>
		uint8_t data = twi->interface->MASTER.DATA;
    1b82:	a0 81       	ld	r26, Z
    1b84:	b1 81       	ldd	r27, Z+1	; 0x01
    1b86:	17 96       	adiw	r26, 0x07	; 7
    1b88:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    1b8a:	96 89       	ldd	r25, Z+22	; 0x16
    1b8c:	df 01       	movw	r26, r30
    1b8e:	a9 0f       	add	r26, r25
    1b90:	b1 1d       	adc	r27, r1
    1b92:	1b 96       	adiw	r26, 0x0b	; 11
    1b94:	8c 93       	st	X, r24
		twi->bytesRead++;
    1b96:	86 89       	ldd	r24, Z+22	; 0x16
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	86 8b       	std	Z+22, r24	; 0x16
    1b9c:	08 c0       	rjmp	.+16     	; 0x1bae <TWI_MasterReadHandler+0x3a>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b9e:	01 90       	ld	r0, Z+
    1ba0:	f0 81       	ld	r31, Z
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	83 e0       	ldi	r24, 0x03	; 3
    1ba6:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TWI_MasterTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1bae:	e0 91 d7 28 	lds	r30, 0x28D7
    1bb2:	f0 91 d8 28 	lds	r31, 0x28D8
    1bb6:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1bb8:	86 89       	ldd	r24, Z+22	; 0x16
    1bba:	89 17       	cp	r24, r25
    1bbc:	30 f4       	brcc	.+12     	; 0x1bca <TWI_MasterReadHandler+0x56>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1bbe:	01 90       	ld	r0, Z+
    1bc0:	f0 81       	ld	r31, Z
    1bc2:	e0 2d       	mov	r30, r0
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	83 83       	std	Z+3, r24	; 0x03
    1bc8:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1bca:	01 90       	ld	r0, Z+
    1bcc:	f0 81       	ld	r31, Z
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	87 e0       	ldi	r24, 0x07	; 7
    1bd2:	83 83       	std	Z+3, r24	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(TWIM_RESULT_OK);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TWI_MasterTransactionFinished>
    1bda:	08 95       	ret

00001bdc <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1bdc:	e0 91 d7 28 	lds	r30, 0x28D7
    1be0:	f0 91 d8 28 	lds	r31, 0x28D8
    1be4:	01 90       	ld	r0, Z+
    1be6:	f0 81       	ld	r31, Z
    1be8:	e0 2d       	mov	r30, r0
    1bea:	84 81       	ldd	r24, Z+4	; 0x04
    1bec:	98 2f       	mov	r25, r24
    1bee:	9c 70       	andi	r25, 0x0C	; 12
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <TWI_MasterInterruptHandler+0x1c>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler();
    1bf2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <TWI_MasterArbitrationLostBusErrorHandler>
    1bf6:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1bf8:	86 ff       	sbrs	r24, 6
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <TWI_MasterInterruptHandler+0x26>
		TWI_MasterWriteHandler();
    1bfc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <TWI_MasterWriteHandler>
    1c00:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1c02:	88 23       	and	r24, r24
    1c04:	1c f4       	brge	.+6      	; 0x1c0c <TWI_MasterInterruptHandler+0x30>
		TWI_MasterReadHandler();
    1c06:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_MasterReadHandler>
    1c0a:	08 95       	ret
	}

	/* If unexpected state. */
	else {
		TWI_MasterTransactionFinished(TWIM_RESULT_FAIL);
    1c0c:	86 e0       	ldi	r24, 0x06	; 6
    1c0e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TWI_MasterTransactionFinished>
    1c12:	08 95       	ret

00001c14 <__vector_46>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

ISR(TWIE_TWIM_vect)
{
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	0b b6       	in	r0, 0x3b	; 59
    1c20:	0f 92       	push	r0
    1c22:	2f 93       	push	r18
    1c24:	3f 93       	push	r19
    1c26:	4f 93       	push	r20
    1c28:	5f 93       	push	r21
    1c2a:	6f 93       	push	r22
    1c2c:	7f 93       	push	r23
    1c2e:	8f 93       	push	r24
    1c30:	9f 93       	push	r25
    1c32:	af 93       	push	r26
    1c34:	bf 93       	push	r27
    1c36:	ef 93       	push	r30
    1c38:	ff 93       	push	r31
	TWI_MasterInterruptHandler();
    1c3a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <TWI_MasterInterruptHandler>
    1c3e:	ff 91       	pop	r31
    1c40:	ef 91       	pop	r30
    1c42:	bf 91       	pop	r27
    1c44:	af 91       	pop	r26
    1c46:	9f 91       	pop	r25
    1c48:	8f 91       	pop	r24
    1c4a:	7f 91       	pop	r23
    1c4c:	6f 91       	pop	r22
    1c4e:	5f 91       	pop	r21
    1c50:	4f 91       	pop	r20
    1c52:	3f 91       	pop	r19
    1c54:	2f 91       	pop	r18
    1c56:	0f 90       	pop	r0
    1c58:	0b be       	out	0x3b, r0	; 59
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <handle_cmd_wrapper>:
		hp_ir_block_bm &= (~(1<<dir));
	}
}

void ir_reset_rx(uint8_t dir){
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	ed b6       	in	r14, 0x3d	; 61
    1c76:	fe b6       	in	r15, 0x3e	; 62
    1c78:	80 91 db 2c 	lds	r24, 0x2CDB
    1c7c:	90 91 dc 2c 	lds	r25, 0x2CDC
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	2d b7       	in	r18, 0x3d	; 61
    1c84:	3e b7       	in	r19, 0x3e	; 62
    1c86:	28 1b       	sub	r18, r24
    1c88:	39 0b       	sbc	r19, r25
    1c8a:	2d bf       	out	0x3d, r18	; 61
    1c8c:	3e bf       	out	0x3e, r19	; 62
    1c8e:	0d b7       	in	r16, 0x3d	; 61
    1c90:	1e b7       	in	r17, 0x3e	; 62
    1c92:	0f 5f       	subi	r16, 0xFF	; 255
    1c94:	1f 4f       	sbci	r17, 0xFF	; 255
    1c96:	40 91 db 2c 	lds	r20, 0x2CDB
    1c9a:	50 91 dc 2c 	lds	r21, 0x2CDC
    1c9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	6e ed       	ldi	r22, 0xDE	; 222
    1ca4:	7c e2       	ldi	r23, 0x2C	; 44
    1ca6:	c8 01       	movw	r24, r16
    1ca8:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <memcpy>
    1cac:	60 91 db 2c 	lds	r22, 0x2CDB
    1cb0:	70 91 dc 2c 	lds	r23, 0x2CDC
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <handle_serial_command>
    1cba:	8f b7       	in	r24, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	10 92 cb 28 	sts	0x28CB, r1
    1cc2:	8f bf       	out	0x3f, r24	; 63
    1cc4:	ed be       	out	0x3d, r14	; 61
    1cc6:	fe be       	out	0x3e, r15	; 62
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	08 95       	ret

00001cd6 <clear_ir_buffer>:
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	99 e3       	ldi	r25, 0x39	; 57
    1cdc:	89 9f       	mul	r24, r25
    1cde:	f0 01       	movw	r30, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	e1 5c       	subi	r30, 0xC1	; 193
    1ce4:	f8 4d       	sbci	r31, 0xD8	; 216
    1ce6:	14 82       	std	Z+4, r1	; 0x04
    1ce8:	15 82       	std	Z+5, r1	; 0x05
    1cea:	16 82       	std	Z+6, r1	; 0x06
    1cec:	17 82       	std	Z+7, r1	; 0x07
    1cee:	10 86       	std	Z+8, r1	; 0x08
    1cf0:	11 86       	std	Z+9, r1	; 0x09
    1cf2:	12 86       	std	Z+10, r1	; 0x0a
    1cf4:	13 86       	std	Z+11, r1	; 0x0b
    1cf6:	14 86       	std	Z+12, r1	; 0x0c
    1cf8:	15 86       	std	Z+13, r1	; 0x0d
    1cfa:	16 aa       	std	Z+54, r1	; 0x36
    1cfc:	17 aa       	std	Z+55, r1	; 0x37
    1cfe:	10 ae       	std	Z+56, r1	; 0x38
    1d00:	f9 01       	movw	r30, r18
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	ec 5d       	subi	r30, 0xDC	; 220
    1d08:	ff 4d       	sbci	r31, 0xDF	; 223
    1d0a:	01 90       	ld	r0, Z+
    1d0c:	f0 81       	ld	r31, Z
    1d0e:	e0 2d       	mov	r30, r0
    1d10:	84 81       	ldd	r24, Z+4	; 0x04
    1d12:	80 61       	ori	r24, 0x10	; 16
    1d14:	84 83       	std	Z+4, r24	; 0x04
    1d16:	08 95       	ret

00001d18 <perform_ir_upkeep>:
    1d18:	2f 92       	push	r2
    1d1a:	3f 92       	push	r3
    1d1c:	4f 92       	push	r4
    1d1e:	5f 92       	push	r5
    1d20:	6f 92       	push	r6
    1d22:	7f 92       	push	r7
    1d24:	8f 92       	push	r8
    1d26:	9f 92       	push	r9
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	2d 97       	sbiw	r28, 0x0d	; 13
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	fe 01       	movw	r30, r28
    1d48:	31 96       	adiw	r30, 0x01	; 1
    1d4a:	8c e0       	ldi	r24, 0x0C	; 12
    1d4c:	df 01       	movw	r26, r30
    1d4e:	1d 92       	st	X+, r1
    1d50:	8a 95       	dec	r24
    1d52:	e9 f7       	brne	.-6      	; 0x1d4e <perform_ir_upkeep+0x36>
    1d54:	0f 2e       	mov	r0, r31
    1d56:	fd e4       	ldi	r31, 0x4D	; 77
    1d58:	ef 2e       	mov	r14, r31
    1d5a:	f7 e2       	ldi	r31, 0x27	; 39
    1d5c:	ff 2e       	mov	r15, r31
    1d5e:	f0 2d       	mov	r31, r0
    1d60:	4f 01       	movw	r8, r30
    1d62:	22 24       	eor	r2, r2
    1d64:	2a 94       	dec	r2
    1d66:	c1 2c       	mov	r12, r1
    1d68:	d1 2c       	mov	r13, r1
    1d6a:	0f 2e       	mov	r0, r31
    1d6c:	f9 e3       	ldi	r31, 0x39	; 57
    1d6e:	6f 2e       	mov	r6, r31
    1d70:	f0 2d       	mov	r31, r0
    1d72:	0f 2e       	mov	r0, r31
    1d74:	fd e3       	ldi	r31, 0x3D	; 61
    1d76:	7f 2e       	mov	r7, r31
    1d78:	f0 2d       	mov	r31, r0
    1d7a:	0f 2e       	mov	r0, r31
    1d7c:	f0 ed       	ldi	r31, 0xD0	; 208
    1d7e:	af 2e       	mov	r10, r31
    1d80:	f4 e0       	ldi	r31, 0x04	; 4
    1d82:	bf 2e       	mov	r11, r31
    1d84:	f0 2d       	mov	r31, r0
    1d86:	26 01       	movw	r4, r12
    1d88:	6c 9c       	mul	r6, r12
    1d8a:	f0 01       	movw	r30, r0
    1d8c:	6d 9c       	mul	r6, r13
    1d8e:	f0 0d       	add	r31, r0
    1d90:	11 24       	eor	r1, r1
    1d92:	e1 5c       	subi	r30, 0xC1	; 193
    1d94:	f8 4d       	sbci	r31, 0xD8	; 216
    1d96:	80 ad       	ldd	r24, Z+56	; 0x38
    1d98:	81 ff       	sbrs	r24, 1
    1d9a:	c7 c0       	rjmp	.+398    	; 0x1f2a <perform_ir_upkeep+0x212>
    1d9c:	3c 2c       	mov	r3, r12
    1d9e:	82 2d       	mov	r24, r2
    1da0:	22 20       	and	r2, r2
    1da2:	0c f4       	brge	.+2      	; 0x1da6 <perform_ir_upkeep+0x8e>
    1da4:	d0 c0       	rjmp	.+416    	; 0x1f46 <perform_ir_upkeep+0x22e>
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	6c 9c       	mul	r6, r12
    1daa:	d0 01       	movw	r26, r0
    1dac:	6d 9c       	mul	r6, r13
    1dae:	b0 0d       	add	r27, r0
    1db0:	11 24       	eor	r1, r1
    1db2:	ad 5b       	subi	r26, 0xBD	; 189
    1db4:	b8 4d       	sbci	r27, 0xD8	; 216
    1db6:	2d 91       	ld	r18, X+
    1db8:	3c 91       	ld	r19, X
    1dba:	11 97       	sbiw	r26, 0x01	; 1
    1dbc:	e8 2f       	mov	r30, r24
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 0b       	sbc	r31, r31
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	4c 0f       	add	r20, r28
    1dc8:	5d 1f       	adc	r21, r29
    1dca:	e4 0f       	add	r30, r20
    1dcc:	f5 1f       	adc	r31, r21
    1dce:	40 81       	ld	r20, Z
    1dd0:	51 81       	ldd	r21, Z+1	; 0x01
    1dd2:	42 17       	cp	r20, r18
    1dd4:	53 07       	cpc	r21, r19
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <perform_ir_upkeep+0xc2>
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	81 50       	subi	r24, 0x01	; 1
    1ddc:	62 f7       	brpl	.-40     	; 0x1db6 <perform_ir_upkeep+0x9e>
    1dde:	64 9c       	mul	r6, r4
    1de0:	f0 01       	movw	r30, r0
    1de2:	65 9c       	mul	r6, r5
    1de4:	f0 0d       	add	r31, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	e1 5c       	subi	r30, 0xC1	; 193
    1dea:	f8 4d       	sbci	r31, 0xD8	; 216
    1dec:	24 81       	ldd	r18, Z+4	; 0x04
    1dee:	35 81       	ldd	r19, Z+5	; 0x05
    1df0:	d4 01       	movw	r26, r8
    1df2:	2d 93       	st	X+, r18
    1df4:	3c 93       	st	X, r19
    1df6:	99 23       	and	r25, r25
    1df8:	21 f0       	breq	.+8      	; 0x1e02 <perform_ir_upkeep+0xea>
    1dfa:	83 2d       	mov	r24, r3
    1dfc:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    1e00:	94 c0       	rjmp	.+296    	; 0x1f2a <perform_ir_upkeep+0x212>
    1e02:	80 91 1c 26 	lds	r24, 0x261C
    1e06:	86 30       	cpi	r24, 0x06	; 6
    1e08:	28 f0       	brcs	.+10     	; 0x1e14 <perform_ir_upkeep+0xfc>
    1e0a:	b1 e0       	ldi	r27, 0x01	; 1
    1e0c:	b0 93 47 24 	sts	0x2447, r27
    1e10:	10 92 1c 26 	sts	0x261C, r1
    1e14:	ef b7       	in	r30, 0x3f	; 63
    1e16:	ed 87       	std	Y+13, r30	; 0x0d
    1e18:	f8 94       	cli
    1e1a:	64 9c       	mul	r6, r4
    1e1c:	f0 01       	movw	r30, r0
    1e1e:	65 9c       	mul	r6, r5
    1e20:	f0 0d       	add	r31, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	e1 5c       	subi	r30, 0xC1	; 193
    1e26:	f8 4d       	sbci	r31, 0xD8	; 216
    1e28:	86 a9       	ldd	r24, Z+54	; 0x36
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	06 c0       	rjmp	.+12     	; 0x1e3a <perform_ir_upkeep+0x122>
    1e2e:	bf 92       	push	r11
    1e30:	af 92       	push	r10
    1e32:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	64 9c       	mul	r6, r4
    1e3c:	80 01       	movw	r16, r0
    1e3e:	65 9c       	mul	r6, r5
    1e40:	10 0d       	add	r17, r0
    1e42:	11 24       	eor	r1, r1
    1e44:	01 5c       	subi	r16, 0xC1	; 193
    1e46:	18 4d       	sbci	r17, 0xD8	; 216
    1e48:	d8 01       	movw	r26, r16
    1e4a:	d6 96       	adiw	r26, 0x36	; 54
    1e4c:	4c 91       	ld	r20, X
    1e4e:	80 91 1c 26 	lds	r24, 0x261C
    1e52:	78 9e       	mul	r7, r24
    1e54:	c0 01       	movw	r24, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	8c 54       	subi	r24, 0x4C	; 76
    1e5e:	9b 4d       	sbci	r25, 0xDB	; 219
    1e60:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <memcpy>
    1e64:	e0 91 1c 26 	lds	r30, 0x261C
    1e68:	d8 01       	movw	r26, r16
    1e6a:	d6 96       	adiw	r26, 0x36	; 54
    1e6c:	8c 91       	ld	r24, X
    1e6e:	d6 97       	sbiw	r26, 0x36	; 54
    1e70:	7e 9e       	mul	r7, r30
    1e72:	f0 01       	movw	r30, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	ee 55       	subi	r30, 0x5E	; 94
    1e78:	fb 4d       	sbci	r31, 0xDB	; 219
    1e7a:	e8 0f       	add	r30, r24
    1e7c:	f1 1d       	adc	r31, r1
    1e7e:	12 8a       	std	Z+18, r1	; 0x12
    1e80:	20 91 1c 26 	lds	r18, 0x261C
    1e84:	8d 91       	ld	r24, X+
    1e86:	9d 91       	ld	r25, X+
    1e88:	0d 90       	ld	r0, X+
    1e8a:	bc 91       	ld	r27, X
    1e8c:	a0 2d       	mov	r26, r0
    1e8e:	72 9e       	mul	r7, r18
    1e90:	f0 01       	movw	r30, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	ee 55       	subi	r30, 0x5E	; 94
    1e96:	fb 4d       	sbci	r31, 0xDB	; 219
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
    1ea0:	e0 91 1c 26 	lds	r30, 0x261C
    1ea4:	7e 9e       	mul	r7, r30
    1ea6:	f0 01       	movw	r30, r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	ee 55       	subi	r30, 0x5E	; 94
    1eac:	fb 4d       	sbci	r31, 0xDB	; 219
    1eae:	32 ae       	std	Z+58, r3	; 0x3a
    1eb0:	e0 91 1c 26 	lds	r30, 0x261C
    1eb4:	d8 01       	movw	r26, r16
    1eb6:	16 96       	adiw	r26, 0x06	; 6
    1eb8:	8d 91       	ld	r24, X+
    1eba:	9c 91       	ld	r25, X
    1ebc:	17 97       	sbiw	r26, 0x07	; 7
    1ebe:	7e 9e       	mul	r7, r30
    1ec0:	f0 01       	movw	r30, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	ee 55       	subi	r30, 0x5E	; 94
    1ec6:	fb 4d       	sbci	r31, 0xDB	; 219
    1ec8:	80 8b       	std	Z+16, r24	; 0x10
    1eca:	91 8b       	std	Z+17, r25	; 0x11
    1ecc:	e0 91 1c 26 	lds	r30, 0x261C
    1ed0:	d6 96       	adiw	r26, 0x36	; 54
    1ed2:	8c 91       	ld	r24, X
    1ed4:	d6 97       	sbiw	r26, 0x36	; 54
    1ed6:	7e 9e       	mul	r7, r30
    1ed8:	f0 01       	movw	r30, r0
    1eda:	11 24       	eor	r1, r1
    1edc:	ee 55       	subi	r30, 0x5E	; 94
    1ede:	fb 4d       	sbci	r31, 0xDB	; 219
    1ee0:	83 af       	std	Z+59, r24	; 0x3b
    1ee2:	e0 91 1c 26 	lds	r30, 0x261C
    1ee6:	d8 96       	adiw	r26, 0x38	; 56
    1ee8:	8c 91       	ld	r24, X
    1eea:	82 95       	swap	r24
    1eec:	81 70       	andi	r24, 0x01	; 1
    1eee:	7e 9e       	mul	r7, r30
    1ef0:	f0 01       	movw	r30, r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	ee 55       	subi	r30, 0x5E	; 94
    1ef6:	fb 4d       	sbci	r31, 0xDB	; 219
    1ef8:	84 af       	std	Z+60, r24	; 0x3c
    1efa:	e0 91 1c 26 	lds	r30, 0x261C
    1efe:	7e 9e       	mul	r7, r30
    1f00:	f0 01       	movw	r30, r0
    1f02:	11 24       	eor	r1, r1
    1f04:	ee 55       	subi	r30, 0x5E	; 94
    1f06:	fb 4d       	sbci	r31, 0xDB	; 219
    1f08:	83 ad       	ldd	r24, Z+59	; 0x3b
    1f0a:	89 32       	cpi	r24, 0x29	; 41
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <perform_ir_upkeep+0x1fe>
    1f0e:	82 ec       	ldi	r24, 0xC2	; 194
    1f10:	90 e2       	ldi	r25, 0x20	; 32
    1f12:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
    1f16:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f18:	bf bf       	out	0x3f, r27	; 63
    1f1a:	80 91 1c 26 	lds	r24, 0x261C
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	80 93 1c 26 	sts	0x261C, r24
    1f24:	83 2d       	mov	r24, r3
    1f26:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    1f2a:	ef ef       	ldi	r30, 0xFF	; 255
    1f2c:	ce 1a       	sub	r12, r30
    1f2e:	de 0a       	sbc	r13, r30
    1f30:	f9 e3       	ldi	r31, 0x39	; 57
    1f32:	ef 0e       	add	r14, r31
    1f34:	f1 1c       	adc	r15, r1
    1f36:	42 e0       	ldi	r20, 0x02	; 2
    1f38:	84 0e       	add	r8, r20
    1f3a:	91 1c       	adc	r9, r1
    1f3c:	23 94       	inc	r2
    1f3e:	55 e0       	ldi	r21, 0x05	; 5
    1f40:	25 12       	cpse	r2, r21
    1f42:	21 cf       	rjmp	.-446    	; 0x1d86 <perform_ir_upkeep+0x6e>
    1f44:	0d c0       	rjmp	.+26     	; 0x1f60 <perform_ir_upkeep+0x248>
    1f46:	6c 9c       	mul	r6, r12
    1f48:	f0 01       	movw	r30, r0
    1f4a:	6d 9c       	mul	r6, r13
    1f4c:	f0 0d       	add	r31, r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	e1 5c       	subi	r30, 0xC1	; 193
    1f52:	f8 4d       	sbci	r31, 0xD8	; 216
    1f54:	84 81       	ldd	r24, Z+4	; 0x04
    1f56:	95 81       	ldd	r25, Z+5	; 0x05
    1f58:	d4 01       	movw	r26, r8
    1f5a:	8d 93       	st	X+, r24
    1f5c:	9c 93       	st	X, r25
    1f5e:	51 cf       	rjmp	.-350    	; 0x1e02 <perform_ir_upkeep+0xea>
    1f60:	2d 96       	adiw	r28, 0x0d	; 13
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	bf 90       	pop	r11
    1f78:	af 90       	pop	r10
    1f7a:	9f 90       	pop	r9
    1f7c:	8f 90       	pop	r8
    1f7e:	7f 90       	pop	r7
    1f80:	6f 90       	pop	r6
    1f82:	5f 90       	pop	r5
    1f84:	4f 90       	pop	r4
    1f86:	3f 90       	pop	r3
    1f88:	2f 90       	pop	r2
    1f8a:	08 95       	ret

00001f8c <ir_comm_init>:
    1f8c:	cf 93       	push	r28
    1f8e:	94 e4       	ldi	r25, 0x44	; 68
    1f90:	90 93 42 06 	sts	0x0642, r25
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	80 93 62 06 	sts	0x0662, r24
    1f9a:	90 93 82 06 	sts	0x0682, r25
    1f9e:	80 93 a2 06 	sts	0x06A2, r24
    1fa2:	8f b7       	in	r24, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	90 93 ca 28 	sts	0x28CA, r25
    1fac:	8f bf       	out	0x3f, r24	; 63
    1fae:	e4 e2       	ldi	r30, 0x24	; 36
    1fb0:	f0 e2       	ldi	r31, 0x20	; 32
    1fb2:	20 e3       	ldi	r18, 0x30	; 48
    1fb4:	30 e2       	ldi	r19, 0x20	; 32
    1fb6:	68 e2       	ldi	r22, 0x28	; 40
    1fb8:	53 e0       	ldi	r21, 0x03	; 3
    1fba:	40 e7       	ldi	r20, 0x70	; 112
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	a0 81       	ld	r26, Z
    1fc0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc2:	13 96       	adiw	r26, 0x03	; 3
    1fc4:	6c 93       	st	X, r22
    1fc6:	a0 81       	ld	r26, Z
    1fc8:	b1 81       	ldd	r27, Z+1	; 0x01
    1fca:	15 96       	adiw	r26, 0x05	; 5
    1fcc:	5c 93       	st	X, r21
    1fce:	a0 81       	ld	r26, Z
    1fd0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fd2:	16 96       	adiw	r26, 0x06	; 6
    1fd4:	4c 93       	st	X, r20
    1fd6:	a0 81       	ld	r26, Z
    1fd8:	b1 81       	ldd	r27, Z+1	; 0x01
    1fda:	17 96       	adiw	r26, 0x07	; 7
    1fdc:	9c 93       	st	X, r25
    1fde:	a0 81       	ld	r26, Z
    1fe0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fe2:	14 96       	adiw	r26, 0x04	; 4
    1fe4:	8c 91       	ld	r24, X
    1fe6:	14 97       	sbiw	r26, 0x04	; 4
    1fe8:	80 61       	ori	r24, 0x10	; 16
    1fea:	14 96       	adiw	r26, 0x04	; 4
    1fec:	8c 93       	st	X, r24
    1fee:	a1 91       	ld	r26, Z+
    1ff0:	b1 91       	ld	r27, Z+
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	8c 91       	ld	r24, X
    1ff6:	14 97       	sbiw	r26, 0x04	; 4
    1ff8:	88 60       	ori	r24, 0x08	; 8
    1ffa:	14 96       	adiw	r26, 0x04	; 4
    1ffc:	8c 93       	st	X, r24
    1ffe:	e2 17       	cp	r30, r18
    2000:	f3 07       	cpc	r31, r19
    2002:	e9 f6       	brne	.-70     	; 0x1fbe <ir_comm_init+0x32>
    2004:	10 92 d9 28 	sts	0x28D9, r1
    2008:	10 92 da 28 	sts	0x28DA, r1
    200c:	c0 e0       	ldi	r28, 0x00	; 0
    200e:	8c 2f       	mov	r24, r28
    2010:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    2014:	cf 5f       	subi	r28, 0xFF	; 255
    2016:	c6 30       	cpi	r28, 0x06	; 6
    2018:	d1 f7       	brne	.-12     	; 0x200e <ir_comm_init+0x82>
    201a:	10 92 cf 28 	sts	0x28CF, r1
    201e:	10 92 d0 28 	sts	0x28D0, r1
    2022:	10 92 d1 28 	sts	0x28D1, r1
    2026:	10 92 d2 28 	sts	0x28D2, r1
    202a:	10 92 1c 26 	sts	0x261C, r1
    202e:	10 92 47 24 	sts	0x2447, r1
    2032:	10 92 cb 28 	sts	0x28CB, r1
    2036:	10 92 d1 26 	sts	0x26D1, r1
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4c e8       	ldi	r20, 0x8C	; 140
    2040:	5e e0       	ldi	r21, 0x0E	; 14
    2042:	6e e3       	ldi	r22, 0x3E	; 62
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 95 3c 	call	0x792a	; 0x792a <schedule_periodic_task>
    204e:	8f b7       	in	r24, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	10 92 ca 28 	sts	0x28CA, r1
    2056:	8f bf       	out	0x3f, r24	; 63
    2058:	cf 91       	pop	r28
    205a:	08 95       	ret

0000205c <send_msg>:
    205c:	3f 92       	push	r3
    205e:	4f 92       	push	r4
    2060:	5f 92       	push	r5
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	8f 92       	push	r8
    2068:	9f 92       	push	r9
    206a:	af 92       	push	r10
    206c:	bf 92       	push	r11
    206e:	cf 92       	push	r12
    2070:	df 92       	push	r13
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	18 2f       	mov	r17, r24
    2080:	4b 01       	movw	r8, r22
    2082:	54 2e       	mov	r5, r20
    2084:	42 2e       	mov	r4, r18
    2086:	88 e2       	ldi	r24, 0x28	; 40
    2088:	84 17       	cp	r24, r20
    208a:	40 f4       	brcc	.+16     	; 0x209c <send_msg+0x40>
    208c:	87 ea       	ldi	r24, 0xA7	; 167
    208e:	94 e0       	ldi	r25, 0x04	; 4
    2090:	9f 93       	push	r25
    2092:	8f 93       	push	r24
    2094:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	c0 91 b0 23 	lds	r28, 0x23B0
    20a0:	d0 91 b1 23 	lds	r29, 0x23B1
    20a4:	e1 2e       	mov	r14, r17
    20a6:	f1 2c       	mov	r15, r1
    20a8:	10 fd       	sbrc	r17, 0
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <send_msg+0x6a>
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	ac 01       	movw	r20, r24
    20b2:	97 01       	movw	r18, r14
    20b4:	08 2e       	mov	r0, r24
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <send_msg+0x60>
    20b8:	35 95       	asr	r19
    20ba:	27 95       	ror	r18
    20bc:	0a 94       	dec	r0
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <send_msg+0x5c>
    20c0:	20 ff       	sbrs	r18, 0
    20c2:	40 c0       	rjmp	.+128    	; 0x2144 <send_msg+0xe8>
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <send_msg+0x6e>
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	89 e3       	ldi	r24, 0x39	; 57
    20cc:	84 9f       	mul	r24, r20
    20ce:	f0 01       	movw	r30, r0
    20d0:	85 9f       	mul	r24, r21
    20d2:	f0 0d       	add	r31, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	e1 5c       	subi	r30, 0xC1	; 193
    20d8:	f8 4d       	sbci	r31, 0xD8	; 216
    20da:	80 ad       	ldd	r24, Z+56	; 0x38
    20dc:	80 7c       	andi	r24, 0xC0	; 192
    20de:	c8 27       	eor	r28, r24
    20e0:	8c 2f       	mov	r24, r28
    20e2:	82 95       	swap	r24
    20e4:	8c 27       	eor	r24, r28
    20e6:	08 2e       	mov	r0, r24
    20e8:	86 95       	lsr	r24
    20ea:	86 95       	lsr	r24
    20ec:	80 25       	eor	r24, r0
    20ee:	08 2e       	mov	r0, r24
    20f0:	86 95       	lsr	r24
    20f2:	80 25       	eor	r24, r0
    20f4:	87 70       	andi	r24, 0x07	; 7
    20f6:	0c 2e       	mov	r0, r28
    20f8:	cd 2f       	mov	r28, r29
    20fa:	86 95       	lsr	r24
    20fc:	07 94       	ror	r0
    20fe:	87 95       	ror	r24
    2100:	d0 2d       	mov	r29, r0
    2102:	c8 27       	eor	r28, r24
    2104:	06 94       	lsr	r0
    2106:	87 95       	ror	r24
    2108:	d0 25       	eor	r29, r0
    210a:	c8 27       	eor	r28, r24
    210c:	80 85       	ldd	r24, Z+8	; 0x08
    210e:	91 85       	ldd	r25, Z+9	; 0x09
    2110:	c8 27       	eor	r28, r24
    2112:	8c 2f       	mov	r24, r28
    2114:	82 95       	swap	r24
    2116:	8c 27       	eor	r24, r28
    2118:	08 2e       	mov	r0, r24
    211a:	86 95       	lsr	r24
    211c:	86 95       	lsr	r24
    211e:	80 25       	eor	r24, r0
    2120:	08 2e       	mov	r0, r24
    2122:	86 95       	lsr	r24
    2124:	80 25       	eor	r24, r0
    2126:	87 70       	andi	r24, 0x07	; 7
    2128:	0c 2e       	mov	r0, r28
    212a:	cd 2f       	mov	r28, r29
    212c:	86 95       	lsr	r24
    212e:	07 94       	ror	r0
    2130:	87 95       	ror	r24
    2132:	d0 2d       	mov	r29, r0
    2134:	c8 27       	eor	r28, r24
    2136:	06 94       	lsr	r0
    2138:	87 95       	ror	r24
    213a:	d0 25       	eor	r29, r0
    213c:	c8 27       	eor	r28, r24
    213e:	51 10       	cpse	r5, r1
    2140:	07 c0       	rjmp	.+14     	; 0x2150 <send_msg+0xf4>
    2142:	91 c0       	rjmp	.+290    	; 0x2266 <send_msg+0x20a>
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	86 30       	cpi	r24, 0x06	; 6
    2148:	91 05       	cpc	r25, r1
    214a:	09 f0       	breq	.+2      	; 0x214e <send_msg+0xf2>
    214c:	b1 cf       	rjmp	.-158    	; 0x20b0 <send_msg+0x54>
    214e:	f7 cf       	rjmp	.-18     	; 0x213e <send_msg+0xe2>
    2150:	f4 01       	movw	r30, r8
    2152:	2f ef       	ldi	r18, 0xFF	; 255
    2154:	25 0d       	add	r18, r5
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	2f 5f       	subi	r18, 0xFF	; 255
    215a:	3f 4f       	sbci	r19, 0xFF	; 255
    215c:	28 0d       	add	r18, r8
    215e:	39 1d       	adc	r19, r9
    2160:	81 91       	ld	r24, Z+
    2162:	c8 27       	eor	r28, r24
    2164:	8c 2f       	mov	r24, r28
    2166:	82 95       	swap	r24
    2168:	8c 27       	eor	r24, r28
    216a:	08 2e       	mov	r0, r24
    216c:	86 95       	lsr	r24
    216e:	86 95       	lsr	r24
    2170:	80 25       	eor	r24, r0
    2172:	08 2e       	mov	r0, r24
    2174:	86 95       	lsr	r24
    2176:	80 25       	eor	r24, r0
    2178:	87 70       	andi	r24, 0x07	; 7
    217a:	0c 2e       	mov	r0, r28
    217c:	cd 2f       	mov	r28, r29
    217e:	86 95       	lsr	r24
    2180:	07 94       	ror	r0
    2182:	87 95       	ror	r24
    2184:	d0 2d       	mov	r29, r0
    2186:	c8 27       	eor	r28, r24
    2188:	06 94       	lsr	r0
    218a:	87 95       	ror	r24
    218c:	d0 25       	eor	r29, r0
    218e:	c8 27       	eor	r28, r24
    2190:	e2 17       	cp	r30, r18
    2192:	f3 07       	cpc	r31, r19
    2194:	29 f7       	brne	.-54     	; 0x2160 <send_msg+0x104>
    2196:	67 c0       	rjmp	.+206    	; 0x2266 <send_msg+0x20a>
    2198:	c7 01       	movw	r24, r14
    219a:	00 2e       	mov	r0, r16
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <send_msg+0x146>
    219e:	95 95       	asr	r25
    21a0:	87 95       	ror	r24
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <send_msg+0x142>
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	23 c0       	rjmp	.+70     	; 0x21f0 <send_msg+0x194>
    21aa:	30 9e       	mul	r3, r16
    21ac:	f0 01       	movw	r30, r0
    21ae:	31 9e       	mul	r3, r17
    21b0:	f0 0d       	add	r31, r0
    21b2:	11 24       	eor	r1, r1
    21b4:	e1 5c       	subi	r30, 0xC1	; 193
    21b6:	f8 4d       	sbci	r31, 0xD8	; 216
    21b8:	80 ad       	ldd	r24, Z+56	; 0x38
    21ba:	80 62       	ori	r24, 0x20	; 32
    21bc:	80 af       	std	Z+56, r24	; 0x38
    21be:	56 aa       	std	Z+54, r5	; 0x36
    21c0:	c4 83       	std	Z+4, r28	; 0x04
    21c2:	d5 83       	std	Z+5, r29	; 0x05
    21c4:	12 86       	std	Z+10, r1	; 0x0a
    21c6:	13 86       	std	Z+11, r1	; 0x0b
    21c8:	80 91 b0 23 	lds	r24, 0x23B0
    21cc:	90 91 b1 23 	lds	r25, 0x23B1
    21d0:	86 83       	std	Z+6, r24	; 0x06
    21d2:	97 83       	std	Z+7, r25	; 0x07
    21d4:	a3 01       	movw	r20, r6
    21d6:	b4 01       	movw	r22, r8
    21d8:	c6 01       	movw	r24, r12
    21da:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <memcpy>
    21de:	f5 01       	movw	r30, r10
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	f8 01       	movw	r30, r16
    21e4:	ea 5f       	subi	r30, 0xFA	; 250
    21e6:	ff 4d       	sbci	r31, 0xDF	; 223
    21e8:	80 81       	ld	r24, Z
    21ea:	89 2b       	or	r24, r25
    21ec:	f5 01       	movw	r30, r10
    21ee:	81 83       	std	Z+1, r24	; 0x01
    21f0:	0f 5f       	subi	r16, 0xFF	; 255
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	f9 e3       	ldi	r31, 0x39	; 57
    21f6:	cf 0e       	add	r12, r31
    21f8:	d1 1c       	adc	r13, r1
    21fa:	06 30       	cpi	r16, 0x06	; 6
    21fc:	11 05       	cpc	r17, r1
    21fe:	61 f6       	brne	.-104    	; 0x2198 <send_msg+0x13c>
    2200:	e4 e2       	ldi	r30, 0x24	; 36
    2202:	f0 e2       	ldi	r31, 0x20	; 32
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	49 e3       	ldi	r20, 0x39	; 57
    220a:	97 01       	movw	r18, r14
    220c:	08 2e       	mov	r0, r24
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <send_msg+0x1b8>
    2210:	35 95       	asr	r19
    2212:	27 95       	ror	r18
    2214:	0a 94       	dec	r0
    2216:	e2 f7       	brpl	.-8      	; 0x2210 <send_msg+0x1b4>
    2218:	20 ff       	sbrs	r18, 0
    221a:	1f c0       	rjmp	.+62     	; 0x225a <send_msg+0x1fe>
    221c:	48 9f       	mul	r20, r24
    221e:	d0 01       	movw	r26, r0
    2220:	49 9f       	mul	r20, r25
    2222:	b0 0d       	add	r27, r0
    2224:	11 24       	eor	r1, r1
    2226:	a1 5c       	subi	r26, 0xC1	; 193
    2228:	b8 4d       	sbci	r27, 0xD8	; 216
    222a:	1d 92       	st	X+, r1
    222c:	1d 92       	st	X+, r1
    222e:	1d 92       	st	X+, r1
    2230:	1c 92       	st	X, r1
    2232:	13 97       	sbiw	r26, 0x03	; 3
    2234:	44 20       	and	r4, r4
    2236:	49 f0       	breq	.+18     	; 0x224a <send_msg+0x1ee>
    2238:	a0 81       	ld	r26, Z
    223a:	b1 81       	ldd	r27, Z+1	; 0x01
    223c:	13 96       	adiw	r26, 0x03	; 3
    223e:	2c 91       	ld	r18, X
    2240:	13 97       	sbiw	r26, 0x03	; 3
    2242:	23 60       	ori	r18, 0x03	; 3
    2244:	13 96       	adiw	r26, 0x03	; 3
    2246:	2c 93       	st	X, r18
    2248:	08 c0       	rjmp	.+16     	; 0x225a <send_msg+0x1fe>
    224a:	a0 81       	ld	r26, Z
    224c:	b1 81       	ldd	r27, Z+1	; 0x01
    224e:	13 96       	adiw	r26, 0x03	; 3
    2250:	2c 91       	ld	r18, X
    2252:	13 97       	sbiw	r26, 0x03	; 3
    2254:	22 60       	ori	r18, 0x02	; 2
    2256:	13 96       	adiw	r26, 0x03	; 3
    2258:	2c 93       	st	X, r18
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	32 96       	adiw	r30, 0x02	; 2
    225e:	86 30       	cpi	r24, 0x06	; 6
    2260:	91 05       	cpc	r25, r1
    2262:	99 f6       	brne	.-90     	; 0x220a <send_msg+0x1ae>
    2264:	14 c0       	rjmp	.+40     	; 0x228e <send_msg+0x232>
    2266:	0f 2e       	mov	r0, r31
    2268:	fd e4       	ldi	r31, 0x4D	; 77
    226a:	cf 2e       	mov	r12, r31
    226c:	f7 e2       	ldi	r31, 0x27	; 39
    226e:	df 2e       	mov	r13, r31
    2270:	f0 2d       	mov	r31, r0
    2272:	00 e0       	ldi	r16, 0x00	; 0
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	0f 2e       	mov	r0, r31
    2278:	f9 e3       	ldi	r31, 0x39	; 57
    227a:	3f 2e       	mov	r3, r31
    227c:	f0 2d       	mov	r31, r0
    227e:	65 2c       	mov	r6, r5
    2280:	71 2c       	mov	r7, r1
    2282:	0f 2e       	mov	r0, r31
    2284:	a1 2c       	mov	r10, r1
    2286:	fb e0       	ldi	r31, 0x0B	; 11
    2288:	bf 2e       	mov	r11, r31
    228a:	f0 2d       	mov	r31, r0
    228c:	85 cf       	rjmp	.-246    	; 0x2198 <send_msg+0x13c>
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	af 90       	pop	r10
    22a2:	9f 90       	pop	r9
    22a4:	8f 90       	pop	r8
    22a6:	7f 90       	pop	r7
    22a8:	6f 90       	pop	r6
    22aa:	5f 90       	pop	r5
    22ac:	4f 90       	pop	r4
    22ae:	3f 90       	pop	r3
    22b0:	08 95       	ret

000022b2 <hp_ir_targeted_cmd>:
    22b2:	bf 92       	push	r11
    22b4:	cf 92       	push	r12
    22b6:	df 92       	push	r13
    22b8:	ef 92       	push	r14
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	c8 2e       	mov	r12, r24
    22c6:	7b 01       	movw	r14, r22
    22c8:	d4 2e       	mov	r13, r20
    22ca:	89 01       	movw	r16, r18
    22cc:	80 91 ca 28 	lds	r24, 0x28CA
    22d0:	81 11       	cpse	r24, r1
    22d2:	53 c0       	rjmp	.+166    	; 0x237a <hp_ir_targeted_cmd+0xc8>
    22d4:	8f e3       	ldi	r24, 0x3F	; 63
    22d6:	84 17       	cp	r24, r20
    22d8:	10 f4       	brcc	.+4      	; 0x22de <hp_ir_targeted_cmd+0x2c>
    22da:	80 ec       	ldi	r24, 0xC0	; 192
    22dc:	d8 0e       	add	r13, r24
    22de:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <perform_ir_upkeep>
    22e2:	bf b6       	in	r11, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	c4 e2       	ldi	r28, 0x24	; 36
    22e8:	d0 e2       	ldi	r29, 0x20	; 32
    22ea:	e0 e0       	ldi	r30, 0x00	; 0
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	6c 2d       	mov	r22, r12
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	59 e3       	ldi	r21, 0x39	; 57
    22f4:	41 e8       	ldi	r20, 0x81	; 129
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	db 01       	movw	r26, r22
    22fc:	0e 2e       	mov	r0, r30
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <hp_ir_targeted_cmd+0x52>
    2300:	b5 95       	asr	r27
    2302:	a7 95       	ror	r26
    2304:	0a 94       	dec	r0
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <hp_ir_targeted_cmd+0x4e>
    2308:	a0 ff       	sbrs	r26, 0
    230a:	29 c0       	rjmp	.+82     	; 0x235e <hp_ir_targeted_cmd+0xac>
    230c:	a8 81       	ld	r26, Y
    230e:	b9 81       	ldd	r27, Y+1	; 0x01
    2310:	14 96       	adiw	r26, 0x04	; 4
    2312:	2c 91       	ld	r18, X
    2314:	14 97       	sbiw	r26, 0x04	; 4
    2316:	2f 7e       	andi	r18, 0xEF	; 239
    2318:	14 96       	adiw	r26, 0x04	; 4
    231a:	2c 93       	st	X, r18
    231c:	5e 9f       	mul	r21, r30
    231e:	d0 01       	movw	r26, r0
    2320:	5f 9f       	mul	r21, r31
    2322:	b0 0d       	add	r27, r0
    2324:	11 24       	eor	r1, r1
    2326:	a1 5c       	subi	r26, 0xC1	; 193
    2328:	b8 4d       	sbci	r27, 0xD8	; 216
    232a:	d8 96       	adiw	r26, 0x38	; 56
    232c:	4c 93       	st	X, r20
    232e:	d8 97       	sbiw	r26, 0x38	; 56
    2330:	d8 96       	adiw	r26, 0x38	; 56
    2332:	2c 91       	ld	r18, X
    2334:	d8 97       	sbiw	r26, 0x38	; 56
    2336:	20 64       	ori	r18, 0x40	; 64
    2338:	d8 96       	adiw	r26, 0x38	; 56
    233a:	2c 93       	st	X, r18
    233c:	d8 97       	sbiw	r26, 0x38	; 56
    233e:	18 96       	adiw	r26, 0x08	; 8
    2340:	0d 93       	st	X+, r16
    2342:	1c 93       	st	X, r17
    2344:	19 97       	sbiw	r26, 0x09	; 9
    2346:	a0 91 ca 28 	lds	r26, 0x28CA
    234a:	9c 01       	movw	r18, r24
    234c:	0e 2e       	mov	r0, r30
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <hp_ir_targeted_cmd+0xa2>
    2350:	22 0f       	add	r18, r18
    2352:	33 1f       	adc	r19, r19
    2354:	0a 94       	dec	r0
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <hp_ir_targeted_cmd+0x9e>
    2358:	2a 2b       	or	r18, r26
    235a:	20 93 ca 28 	sts	0x28CA, r18
    235e:	31 96       	adiw	r30, 0x01	; 1
    2360:	22 96       	adiw	r28, 0x02	; 2
    2362:	e6 30       	cpi	r30, 0x06	; 6
    2364:	f1 05       	cpc	r31, r1
    2366:	49 f6       	brne	.-110    	; 0x22fa <hp_ir_targeted_cmd+0x48>
    2368:	bf be       	out	0x3f, r11	; 63
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	4d 2d       	mov	r20, r13
    236e:	b7 01       	movw	r22, r14
    2370:	8c 2d       	mov	r24, r12
    2372:	0e 94 2e 10 	call	0x205c	; 0x205c <send_msg>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	01 c0       	rjmp	.+2      	; 0x237c <hp_ir_targeted_cmd+0xca>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	bf 90       	pop	r11
    238e:	08 95       	ret

00002390 <received_ir_cmd>:
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	18 2f       	mov	r17, r24
    239a:	0f b7       	in	r16, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	80 91 cb 28 	lds	r24, 0x28CB
    23a2:	81 11       	cpse	r24, r1
    23a4:	35 c0       	rjmp	.+106    	; 0x2410 <received_ir_cmd+0x80>
    23a6:	89 e3       	ldi	r24, 0x39	; 57
    23a8:	18 9f       	mul	r17, r24
    23aa:	b0 01       	movw	r22, r0
    23ac:	11 24       	eor	r1, r1
    23ae:	eb 01       	movw	r28, r22
    23b0:	c1 5c       	subi	r28, 0xC1	; 193
    23b2:	d8 4d       	sbci	r29, 0xD8	; 216
    23b4:	4e a9       	ldd	r20, Y+54	; 0x36
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	63 5b       	subi	r22, 0xB3	; 179
    23ba:	78 4d       	sbci	r23, 0xD8	; 216
    23bc:	8e ed       	ldi	r24, 0xDE	; 222
    23be:	9c e2       	ldi	r25, 0x2C	; 44
    23c0:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <memcpy>
    23c4:	ee a9       	ldd	r30, Y+54	; 0x36
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	e2 52       	subi	r30, 0x22	; 34
    23ca:	f3 4d       	sbci	r31, 0xD3	; 211
    23cc:	10 82       	st	Z, r1
    23ce:	2e a9       	ldd	r18, Y+54	; 0x36
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	20 93 db 2c 	sts	0x2CDB, r18
    23d6:	30 93 dc 2c 	sts	0x2CDC, r19
    23da:	88 81       	ld	r24, Y
    23dc:	99 81       	ldd	r25, Y+1	; 0x01
    23de:	aa 81       	ldd	r26, Y+2	; 0x02
    23e0:	bb 81       	ldd	r27, Y+3	; 0x03
    23e2:	80 93 cf 28 	sts	0x28CF, r24
    23e6:	90 93 d0 28 	sts	0x28D0, r25
    23ea:	a0 93 d1 28 	sts	0x28D1, r26
    23ee:	b0 93 d2 28 	sts	0x28D2, r27
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	9f 81       	ldd	r25, Y+7	; 0x07
    23f6:	80 93 13 26 	sts	0x2613, r24
    23fa:	90 93 14 26 	sts	0x2614, r25
    23fe:	10 93 51 24 	sts	0x2451, r17
    2402:	8f a9       	ldd	r24, Y+55	; 0x37
    2404:	80 93 9a 24 	sts	0x249A, r24
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	80 93 cb 28 	sts	0x28CB, r24
    240e:	01 c0       	rjmp	.+2      	; 0x2412 <received_ir_cmd+0x82>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	0f bf       	out	0x3f, r16	; 63
    2414:	88 23       	and	r24, r24
    2416:	a1 f0       	breq	.+40     	; 0x2440 <received_ir_cmd+0xb0>
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	42 e3       	ldi	r20, 0x32	; 50
    241e:	5e e0       	ldi	r21, 0x0E	; 14
    2420:	65 e0       	ldi	r22, 0x05	; 5
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    242c:	df b7       	in	r29, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	c0 e0       	ldi	r28, 0x00	; 0
    2432:	8c 2f       	mov	r24, r28
    2434:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    2438:	cf 5f       	subi	r28, 0xFF	; 255
    243a:	c6 30       	cpi	r28, 0x06	; 6
    243c:	d1 f7       	brne	.-12     	; 0x2432 <received_ir_cmd+0xa2>
    243e:	df bf       	out	0x3f, r29	; 63
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	08 95       	ret

0000244a <received_ir_sync>:
    244a:	ef 92       	push	r14
    244c:	ff 92       	push	r15
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	2f b7       	in	r18, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	90 91 d1 26 	lds	r25, 0x26D1
    245e:	91 11       	cpse	r25, r1
    2460:	0c c0       	rjmp	.+24     	; 0x247a <received_ir_sync+0x30>
    2462:	c0 91 20 0a 	lds	r28, 0x0A20
    2466:	d0 91 21 0a 	lds	r29, 0x0A21
    246a:	8f 3f       	cpi	r24, 0xFF	; 255
    246c:	21 f0       	breq	.+8      	; 0x2476 <received_ir_sync+0x2c>
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	90 93 d1 26 	sts	0x26D1, r25
    2474:	03 c0       	rjmp	.+6      	; 0x247c <received_ir_sync+0x32>
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	01 c0       	rjmp	.+2      	; 0x247c <received_ir_sync+0x32>
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	2f bf       	out	0x3f, r18	; 63
    247e:	99 23       	and	r25, r25
    2480:	09 f4       	brne	.+2      	; 0x2484 <received_ir_sync+0x3a>
    2482:	6d c0       	rjmp	.+218    	; 0x255e <received_ir_sync+0x114>
    2484:	8b 01       	movw	r16, r22
    2486:	68 2f       	mov	r22, r24
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	6e 5f       	subi	r22, 0xFE	; 254
    248c:	7f 4f       	sbci	r23, 0xFF	; 255
    248e:	07 2e       	mov	r0, r23
    2490:	00 0c       	add	r0, r0
    2492:	88 0b       	sbc	r24, r24
    2494:	99 0b       	sbc	r25, r25
    2496:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	50 e4       	ldi	r21, 0x40	; 64
    24a2:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    24a6:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    24aa:	6c 17       	cp	r22, r28
    24ac:	7d 07       	cpc	r23, r29
    24ae:	28 f0       	brcs	.+10     	; 0x24ba <received_ir_sync+0x70>
    24b0:	cf 5b       	subi	r28, 0xBF	; 191
    24b2:	d2 46       	sbci	r29, 0x62	; 98
    24b4:	c6 1b       	sub	r28, r22
    24b6:	d7 0b       	sbc	r29, r23
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <received_ir_sync+0x74>
    24ba:	c6 1b       	sub	r28, r22
    24bc:	d7 0b       	sbc	r29, r23
    24be:	ff b6       	in	r15, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	86 e0       	ldi	r24, 0x06	; 6
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	0e 94 7c 50 	call	0xa0f8	; 0xa0f8 <malloc>
    24ca:	ac 01       	movw	r20, r24
    24cc:	ff be       	out	0x3f, r15	; 63
    24ce:	e0 91 28 26 	lds	r30, 0x2628
    24d2:	f0 91 29 26 	lds	r31, 0x2629
    24d6:	04 80       	ldd	r0, Z+4	; 0x04
    24d8:	f5 81       	ldd	r31, Z+5	; 0x05
    24da:	e0 2d       	mov	r30, r0
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	c8 17       	cp	r28, r24
    24e2:	d9 07       	cpc	r29, r25
    24e4:	40 f4       	brcc	.+16     	; 0x24f6 <received_ir_sync+0xac>
    24e6:	04 80       	ldd	r0, Z+4	; 0x04
    24e8:	f5 81       	ldd	r31, Z+5	; 0x05
    24ea:	e0 2d       	mov	r30, r0
    24ec:	20 81       	ld	r18, Z
    24ee:	31 81       	ldd	r19, Z+1	; 0x01
    24f0:	c2 17       	cp	r28, r18
    24f2:	d3 07       	cpc	r29, r19
    24f4:	c0 f3       	brcs	.-16     	; 0x24e6 <received_ir_sync+0x9c>
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	dc 01       	movw	r26, r24
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	4d 93       	st	X+, r20
    2500:	5c 93       	st	X, r21
    2502:	15 97       	sbiw	r26, 0x05	; 5
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	da 01       	movw	r26, r20
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	8d 93       	st	X+, r24
    250e:	9c 93       	st	X, r25
    2510:	13 97       	sbiw	r26, 0x03	; 3
    2512:	14 96       	adiw	r26, 0x04	; 4
    2514:	ed 93       	st	X+, r30
    2516:	fc 93       	st	X, r31
    2518:	15 97       	sbiw	r26, 0x05	; 5
    251a:	42 83       	std	Z+2, r20	; 0x02
    251c:	53 83       	std	Z+3, r21	; 0x03
    251e:	cd 93       	st	X+, r28
    2520:	dc 93       	st	X, r29
    2522:	ef b6       	in	r14, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	c0 e0       	ldi	r28, 0x00	; 0
    2528:	d0 e0       	ldi	r29, 0x00	; 0
    252a:	0f 2e       	mov	r0, r31
    252c:	f9 e3       	ldi	r31, 0x39	; 57
    252e:	ff 2e       	mov	r15, r31
    2530:	f0 2d       	mov	r31, r0
    2532:	fc 9e       	mul	r15, r28
    2534:	f0 01       	movw	r30, r0
    2536:	fd 9e       	mul	r15, r29
    2538:	f0 0d       	add	r31, r0
    253a:	11 24       	eor	r1, r1
    253c:	e1 5c       	subi	r30, 0xC1	; 193
    253e:	f8 4d       	sbci	r31, 0xD8	; 216
    2540:	86 81       	ldd	r24, Z+6	; 0x06
    2542:	97 81       	ldd	r25, Z+7	; 0x07
    2544:	80 17       	cp	r24, r16
    2546:	91 07       	cpc	r25, r17
    2548:	19 f4       	brne	.+6      	; 0x2550 <received_ir_sync+0x106>
    254a:	8c 2f       	mov	r24, r28
    254c:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    2550:	21 96       	adiw	r28, 0x01	; 1
    2552:	c6 30       	cpi	r28, 0x06	; 6
    2554:	d1 05       	cpc	r29, r1
    2556:	69 f7       	brne	.-38     	; 0x2532 <received_ir_sync+0xe8>
    2558:	10 92 d1 26 	sts	0x26D1, r1
    255c:	ef be       	out	0x3f, r14	; 63
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	08 95       	ret

0000256c <received_rnb_r>:
    256c:	ef 92       	push	r14
    256e:	ff 92       	push	r15
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	eb 01       	movw	r28, r22
    257a:	6f b7       	in	r22, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	90 91 a9 26 	lds	r25, 0x26A9
    2582:	91 11       	cpse	r25, r1
    2584:	2f c0       	rjmp	.+94     	; 0x25e4 <received_rnb_r+0x78>
    2586:	90 91 ca 28 	lds	r25, 0x28CA
    258a:	91 11       	cpse	r25, r1
    258c:	27 c0       	rjmp	.+78     	; 0x25dc <received_rnb_r+0x70>
    258e:	8f 3f       	cpi	r24, 0xFF	; 255
    2590:	39 f1       	breq	.+78     	; 0x25e0 <received_rnb_r+0x74>
    2592:	c0 93 cc 28 	sts	0x28CC, r28
    2596:	d0 93 cd 28 	sts	0x28CD, r29
    259a:	85 30       	cpi	r24, 0x05	; 5
    259c:	18 f4       	brcc	.+6      	; 0x25a4 <received_rnb_r+0x38>
    259e:	94 e1       	ldi	r25, 0x14	; 20
    25a0:	98 1b       	sub	r25, r24
    25a2:	89 2f       	mov	r24, r25
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	05 96       	adiw	r24, 0x05	; 5
    25a8:	09 2e       	mov	r0, r25
    25aa:	00 0c       	add	r0, r0
    25ac:	aa 0b       	sbc	r26, r26
    25ae:	bb 0b       	sbc	r27, r27
    25b0:	79 01       	movw	r14, r18
    25b2:	8a 01       	movw	r16, r20
    25b4:	e8 1a       	sub	r14, r24
    25b6:	f9 0a       	sbc	r15, r25
    25b8:	0a 0b       	sbc	r16, r26
    25ba:	1b 0b       	sbc	r17, r27
    25bc:	e0 92 2b 27 	sts	0x272B, r14
    25c0:	f0 92 2c 27 	sts	0x272C, r15
    25c4:	00 93 2d 27 	sts	0x272D, r16
    25c8:	10 93 2e 27 	sts	0x272E, r17
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	80 93 a9 26 	sts	0x26A9, r24
    25d2:	8f ef       	ldi	r24, 0xFF	; 255
    25d4:	80 93 ca 28 	sts	0x28CA, r24
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <received_rnb_r+0x7a>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	03 c0       	rjmp	.+6      	; 0x25e6 <received_rnb_r+0x7a>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	01 c0       	rjmp	.+2      	; 0x25e6 <received_rnb_r+0x7a>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	6f bf       	out	0x3f, r22	; 63
    25e8:	88 23       	and	r24, r24
    25ea:	09 f4       	brne	.+2      	; 0x25ee <received_rnb_r+0x82>
    25ec:	3e c0       	rjmp	.+124    	; 0x266a <received_rnb_r+0xfe>
    25ee:	ef b6       	in	r14, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	00 e0       	ldi	r16, 0x00	; 0
    25f4:	10 e0       	ldi	r17, 0x00	; 0
    25f6:	0f 2e       	mov	r0, r31
    25f8:	f9 e3       	ldi	r31, 0x39	; 57
    25fa:	ff 2e       	mov	r15, r31
    25fc:	f0 2d       	mov	r31, r0
    25fe:	f0 9e       	mul	r15, r16
    2600:	f0 01       	movw	r30, r0
    2602:	f1 9e       	mul	r15, r17
    2604:	f0 0d       	add	r31, r0
    2606:	11 24       	eor	r1, r1
    2608:	e1 5c       	subi	r30, 0xC1	; 193
    260a:	f8 4d       	sbci	r31, 0xD8	; 216
    260c:	86 81       	ldd	r24, Z+6	; 0x06
    260e:	97 81       	ldd	r25, Z+7	; 0x07
    2610:	8c 17       	cp	r24, r28
    2612:	9d 07       	cpc	r25, r29
    2614:	19 f4       	brne	.+6      	; 0x261c <received_rnb_r+0xb0>
    2616:	80 2f       	mov	r24, r16
    2618:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    261c:	0f 5f       	subi	r16, 0xFF	; 255
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	06 30       	cpi	r16, 0x06	; 6
    2622:	11 05       	cpc	r17, r1
    2624:	61 f7       	brne	.-40     	; 0x25fe <received_rnb_r+0x92>
    2626:	ef be       	out	0x3f, r14	; 63
    2628:	80 91 2b 27 	lds	r24, 0x272B
    262c:	90 91 2c 27 	lds	r25, 0x272C
    2630:	a0 91 2d 27 	lds	r26, 0x272D
    2634:	b0 91 2e 27 	lds	r27, 0x272E
    2638:	80 93 2b 27 	sts	0x272B, r24
    263c:	90 93 2c 27 	sts	0x272C, r25
    2640:	a0 93 2d 27 	sts	0x272D, r26
    2644:	b0 93 2e 27 	sts	0x272E, r27
    2648:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <ir_range_meas>
    264c:	8f b7       	in	r24, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	10 92 ca 28 	sts	0x28CA, r1
    2654:	8f bf       	out	0x3f, r24	; 63
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	45 e8       	ldi	r20, 0x85	; 133
    265c:	54 e3       	ldi	r21, 0x34	; 52
    265e:	6a e0       	ldi	r22, 0x0A	; 10
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	08 95       	ret

00002678 <ir_receive>:
    2678:	cf 92       	push	r12
    267a:	df 92       	push	r13
    267c:	ef 92       	push	r14
    267e:	ff 92       	push	r15
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	18 2f       	mov	r17, r24
    268a:	c8 2f       	mov	r28, r24
    268c:	d0 e0       	ldi	r29, 0x00	; 0
    268e:	fe 01       	movw	r30, r28
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ec 5d       	subi	r30, 0xDC	; 220
    2696:	ff 4d       	sbci	r31, 0xDF	; 223
    2698:	01 90       	ld	r0, Z+
    269a:	f0 81       	ld	r31, Z
    269c:	e0 2d       	mov	r30, r0
    269e:	00 81       	ld	r16, Z
    26a0:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    26a4:	6b 01       	movw	r12, r22
    26a6:	7c 01       	movw	r14, r24
    26a8:	89 e3       	ldi	r24, 0x39	; 57
    26aa:	8c 9f       	mul	r24, r28
    26ac:	f0 01       	movw	r30, r0
    26ae:	8d 9f       	mul	r24, r29
    26b0:	f0 0d       	add	r31, r0
    26b2:	11 24       	eor	r1, r1
    26b4:	e1 5c       	subi	r30, 0xC1	; 193
    26b6:	f8 4d       	sbci	r31, 0xD8	; 216
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	a2 81       	ldd	r26, Z+2	; 0x02
    26be:	b3 81       	ldd	r27, Z+3	; 0x03
    26c0:	a7 01       	movw	r20, r14
    26c2:	96 01       	movw	r18, r12
    26c4:	28 1b       	sub	r18, r24
    26c6:	39 0b       	sbc	r19, r25
    26c8:	4a 0b       	sbc	r20, r26
    26ca:	5b 0b       	sbc	r21, r27
    26cc:	25 31       	cpi	r18, 0x15	; 21
    26ce:	31 05       	cpc	r19, r1
    26d0:	41 05       	cpc	r20, r1
    26d2:	51 05       	cpc	r21, r1
    26d4:	18 f0       	brcs	.+6      	; 0x26dc <ir_receive+0x64>
    26d6:	81 2f       	mov	r24, r17
    26d8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    26dc:	89 e3       	ldi	r24, 0x39	; 57
    26de:	8c 9f       	mul	r24, r28
    26e0:	f0 01       	movw	r30, r0
    26e2:	8d 9f       	mul	r24, r29
    26e4:	f0 0d       	add	r31, r0
    26e6:	11 24       	eor	r1, r1
    26e8:	e1 5c       	subi	r30, 0xC1	; 193
    26ea:	f8 4d       	sbci	r31, 0xD8	; 216
    26ec:	c0 82       	st	Z, r12
    26ee:	d1 82       	std	Z+1, r13	; 0x01
    26f0:	e2 82       	std	Z+2, r14	; 0x02
    26f2:	f3 82       	std	Z+3, r15	; 0x03
    26f4:	02 84       	ldd	r0, Z+10	; 0x0a
    26f6:	f3 85       	ldd	r31, Z+11	; 0x0b
    26f8:	e0 2d       	mov	r30, r0
    26fa:	e8 30       	cpi	r30, 0x08	; 8
    26fc:	f1 05       	cpc	r31, r1
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <ir_receive+0x8a>
    2700:	b9 c0       	rjmp	.+370    	; 0x2874 <ir_receive+0x1fc>
    2702:	88 27       	eor	r24, r24
    2704:	e2 50       	subi	r30, 0x02	; 2
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	8f 4f       	sbci	r24, 0xFF	; 255
    270a:	0c 94 56 50 	jmp	0xa0ac	; 0xa0ac <__tablejump2__>
    270e:	80 2f       	mov	r24, r16
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	29 e3       	ldi	r18, 0x39	; 57
    2714:	2c 9f       	mul	r18, r28
    2716:	f0 01       	movw	r30, r0
    2718:	2d 9f       	mul	r18, r29
    271a:	f0 0d       	add	r31, r0
    271c:	11 24       	eor	r1, r1
    271e:	e1 5c       	subi	r30, 0xC1	; 193
    2720:	f8 4d       	sbci	r31, 0xD8	; 216
    2722:	86 83       	std	Z+6, r24	; 0x06
    2724:	97 83       	std	Z+7, r25	; 0x07
    2726:	d0 c0       	rjmp	.+416    	; 0x28c8 <ir_receive+0x250>
    2728:	89 e3       	ldi	r24, 0x39	; 57
    272a:	8c 9f       	mul	r24, r28
    272c:	f0 01       	movw	r30, r0
    272e:	8d 9f       	mul	r24, r29
    2730:	f0 0d       	add	r31, r0
    2732:	11 24       	eor	r1, r1
    2734:	e1 5c       	subi	r30, 0xC1	; 193
    2736:	f8 4d       	sbci	r31, 0xD8	; 216
    2738:	86 81       	ldd	r24, Z+6	; 0x06
    273a:	97 81       	ldd	r25, Z+7	; 0x07
    273c:	90 2b       	or	r25, r16
    273e:	86 83       	std	Z+6, r24	; 0x06
    2740:	97 83       	std	Z+7, r25	; 0x07
    2742:	c2 c0       	rjmp	.+388    	; 0x28c8 <ir_receive+0x250>
    2744:	80 2f       	mov	r24, r16
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	29 e3       	ldi	r18, 0x39	; 57
    274a:	2c 9f       	mul	r18, r28
    274c:	f0 01       	movw	r30, r0
    274e:	2d 9f       	mul	r18, r29
    2750:	f0 0d       	add	r31, r0
    2752:	11 24       	eor	r1, r1
    2754:	e1 5c       	subi	r30, 0xC1	; 193
    2756:	f8 4d       	sbci	r31, 0xD8	; 216
    2758:	84 83       	std	Z+4, r24	; 0x04
    275a:	95 83       	std	Z+5, r25	; 0x05
    275c:	b5 c0       	rjmp	.+362    	; 0x28c8 <ir_receive+0x250>
    275e:	89 e3       	ldi	r24, 0x39	; 57
    2760:	8c 9f       	mul	r24, r28
    2762:	f0 01       	movw	r30, r0
    2764:	8d 9f       	mul	r24, r29
    2766:	f0 0d       	add	r31, r0
    2768:	11 24       	eor	r1, r1
    276a:	e1 5c       	subi	r30, 0xC1	; 193
    276c:	f8 4d       	sbci	r31, 0xD8	; 216
    276e:	84 81       	ldd	r24, Z+4	; 0x04
    2770:	95 81       	ldd	r25, Z+5	; 0x05
    2772:	90 2b       	or	r25, r16
    2774:	84 83       	std	Z+4, r24	; 0x04
    2776:	95 83       	std	Z+5, r25	; 0x05
    2778:	a7 c0       	rjmp	.+334    	; 0x28c8 <ir_receive+0x250>
    277a:	89 e3       	ldi	r24, 0x39	; 57
    277c:	8c 9f       	mul	r24, r28
    277e:	f0 01       	movw	r30, r0
    2780:	8d 9f       	mul	r24, r29
    2782:	f0 0d       	add	r31, r0
    2784:	11 24       	eor	r1, r1
    2786:	e1 5c       	subi	r30, 0xC1	; 193
    2788:	f8 4d       	sbci	r31, 0xD8	; 216
    278a:	80 ad       	ldd	r24, Z+56	; 0x38
    278c:	90 2f       	mov	r25, r16
    278e:	90 7c       	andi	r25, 0xC0	; 192
    2790:	89 2b       	or	r24, r25
    2792:	80 af       	std	Z+56, r24	; 0x38
    2794:	20 ad       	ldd	r18, Z+56	; 0x38
    2796:	86 81       	ldd	r24, Z+6	; 0x06
    2798:	97 81       	ldd	r25, Z+7	; 0x07
    279a:	20 7c       	andi	r18, 0xC0	; 192
    279c:	82 27       	eor	r24, r18
    279e:	28 2f       	mov	r18, r24
    27a0:	22 95       	swap	r18
    27a2:	28 27       	eor	r18, r24
    27a4:	02 2e       	mov	r0, r18
    27a6:	26 95       	lsr	r18
    27a8:	26 95       	lsr	r18
    27aa:	20 25       	eor	r18, r0
    27ac:	02 2e       	mov	r0, r18
    27ae:	26 95       	lsr	r18
    27b0:	20 25       	eor	r18, r0
    27b2:	27 70       	andi	r18, 0x07	; 7
    27b4:	08 2e       	mov	r0, r24
    27b6:	89 2f       	mov	r24, r25
    27b8:	26 95       	lsr	r18
    27ba:	07 94       	ror	r0
    27bc:	27 95       	ror	r18
    27be:	90 2d       	mov	r25, r0
    27c0:	82 27       	eor	r24, r18
    27c2:	06 94       	lsr	r0
    27c4:	27 95       	ror	r18
    27c6:	90 25       	eor	r25, r0
    27c8:	82 27       	eor	r24, r18
    27ca:	84 87       	std	Z+12, r24	; 0x0c
    27cc:	95 87       	std	Z+13, r25	; 0x0d
    27ce:	0f 73       	andi	r16, 0x3F	; 63
    27d0:	06 ab       	std	Z+54, r16	; 0x36
    27d2:	86 a9       	ldd	r24, Z+54	; 0x36
    27d4:	89 32       	cpi	r24, 0x29	; 41
    27d6:	08 f4       	brcc	.+2      	; 0x27da <ir_receive+0x162>
    27d8:	77 c0       	rjmp	.+238    	; 0x28c8 <ir_receive+0x250>
    27da:	89 e3       	ldi	r24, 0x39	; 57
    27dc:	8c 9f       	mul	r24, r28
    27de:	f0 01       	movw	r30, r0
    27e0:	8d 9f       	mul	r24, r29
    27e2:	f0 0d       	add	r31, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	e1 5c       	subi	r30, 0xC1	; 193
    27e8:	f8 4d       	sbci	r31, 0xD8	; 216
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	86 ab       	std	Z+54, r24	; 0x36
    27ee:	6c c0       	rjmp	.+216    	; 0x28c8 <ir_receive+0x250>
    27f0:	80 2f       	mov	r24, r16
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	29 e3       	ldi	r18, 0x39	; 57
    27f6:	2c 9f       	mul	r18, r28
    27f8:	f0 01       	movw	r30, r0
    27fa:	2d 9f       	mul	r18, r29
    27fc:	f0 0d       	add	r31, r0
    27fe:	11 24       	eor	r1, r1
    2800:	e1 5c       	subi	r30, 0xC1	; 193
    2802:	f8 4d       	sbci	r31, 0xD8	; 216
    2804:	80 87       	std	Z+8, r24	; 0x08
    2806:	91 87       	std	Z+9, r25	; 0x09
    2808:	5f c0       	rjmp	.+190    	; 0x28c8 <ir_receive+0x250>
    280a:	89 e3       	ldi	r24, 0x39	; 57
    280c:	8c 9f       	mul	r24, r28
    280e:	f0 01       	movw	r30, r0
    2810:	8d 9f       	mul	r24, r29
    2812:	f0 0d       	add	r31, r0
    2814:	11 24       	eor	r1, r1
    2816:	e1 5c       	subi	r30, 0xC1	; 193
    2818:	f8 4d       	sbci	r31, 0xD8	; 216
    281a:	80 85       	ldd	r24, Z+8	; 0x08
    281c:	91 85       	ldd	r25, Z+9	; 0x09
    281e:	90 2b       	or	r25, r16
    2820:	80 87       	std	Z+8, r24	; 0x08
    2822:	91 87       	std	Z+9, r25	; 0x09
    2824:	20 85       	ldd	r18, Z+8	; 0x08
    2826:	31 85       	ldd	r19, Z+9	; 0x09
    2828:	84 85       	ldd	r24, Z+12	; 0x0c
    282a:	95 85       	ldd	r25, Z+13	; 0x0d
    282c:	82 27       	eor	r24, r18
    282e:	28 2f       	mov	r18, r24
    2830:	22 95       	swap	r18
    2832:	28 27       	eor	r18, r24
    2834:	02 2e       	mov	r0, r18
    2836:	26 95       	lsr	r18
    2838:	26 95       	lsr	r18
    283a:	20 25       	eor	r18, r0
    283c:	02 2e       	mov	r0, r18
    283e:	26 95       	lsr	r18
    2840:	20 25       	eor	r18, r0
    2842:	27 70       	andi	r18, 0x07	; 7
    2844:	08 2e       	mov	r0, r24
    2846:	89 2f       	mov	r24, r25
    2848:	26 95       	lsr	r18
    284a:	07 94       	ror	r0
    284c:	27 95       	ror	r18
    284e:	90 2d       	mov	r25, r0
    2850:	82 27       	eor	r24, r18
    2852:	06 94       	lsr	r0
    2854:	27 95       	ror	r18
    2856:	90 25       	eor	r25, r0
    2858:	82 27       	eor	r24, r18
    285a:	84 87       	std	Z+12, r24	; 0x0c
    285c:	95 87       	std	Z+13, r25	; 0x0d
    285e:	34 c0       	rjmp	.+104    	; 0x28c8 <ir_receive+0x250>
    2860:	89 e3       	ldi	r24, 0x39	; 57
    2862:	8c 9f       	mul	r24, r28
    2864:	f0 01       	movw	r30, r0
    2866:	8d 9f       	mul	r24, r29
    2868:	f0 0d       	add	r31, r0
    286a:	11 24       	eor	r1, r1
    286c:	e1 5c       	subi	r30, 0xC1	; 193
    286e:	f8 4d       	sbci	r31, 0xD8	; 216
    2870:	07 ab       	std	Z+55, r16	; 0x37
    2872:	2a c0       	rjmp	.+84     	; 0x28c8 <ir_receive+0x250>
    2874:	89 e3       	ldi	r24, 0x39	; 57
    2876:	8c 9f       	mul	r24, r28
    2878:	f0 01       	movw	r30, r0
    287a:	8d 9f       	mul	r24, r29
    287c:	f0 0d       	add	r31, r0
    287e:	11 24       	eor	r1, r1
    2880:	e1 5c       	subi	r30, 0xC1	; 193
    2882:	f8 4d       	sbci	r31, 0xD8	; 216
    2884:	a2 85       	ldd	r26, Z+10	; 0x0a
    2886:	b3 85       	ldd	r27, Z+11	; 0x0b
    2888:	18 97       	sbiw	r26, 0x08	; 8
    288a:	ae 0f       	add	r26, r30
    288c:	bf 1f       	adc	r27, r31
    288e:	1e 96       	adiw	r26, 0x0e	; 14
    2890:	0c 93       	st	X, r16
    2892:	84 85       	ldd	r24, Z+12	; 0x0c
    2894:	95 85       	ldd	r25, Z+13	; 0x0d
    2896:	80 27       	eor	r24, r16
    2898:	08 2f       	mov	r16, r24
    289a:	02 95       	swap	r16
    289c:	08 27       	eor	r16, r24
    289e:	00 2e       	mov	r0, r16
    28a0:	06 95       	lsr	r16
    28a2:	06 95       	lsr	r16
    28a4:	00 25       	eor	r16, r0
    28a6:	00 2e       	mov	r0, r16
    28a8:	06 95       	lsr	r16
    28aa:	00 25       	eor	r16, r0
    28ac:	07 70       	andi	r16, 0x07	; 7
    28ae:	08 2e       	mov	r0, r24
    28b0:	89 2f       	mov	r24, r25
    28b2:	06 95       	lsr	r16
    28b4:	07 94       	ror	r0
    28b6:	07 95       	ror	r16
    28b8:	90 2d       	mov	r25, r0
    28ba:	80 27       	eor	r24, r16
    28bc:	06 94       	lsr	r0
    28be:	07 95       	ror	r16
    28c0:	90 25       	eor	r25, r0
    28c2:	80 27       	eor	r24, r16
    28c4:	84 87       	std	Z+12, r24	; 0x0c
    28c6:	95 87       	std	Z+13, r25	; 0x0d
    28c8:	89 e3       	ldi	r24, 0x39	; 57
    28ca:	8c 9f       	mul	r24, r28
    28cc:	f0 01       	movw	r30, r0
    28ce:	8d 9f       	mul	r24, r29
    28d0:	f0 0d       	add	r31, r0
    28d2:	11 24       	eor	r1, r1
    28d4:	e1 5c       	subi	r30, 0xC1	; 193
    28d6:	f8 4d       	sbci	r31, 0xD8	; 216
    28d8:	82 85       	ldd	r24, Z+10	; 0x0a
    28da:	93 85       	ldd	r25, Z+11	; 0x0b
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	82 87       	std	Z+10, r24	; 0x0a
    28e0:	93 87       	std	Z+11, r25	; 0x0b
    28e2:	82 85       	ldd	r24, Z+10	; 0x0a
    28e4:	93 85       	ldd	r25, Z+11	; 0x0b
    28e6:	26 a9       	ldd	r18, Z+54	; 0x36
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	28 5f       	subi	r18, 0xF8	; 248
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	82 17       	cp	r24, r18
    28f0:	93 07       	cpc	r25, r19
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <ir_receive+0x27e>
    28f4:	c9 c0       	rjmp	.+402    	; 0x2a88 <ir_receive+0x410>
    28f6:	89 e3       	ldi	r24, 0x39	; 57
    28f8:	8c 9f       	mul	r24, r28
    28fa:	f0 01       	movw	r30, r0
    28fc:	8d 9f       	mul	r24, r29
    28fe:	f0 0d       	add	r31, r0
    2900:	11 24       	eor	r1, r1
    2902:	e1 5c       	subi	r30, 0xC1	; 193
    2904:	f8 4d       	sbci	r31, 0xD8	; 216
    2906:	44 85       	ldd	r20, Z+12	; 0x0c
    2908:	55 85       	ldd	r21, Z+13	; 0x0d
    290a:	24 81       	ldd	r18, Z+4	; 0x04
    290c:	35 81       	ldd	r19, Z+5	; 0x05
    290e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2910:	b5 85       	ldd	r27, Z+13	; 0x0d
    2912:	e6 80       	ldd	r14, Z+6	; 0x06
    2914:	f7 80       	ldd	r15, Z+7	; 0x07
    2916:	60 91 b0 23 	lds	r22, 0x23B0
    291a:	70 91 b1 23 	lds	r23, 0x23B1
    291e:	80 ad       	ldd	r24, Z+56	; 0x38
    2920:	86 fb       	bst	r24, 6
    2922:	88 27       	eor	r24, r24
    2924:	80 f9       	bld	r24, 0
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	89 27       	eor	r24, r25
    292a:	61 f1       	breq	.+88     	; 0x2984 <ir_receive+0x30c>
    292c:	99 e3       	ldi	r25, 0x39	; 57
    292e:	9c 9f       	mul	r25, r28
    2930:	f0 01       	movw	r30, r0
    2932:	9d 9f       	mul	r25, r29
    2934:	f0 0d       	add	r31, r0
    2936:	11 24       	eor	r1, r1
    2938:	e1 5c       	subi	r30, 0xC1	; 193
    293a:	f8 4d       	sbci	r31, 0xD8	; 216
    293c:	00 84       	ldd	r0, Z+8	; 0x08
    293e:	f1 85       	ldd	r31, Z+9	; 0x09
    2940:	e0 2d       	mov	r30, r0
    2942:	ef 2b       	or	r30, r31
    2944:	79 f0       	breq	.+30     	; 0x2964 <ir_receive+0x2ec>
    2946:	9c 9f       	mul	r25, r28
    2948:	f0 01       	movw	r30, r0
    294a:	9d 9f       	mul	r25, r29
    294c:	f0 0d       	add	r31, r0
    294e:	11 24       	eor	r1, r1
    2950:	e1 5c       	subi	r30, 0xC1	; 193
    2952:	f8 4d       	sbci	r31, 0xD8	; 216
    2954:	00 84       	ldd	r0, Z+8	; 0x08
    2956:	f1 85       	ldd	r31, Z+9	; 0x09
    2958:	e0 2d       	mov	r30, r0
    295a:	e6 17       	cp	r30, r22
    295c:	f7 07       	cpc	r31, r23
    295e:	21 f4       	brne	.+8      	; 0x2968 <ir_receive+0x2f0>
    2960:	00 e0       	ldi	r16, 0x00	; 0
    2962:	03 c0       	rjmp	.+6      	; 0x296a <ir_receive+0x2f2>
    2964:	00 e0       	ldi	r16, 0x00	; 0
    2966:	01 c0       	rjmp	.+2      	; 0x296a <ir_receive+0x2f2>
    2968:	01 e0       	ldi	r16, 0x01	; 1
    296a:	99 e3       	ldi	r25, 0x39	; 57
    296c:	9c 9f       	mul	r25, r28
    296e:	f0 01       	movw	r30, r0
    2970:	9d 9f       	mul	r25, r29
    2972:	f0 0d       	add	r31, r0
    2974:	11 24       	eor	r1, r1
    2976:	e1 5c       	subi	r30, 0xC1	; 193
    2978:	f8 4d       	sbci	r31, 0xD8	; 216
    297a:	97 a9       	ldd	r25, Z+55	; 0x37
    297c:	98 7f       	andi	r25, 0xF8	; 248
    297e:	98 3f       	cpi	r25, 0xF8	; 248
    2980:	21 f4       	brne	.+8      	; 0x298a <ir_receive+0x312>
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <ir_receive+0x30e>
    2984:	00 e0       	ldi	r16, 0x00	; 0
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	01 c0       	rjmp	.+2      	; 0x298c <ir_receive+0x314>
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	42 17       	cp	r20, r18
    298e:	53 07       	cpc	r21, r19
    2990:	09 f0       	breq	.+2      	; 0x2994 <ir_receive+0x31c>
    2992:	69 c0       	rjmp	.+210    	; 0x2a66 <ir_receive+0x3ee>
    2994:	ab 2b       	or	r26, r27
    2996:	09 f4       	brne	.+2      	; 0x299a <ir_receive+0x322>
    2998:	66 c0       	rjmp	.+204    	; 0x2a66 <ir_receive+0x3ee>
    299a:	e6 16       	cp	r14, r22
    299c:	f7 06       	cpc	r15, r23
    299e:	09 f4       	brne	.+2      	; 0x29a2 <ir_receive+0x32a>
    29a0:	62 c0       	rjmp	.+196    	; 0x2a66 <ir_receive+0x3ee>
    29a2:	01 11       	cpse	r16, r1
    29a4:	60 c0       	rjmp	.+192    	; 0x2a66 <ir_receive+0x3ee>
    29a6:	91 11       	cpse	r25, r1
    29a8:	5e c0       	rjmp	.+188    	; 0x2a66 <ir_receive+0x3ee>
    29aa:	88 23       	and	r24, r24
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <ir_receive+0x338>
    29ae:	5f c0       	rjmp	.+190    	; 0x2a6e <ir_receive+0x3f6>
    29b0:	89 e3       	ldi	r24, 0x39	; 57
    29b2:	8c 9f       	mul	r24, r28
    29b4:	f0 01       	movw	r30, r0
    29b6:	8d 9f       	mul	r24, r29
    29b8:	f0 0d       	add	r31, r0
    29ba:	11 24       	eor	r1, r1
    29bc:	e1 5c       	subi	r30, 0xC1	; 193
    29be:	f8 4d       	sbci	r31, 0xD8	; 216
    29c0:	87 a9       	ldd	r24, Z+55	; 0x37
    29c2:	87 70       	andi	r24, 0x07	; 7
    29c4:	87 ab       	std	Z+55, r24	; 0x37
    29c6:	80 ad       	ldd	r24, Z+56	; 0x38
    29c8:	88 23       	and	r24, r24
    29ca:	94 f5       	brge	.+100    	; 0x2a30 <ir_receive+0x3b8>
    29cc:	81 2f       	mov	r24, r17
    29ce:	0e 94 c8 11 	call	0x2390	; 0x2390 <received_ir_cmd>
    29d2:	5a c0       	rjmp	.+180    	; 0x2a88 <ir_receive+0x410>
    29d4:	89 e3       	ldi	r24, 0x39	; 57
    29d6:	8c 9f       	mul	r24, r28
    29d8:	f0 01       	movw	r30, r0
    29da:	8d 9f       	mul	r24, r29
    29dc:	f0 0d       	add	r31, r0
    29de:	11 24       	eor	r1, r1
    29e0:	e1 5c       	subi	r30, 0xC1	; 193
    29e2:	f8 4d       	sbci	r31, 0xD8	; 216
    29e4:	86 a9       	ldd	r24, Z+54	; 0x36
    29e6:	88 23       	and	r24, r24
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <ir_receive+0x378>
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	79 f0       	breq	.+30     	; 0x2a0c <ir_receive+0x394>
    29ee:	4c c0       	rjmp	.+152    	; 0x2a88 <ir_receive+0x410>
    29f0:	89 e3       	ldi	r24, 0x39	; 57
    29f2:	8c 9f       	mul	r24, r28
    29f4:	f0 01       	movw	r30, r0
    29f6:	8d 9f       	mul	r24, r29
    29f8:	f0 0d       	add	r31, r0
    29fa:	11 24       	eor	r1, r1
    29fc:	e1 5c       	subi	r30, 0xC1	; 193
    29fe:	f8 4d       	sbci	r31, 0xD8	; 216
    2a00:	66 81       	ldd	r22, Z+6	; 0x06
    2a02:	77 81       	ldd	r23, Z+7	; 0x07
    2a04:	87 a9       	ldd	r24, Z+55	; 0x37
    2a06:	0e 94 25 12 	call	0x244a	; 0x244a <received_ir_sync>
    2a0a:	3e c0       	rjmp	.+124    	; 0x2a88 <ir_receive+0x410>
    2a0c:	89 e3       	ldi	r24, 0x39	; 57
    2a0e:	8c 9f       	mul	r24, r28
    2a10:	f0 01       	movw	r30, r0
    2a12:	8d 9f       	mul	r24, r29
    2a14:	f0 0d       	add	r31, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	e1 5c       	subi	r30, 0xC1	; 193
    2a1a:	f8 4d       	sbci	r31, 0xD8	; 216
    2a1c:	20 81       	ld	r18, Z
    2a1e:	31 81       	ldd	r19, Z+1	; 0x01
    2a20:	42 81       	ldd	r20, Z+2	; 0x02
    2a22:	53 81       	ldd	r21, Z+3	; 0x03
    2a24:	66 81       	ldd	r22, Z+6	; 0x06
    2a26:	77 81       	ldd	r23, Z+7	; 0x07
    2a28:	87 a9       	ldd	r24, Z+55	; 0x37
    2a2a:	0e 94 b6 12 	call	0x256c	; 0x256c <received_rnb_r>
    2a2e:	2c c0       	rjmp	.+88     	; 0x2a88 <ir_receive+0x410>
    2a30:	9f b7       	in	r25, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	89 e3       	ldi	r24, 0x39	; 57
    2a36:	8c 9f       	mul	r24, r28
    2a38:	f0 01       	movw	r30, r0
    2a3a:	8d 9f       	mul	r24, r29
    2a3c:	f0 0d       	add	r31, r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	e1 5c       	subi	r30, 0xC1	; 193
    2a42:	f8 4d       	sbci	r31, 0xD8	; 216
    2a44:	80 ad       	ldd	r24, Z+56	; 0x38
    2a46:	82 60       	ori	r24, 0x02	; 2
    2a48:	80 af       	std	Z+56, r24	; 0x38
    2a4a:	80 ad       	ldd	r24, Z+56	; 0x38
    2a4c:	81 60       	ori	r24, 0x01	; 1
    2a4e:	80 af       	std	Z+56, r24	; 0x38
    2a50:	cc 0f       	add	r28, r28
    2a52:	dd 1f       	adc	r29, r29
    2a54:	cc 5d       	subi	r28, 0xDC	; 220
    2a56:	df 4d       	sbci	r29, 0xDF	; 223
    2a58:	e8 81       	ld	r30, Y
    2a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a5c:	84 81       	ldd	r24, Z+4	; 0x04
    2a5e:	8f 7e       	andi	r24, 0xEF	; 239
    2a60:	84 83       	std	Z+4, r24	; 0x04
    2a62:	9f bf       	out	0x3f, r25	; 63
    2a64:	11 c0       	rjmp	.+34     	; 0x2a88 <ir_receive+0x410>
    2a66:	81 2f       	mov	r24, r17
    2a68:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    2a6c:	0d c0       	rjmp	.+26     	; 0x2a88 <ir_receive+0x410>
    2a6e:	89 e3       	ldi	r24, 0x39	; 57
    2a70:	8c 9f       	mul	r24, r28
    2a72:	f0 01       	movw	r30, r0
    2a74:	8d 9f       	mul	r24, r29
    2a76:	f0 0d       	add	r31, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	e1 5c       	subi	r30, 0xC1	; 193
    2a7c:	f8 4d       	sbci	r31, 0xD8	; 216
    2a7e:	80 ad       	ldd	r24, Z+56	; 0x38
    2a80:	88 23       	and	r24, r24
    2a82:	0c f4       	brge	.+2      	; 0x2a86 <ir_receive+0x40e>
    2a84:	a7 cf       	rjmp	.-178    	; 0x29d4 <ir_receive+0x35c>
    2a86:	d4 cf       	rjmp	.-88     	; 0x2a30 <ir_receive+0x3b8>
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	08 95       	ret

00002a9a <ir_transmit>:
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	18 2f       	mov	r17, r24
    2aa2:	c8 2f       	mov	r28, r24
    2aa4:	d0 e0       	ldi	r29, 0x00	; 0
    2aa6:	89 e3       	ldi	r24, 0x39	; 57
    2aa8:	18 9f       	mul	r17, r24
    2aaa:	f0 01       	movw	r30, r0
    2aac:	11 24       	eor	r1, r1
    2aae:	e1 5c       	subi	r30, 0xC1	; 193
    2ab0:	f8 4d       	sbci	r31, 0xD8	; 216
    2ab2:	02 84       	ldd	r0, Z+10	; 0x0a
    2ab4:	f3 85       	ldd	r31, Z+11	; 0x0b
    2ab6:	e0 2d       	mov	r30, r0
    2ab8:	e8 30       	cpi	r30, 0x08	; 8
    2aba:	f1 05       	cpc	r31, r1
    2abc:	08 f0       	brcs	.+2      	; 0x2ac0 <ir_transmit+0x26>
    2abe:	97 c0       	rjmp	.+302    	; 0x2bee <ir_transmit+0x154>
    2ac0:	88 27       	eor	r24, r24
    2ac2:	ea 5f       	subi	r30, 0xFA	; 250
    2ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac8:	0c 94 56 50 	jmp	0xa0ac	; 0xa0ac <__tablejump2__>
    2acc:	89 e3       	ldi	r24, 0x39	; 57
    2ace:	8c 9f       	mul	r24, r28
    2ad0:	f0 01       	movw	r30, r0
    2ad2:	8d 9f       	mul	r24, r29
    2ad4:	f0 0d       	add	r31, r0
    2ad6:	11 24       	eor	r1, r1
    2ad8:	e1 5c       	subi	r30, 0xC1	; 193
    2ada:	f8 4d       	sbci	r31, 0xD8	; 216
    2adc:	86 81       	ldd	r24, Z+6	; 0x06
    2ade:	97 81       	ldd	r25, Z+7	; 0x07
    2ae0:	80 93 dd 2c 	sts	0x2CDD, r24
    2ae4:	94 c0       	rjmp	.+296    	; 0x2c0e <ir_transmit+0x174>
    2ae6:	89 e3       	ldi	r24, 0x39	; 57
    2ae8:	8c 9f       	mul	r24, r28
    2aea:	f0 01       	movw	r30, r0
    2aec:	8d 9f       	mul	r24, r29
    2aee:	f0 0d       	add	r31, r0
    2af0:	11 24       	eor	r1, r1
    2af2:	e1 5c       	subi	r30, 0xC1	; 193
    2af4:	f8 4d       	sbci	r31, 0xD8	; 216
    2af6:	86 81       	ldd	r24, Z+6	; 0x06
    2af8:	97 81       	ldd	r25, Z+7	; 0x07
    2afa:	90 93 dd 2c 	sts	0x2CDD, r25
    2afe:	87 c0       	rjmp	.+270    	; 0x2c0e <ir_transmit+0x174>
    2b00:	89 e3       	ldi	r24, 0x39	; 57
    2b02:	8c 9f       	mul	r24, r28
    2b04:	f0 01       	movw	r30, r0
    2b06:	8d 9f       	mul	r24, r29
    2b08:	f0 0d       	add	r31, r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	e1 5c       	subi	r30, 0xC1	; 193
    2b0e:	f8 4d       	sbci	r31, 0xD8	; 216
    2b10:	84 81       	ldd	r24, Z+4	; 0x04
    2b12:	95 81       	ldd	r25, Z+5	; 0x05
    2b14:	80 93 dd 2c 	sts	0x2CDD, r24
    2b18:	7a c0       	rjmp	.+244    	; 0x2c0e <ir_transmit+0x174>
    2b1a:	89 e3       	ldi	r24, 0x39	; 57
    2b1c:	8c 9f       	mul	r24, r28
    2b1e:	f0 01       	movw	r30, r0
    2b20:	8d 9f       	mul	r24, r29
    2b22:	f0 0d       	add	r31, r0
    2b24:	11 24       	eor	r1, r1
    2b26:	e1 5c       	subi	r30, 0xC1	; 193
    2b28:	f8 4d       	sbci	r31, 0xD8	; 216
    2b2a:	84 81       	ldd	r24, Z+4	; 0x04
    2b2c:	95 81       	ldd	r25, Z+5	; 0x05
    2b2e:	90 93 dd 2c 	sts	0x2CDD, r25
    2b32:	6d c0       	rjmp	.+218    	; 0x2c0e <ir_transmit+0x174>
    2b34:	89 e3       	ldi	r24, 0x39	; 57
    2b36:	8c 9f       	mul	r24, r28
    2b38:	f0 01       	movw	r30, r0
    2b3a:	8d 9f       	mul	r24, r29
    2b3c:	f0 0d       	add	r31, r0
    2b3e:	11 24       	eor	r1, r1
    2b40:	e1 5c       	subi	r30, 0xC1	; 193
    2b42:	f8 4d       	sbci	r31, 0xD8	; 216
    2b44:	86 a9       	ldd	r24, Z+54	; 0x36
    2b46:	8f 73       	andi	r24, 0x3F	; 63
    2b48:	80 93 dd 2c 	sts	0x2CDD, r24
    2b4c:	80 ad       	ldd	r24, Z+56	; 0x38
    2b4e:	90 91 dd 2c 	lds	r25, 0x2CDD
    2b52:	80 78       	andi	r24, 0x80	; 128
    2b54:	89 2b       	or	r24, r25
    2b56:	80 93 dd 2c 	sts	0x2CDD, r24
    2b5a:	80 ad       	ldd	r24, Z+56	; 0x38
    2b5c:	90 91 dd 2c 	lds	r25, 0x2CDD
    2b60:	80 74       	andi	r24, 0x40	; 64
    2b62:	89 2b       	or	r24, r25
    2b64:	80 93 dd 2c 	sts	0x2CDD, r24
    2b68:	52 c0       	rjmp	.+164    	; 0x2c0e <ir_transmit+0x174>
    2b6a:	89 e3       	ldi	r24, 0x39	; 57
    2b6c:	8c 9f       	mul	r24, r28
    2b6e:	f0 01       	movw	r30, r0
    2b70:	8d 9f       	mul	r24, r29
    2b72:	f0 0d       	add	r31, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	e1 5c       	subi	r30, 0xC1	; 193
    2b78:	f8 4d       	sbci	r31, 0xD8	; 216
    2b7a:	80 85       	ldd	r24, Z+8	; 0x08
    2b7c:	91 85       	ldd	r25, Z+9	; 0x09
    2b7e:	80 93 dd 2c 	sts	0x2CDD, r24
    2b82:	45 c0       	rjmp	.+138    	; 0x2c0e <ir_transmit+0x174>
    2b84:	89 e3       	ldi	r24, 0x39	; 57
    2b86:	8c 9f       	mul	r24, r28
    2b88:	f0 01       	movw	r30, r0
    2b8a:	8d 9f       	mul	r24, r29
    2b8c:	f0 0d       	add	r31, r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	e1 5c       	subi	r30, 0xC1	; 193
    2b92:	f8 4d       	sbci	r31, 0xD8	; 216
    2b94:	80 85       	ldd	r24, Z+8	; 0x08
    2b96:	91 85       	ldd	r25, Z+9	; 0x09
    2b98:	90 93 dd 2c 	sts	0x2CDD, r25
    2b9c:	38 c0       	rjmp	.+112    	; 0x2c0e <ir_transmit+0x174>
    2b9e:	89 e3       	ldi	r24, 0x39	; 57
    2ba0:	8c 9f       	mul	r24, r28
    2ba2:	f0 01       	movw	r30, r0
    2ba4:	8d 9f       	mul	r24, r29
    2ba6:	f0 0d       	add	r31, r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	e1 5c       	subi	r30, 0xC1	; 193
    2bac:	f8 4d       	sbci	r31, 0xD8	; 216
    2bae:	80 ad       	ldd	r24, Z+56	; 0x38
    2bb0:	86 fd       	sbrc	r24, 6
    2bb2:	05 c0       	rjmp	.+10     	; 0x2bbe <ir_transmit+0x124>
    2bb4:	81 2f       	mov	r24, r17
    2bb6:	88 6f       	ori	r24, 0xF8	; 248
    2bb8:	80 93 dd 2c 	sts	0x2CDD, r24
    2bbc:	28 c0       	rjmp	.+80     	; 0x2c0e <ir_transmit+0x174>
    2bbe:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    2bc2:	29 e3       	ldi	r18, 0x39	; 57
    2bc4:	2c 9f       	mul	r18, r28
    2bc6:	f0 01       	movw	r30, r0
    2bc8:	2d 9f       	mul	r18, r29
    2bca:	f0 0d       	add	r31, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	e1 5c       	subi	r30, 0xC1	; 193
    2bd0:	f8 4d       	sbci	r31, 0xD8	; 216
    2bd2:	20 85       	ldd	r18, Z+8	; 0x08
    2bd4:	31 85       	ldd	r19, Z+9	; 0x09
    2bd6:	62 1b       	sub	r22, r18
    2bd8:	73 0b       	sbc	r23, r19
    2bda:	6f 3f       	cpi	r22, 0xFF	; 255
    2bdc:	71 05       	cpc	r23, r1
    2bde:	18 f4       	brcc	.+6      	; 0x2be6 <ir_transmit+0x14c>
    2be0:	60 93 dd 2c 	sts	0x2CDD, r22
    2be4:	14 c0       	rjmp	.+40     	; 0x2c0e <ir_transmit+0x174>
    2be6:	8f ef       	ldi	r24, 0xFF	; 255
    2be8:	80 93 dd 2c 	sts	0x2CDD, r24
    2bec:	10 c0       	rjmp	.+32     	; 0x2c0e <ir_transmit+0x174>
    2bee:	89 e3       	ldi	r24, 0x39	; 57
    2bf0:	8c 9f       	mul	r24, r28
    2bf2:	f0 01       	movw	r30, r0
    2bf4:	8d 9f       	mul	r24, r29
    2bf6:	f0 0d       	add	r31, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	e1 5c       	subi	r30, 0xC1	; 193
    2bfc:	f8 4d       	sbci	r31, 0xD8	; 216
    2bfe:	82 85       	ldd	r24, Z+10	; 0x0a
    2c00:	93 85       	ldd	r25, Z+11	; 0x0b
    2c02:	08 97       	sbiw	r24, 0x08	; 8
    2c04:	e8 0f       	add	r30, r24
    2c06:	f9 1f       	adc	r31, r25
    2c08:	86 85       	ldd	r24, Z+14	; 0x0e
    2c0a:	80 93 dd 2c 	sts	0x2CDD, r24
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	ec 5d       	subi	r30, 0xDC	; 220
    2c16:	ff 4d       	sbci	r31, 0xDF	; 223
    2c18:	01 90       	ld	r0, Z+
    2c1a:	f0 81       	ld	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	80 91 dd 2c 	lds	r24, 0x2CDD
    2c22:	80 83       	st	Z, r24
    2c24:	89 e3       	ldi	r24, 0x39	; 57
    2c26:	8c 9f       	mul	r24, r28
    2c28:	f0 01       	movw	r30, r0
    2c2a:	8d 9f       	mul	r24, r29
    2c2c:	f0 0d       	add	r31, r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	e1 5c       	subi	r30, 0xC1	; 193
    2c32:	f8 4d       	sbci	r31, 0xD8	; 216
    2c34:	22 85       	ldd	r18, Z+10	; 0x0a
    2c36:	33 85       	ldd	r19, Z+11	; 0x0b
    2c38:	2f 5f       	subi	r18, 0xFF	; 255
    2c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3c:	22 87       	std	Z+10, r18	; 0x0a
    2c3e:	33 87       	std	Z+11, r19	; 0x0b
    2c40:	82 85       	ldd	r24, Z+10	; 0x0a
    2c42:	93 85       	ldd	r25, Z+11	; 0x0b
    2c44:	26 a9       	ldd	r18, Z+54	; 0x36
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	28 5f       	subi	r18, 0xF8	; 248
    2c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4c:	82 17       	cp	r24, r18
    2c4e:	93 07       	cpc	r25, r19
    2c50:	60 f0       	brcs	.+24     	; 0x2c6a <ir_transmit+0x1d0>
    2c52:	81 2f       	mov	r24, r17
    2c54:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <clear_ir_buffer>
    2c58:	cc 0f       	add	r28, r28
    2c5a:	dd 1f       	adc	r29, r29
    2c5c:	cc 5d       	subi	r28, 0xDC	; 220
    2c5e:	df 4d       	sbci	r29, 0xDF	; 223
    2c60:	e8 81       	ld	r30, Y
    2c62:	f9 81       	ldd	r31, Y+1	; 0x01
    2c64:	83 81       	ldd	r24, Z+3	; 0x03
    2c66:	8c 7f       	andi	r24, 0xFC	; 252
    2c68:	83 83       	std	Z+3, r24	; 0x03
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	08 95       	ret

00002c72 <ir_transmit_complete>:
    2c72:	5f b7       	in	r21, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	e0 e0       	ldi	r30, 0x00	; 0
    2c78:	fb e0       	ldi	r31, 0x0B	; 11
    2c7a:	41 81       	ldd	r20, Z+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	d9 01       	movw	r26, r18
    2c82:	aa 5f       	subi	r26, 0xFA	; 250
    2c84:	bf 4d       	sbci	r27, 0xDF	; 223
    2c86:	9c 91       	ld	r25, X
    2c88:	90 95       	com	r25
    2c8a:	94 23       	and	r25, r20
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	99 e3       	ldi	r25, 0x39	; 57
    2c90:	92 9f       	mul	r25, r18
    2c92:	f0 01       	movw	r30, r0
    2c94:	93 9f       	mul	r25, r19
    2c96:	f0 0d       	add	r31, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	e1 5c       	subi	r30, 0xC1	; 193
    2c9c:	f8 4d       	sbci	r31, 0xD8	; 216
    2c9e:	10 ae       	std	Z+56, r1	; 0x38
    2ca0:	16 aa       	std	Z+54, r1	; 0x36
    2ca2:	12 86       	std	Z+10, r1	; 0x0a
    2ca4:	13 86       	std	Z+11, r1	; 0x0b
    2ca6:	10 86       	std	Z+8, r1	; 0x08
    2ca8:	11 86       	std	Z+9, r1	; 0x09
    2caa:	16 82       	std	Z+6, r1	; 0x06
    2cac:	17 82       	std	Z+7, r1	; 0x07
    2cae:	22 0f       	add	r18, r18
    2cb0:	33 1f       	adc	r19, r19
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	ec 5d       	subi	r30, 0xDC	; 220
    2cb6:	ff 4d       	sbci	r31, 0xDF	; 223
    2cb8:	a0 81       	ld	r26, Z
    2cba:	b1 81       	ldd	r27, Z+1	; 0x01
    2cbc:	11 96       	adiw	r26, 0x01	; 1
    2cbe:	9c 91       	ld	r25, X
    2cc0:	11 97       	sbiw	r26, 0x01	; 1
    2cc2:	90 64       	ori	r25, 0x40	; 64
    2cc4:	11 96       	adiw	r26, 0x01	; 1
    2cc6:	9c 93       	st	X, r25
    2cc8:	01 90       	ld	r0, Z+
    2cca:	f0 81       	ld	r31, Z
    2ccc:	e0 2d       	mov	r30, r0
    2cce:	94 81       	ldd	r25, Z+4	; 0x04
    2cd0:	90 61       	ori	r25, 0x10	; 16
    2cd2:	94 83       	std	Z+4, r25	; 0x04
    2cd4:	40 91 ca 28 	lds	r20, 0x28CA
    2cd8:	21 e0       	ldi	r18, 0x01	; 1
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	b9 01       	movw	r22, r18
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <ir_transmit_complete+0x72>
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	8a 95       	dec	r24
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <ir_transmit_complete+0x6e>
    2ce8:	cb 01       	movw	r24, r22
    2cea:	80 95       	com	r24
    2cec:	84 23       	and	r24, r20
    2cee:	80 93 ca 28 	sts	0x28CA, r24
    2cf2:	5f bf       	out	0x3f, r21	; 63
    2cf4:	08 95       	ret

00002cf6 <ir_is_available>:
}

uint8_t ir_is_available(uint8_t dirs_mask){
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
    2cfc:	69 e3       	ldi	r22, 0x39	; 57
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
}

uint8_t ir_is_available(uint8_t dirs_mask){
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
    2cfe:	ac 01       	movw	r20, r24
    2d00:	02 2e       	mov	r0, r18
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <ir_is_available+0x12>
    2d04:	55 95       	asr	r21
    2d06:	47 95       	ror	r20
    2d08:	0a 94       	dec	r0
    2d0a:	e2 f7       	brpl	.-8      	; 0x2d04 <ir_is_available+0xe>
    2d0c:	40 ff       	sbrs	r20, 0
    2d0e:	0a c0       	rjmp	.+20     	; 0x2d24 <ir_is_available+0x2e>
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
    2d10:	62 9f       	mul	r22, r18
    2d12:	f0 01       	movw	r30, r0
    2d14:	63 9f       	mul	r22, r19
    2d16:	f0 0d       	add	r31, r0
    2d18:	11 24       	eor	r1, r1
    2d1a:	e1 5c       	subi	r30, 0xC1	; 193
    2d1c:	f8 4d       	sbci	r31, 0xD8	; 216
    2d1e:	40 ad       	ldd	r20, Z+56	; 0x38
    2d20:	45 fd       	sbrc	r20, 5
    2d22:	07 c0       	rjmp	.+14     	; 0x2d32 <ir_is_available+0x3c>
    2d24:	2f 5f       	subi	r18, 0xFF	; 255
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
void ir_reset_rx(uint8_t dir){
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
}

uint8_t ir_is_available(uint8_t dirs_mask){
	for(uint8_t dir=0; dir<6; dir++){
    2d28:	26 30       	cpi	r18, 0x06	; 6
    2d2a:	31 05       	cpc	r19, r1
    2d2c:	41 f7       	brne	.-48     	; 0x2cfe <ir_is_available+0x8>
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
            	return 0;
        	}
    	}
	}
    return 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	08 95       	ret

uint8_t ir_is_available(uint8_t dirs_mask){
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
            	return 0;
    2d32:	80 e0       	ldi	r24, 0x00	; 0
        	}
    	}
	}
    return 1;
}
    2d34:	08 95       	ret

00002d36 <ir_targeted_cmd>:
	send_msg(dirs_to_go, data, data_length, 0);
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
}

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	c8 2e       	mov	r12, r24
    2d4a:	7b 01       	movw	r14, r22
    2d4c:	d4 2e       	mov	r13, r20
    2d4e:	89 01       	movw	r16, r18
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    2d50:	80 91 ca 28 	lds	r24, 0x28CA
    2d54:	88 23       	and	r24, r24
    2d56:	31 f0       	breq	.+12     	; 0x2d64 <ir_targeted_cmd+0x2e>
		printf("Normal send blocked by hp.\r\n");
    2d58:	8c ed       	ldi	r24, 0xDC	; 220
    2d5a:	90 e2       	ldi	r25, 0x20	; 32
    2d5c:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
		return 0;
    2d60:	b1 2c       	mov	r11, r1
    2d62:	6b c0       	rjmp	.+214    	; 0x2e3a <ir_targeted_cmd+0x104>
	}
	if(!ir_is_available(dirs_to_go)){
    2d64:	8c 2d       	mov	r24, r12
    2d66:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ir_is_available>
    2d6a:	b8 2e       	mov	r11, r24
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	2a c0       	rjmp	.+84     	; 0x2dc4 <ir_targeted_cmd+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    2d70:	85 e8       	ldi	r24, 0x85	; 133
    2d72:	94 e0       	ldi	r25, 0x04	; 4
    2d74:	9f 93       	push	r25
    2d76:	8f 93       	push	r24
    2d78:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	dd 20       	and	r13, r13
    2d82:	b9 f0       	breq	.+46     	; 0x2db2 <ir_targeted_cmd+0x7c>
    2d84:	e7 01       	movw	r28, r14
    2d86:	da 94       	dec	r13
    2d88:	8d 2d       	mov	r24, r13
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	e8 0e       	add	r14, r24
    2d90:	f9 1e       	adc	r15, r25
			printf("%02hX ",data[i]);
    2d92:	08 ef       	ldi	r16, 0xF8	; 248
    2d94:	10 e2       	ldi	r17, 0x20	; 32
    2d96:	99 91       	ld	r25, Y+
    2d98:	1f 92       	push	r1
    2d9a:	9f 93       	push	r25
    2d9c:	1f 93       	push	r17
    2d9e:	0f 93       	push	r16
    2da0:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	ce 15       	cp	r28, r14
    2dae:	df 05       	cpc	r29, r15
    2db0:	91 f7       	brne	.-28     	; 0x2d96 <ir_targeted_cmd+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    2db2:	89 e4       	ldi	r24, 0x49	; 73
    2db4:	94 e0       	ldi	r25, 0x04	; 4
    2db6:	9f 93       	push	r25
    2db8:	8f 93       	push	r24
    2dba:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	3b c0       	rjmp	.+118    	; 0x2e3a <ir_targeted_cmd+0x104>
    2dc4:	c4 e2       	ldi	r28, 0x24	; 36
    2dc6:	d0 e2       	ldi	r29, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    2dc8:	e0 e0       	ldi	r30, 0x00	; 0
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    2dcc:	4c 2d       	mov	r20, r12
    2dce:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    2dd0:	79 e3       	ldi	r23, 0x39	; 57
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    2dd4:	9a 01       	movw	r18, r20
    2dd6:	0e 2e       	mov	r0, r30
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <ir_targeted_cmd+0xa8>
    2dda:	35 95       	asr	r19
    2ddc:	27 95       	ror	r18
    2dde:	0a 94       	dec	r0
    2de0:	e2 f7       	brpl	.-8      	; 0x2dda <ir_targeted_cmd+0xa4>
    2de2:	20 ff       	sbrs	r18, 0
    2de4:	1d c0       	rjmp	.+58     	; 0x2e20 <ir_targeted_cmd+0xea>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    2de6:	a8 81       	ld	r26, Y
    2de8:	b9 81       	ldd	r27, Y+1	; 0x01
    2dea:	14 96       	adiw	r26, 0x04	; 4
    2dec:	8c 91       	ld	r24, X
    2dee:	14 97       	sbiw	r26, 0x04	; 4
    2df0:	8f 7e       	andi	r24, 0xEF	; 239
    2df2:	14 96       	adiw	r26, 0x04	; 4
    2df4:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    2df6:	7e 9f       	mul	r23, r30
    2df8:	d0 01       	movw	r26, r0
    2dfa:	7f 9f       	mul	r23, r31
    2dfc:	b0 0d       	add	r27, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	a1 5c       	subi	r26, 0xC1	; 193
    2e02:	b8 4d       	sbci	r27, 0xD8	; 216
    2e04:	d8 96       	adiw	r26, 0x38	; 56
    2e06:	6c 93       	st	X, r22
    2e08:	d8 97       	sbiw	r26, 0x38	; 56
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    2e0a:	d8 96       	adiw	r26, 0x38	; 56
    2e0c:	9c 91       	ld	r25, X
    2e0e:	d8 97       	sbiw	r26, 0x38	; 56
    2e10:	90 68       	ori	r25, 0x80	; 128
    2e12:	d8 96       	adiw	r26, 0x38	; 56
    2e14:	9c 93       	st	X, r25
    2e16:	d8 97       	sbiw	r26, 0x38	; 56
			ir_rxtx[dir].target_ID=target;
    2e18:	18 96       	adiw	r26, 0x08	; 8
    2e1a:	0d 93       	st	X+, r16
    2e1c:	1c 93       	st	X, r17
    2e1e:	19 97       	sbiw	r26, 0x09	; 9
    2e20:	31 96       	adiw	r30, 0x01	; 1
    2e22:	22 96       	adiw	r28, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    2e24:	e6 30       	cpi	r30, 0x06	; 6
    2e26:	f1 05       	cpc	r31, r1
    2e28:	a9 f6       	brne	.-86     	; 0x2dd4 <ir_targeted_cmd+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	4d 2d       	mov	r20, r13
    2e2e:	b7 01       	movw	r22, r14
    2e30:	8c 2d       	mov	r24, r12
    2e32:	0e 94 2e 10 	call	0x205c	; 0x205c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    2e36:	bb 24       	eor	r11, r11
    2e38:	b3 94       	inc	r11
}

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
	return all_ir_sends(dirs, data, data_length, target, 1);
}
    2e3a:	8b 2d       	mov	r24, r11
    2e3c:	df 91       	pop	r29
    2e3e:	cf 91       	pop	r28
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
    2e4c:	bf 90       	pop	r11
    2e4e:	08 95       	ret

00002e50 <ir_cmd>:

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
    2e50:	cf 92       	push	r12
    2e52:	df 92       	push	r13
    2e54:	ef 92       	push	r14
    2e56:	ff 92       	push	r15
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	c8 2f       	mov	r28, r24
    2e62:	8b 01       	movw	r16, r22
    2e64:	f4 2e       	mov	r15, r20
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    2e66:	80 91 ca 28 	lds	r24, 0x28CA
    2e6a:	88 23       	and	r24, r24
    2e6c:	31 f0       	breq	.+12     	; 0x2e7a <ir_cmd+0x2a>
		printf("Normal send blocked by hp.\r\n");
    2e6e:	8c ed       	ldi	r24, 0xDC	; 220
    2e70:	90 e2       	ldi	r25, 0x20	; 32
    2e72:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
		return 0;
    2e76:	e1 2c       	mov	r14, r1
    2e78:	64 c0       	rjmp	.+200    	; 0x2f42 <ir_cmd+0xf2>
	}
	if(!ir_is_available(dirs_to_go)){
    2e7a:	8c 2f       	mov	r24, r28
    2e7c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ir_is_available>
    2e80:	e8 2e       	mov	r14, r24
    2e82:	81 11       	cpse	r24, r1
    2e84:	2c c0       	rjmp	.+88     	; 0x2ede <ir_cmd+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    2e86:	85 e8       	ldi	r24, 0x85	; 133
    2e88:	94 e0       	ldi	r25, 0x04	; 4
    2e8a:	9f 93       	push	r25
    2e8c:	8f 93       	push	r24
    2e8e:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	ff 20       	and	r15, r15
    2e98:	c9 f0       	breq	.+50     	; 0x2ecc <ir_cmd+0x7c>
    2e9a:	e8 01       	movw	r28, r16
    2e9c:	fa 94       	dec	r15
    2e9e:	cf 2c       	mov	r12, r15
    2ea0:	d1 2c       	mov	r13, r1
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    2ea4:	c8 1a       	sub	r12, r24
    2ea6:	d8 0a       	sbc	r13, r24
    2ea8:	c0 0e       	add	r12, r16
    2eaa:	d1 1e       	adc	r13, r17
			printf("%02hX ",data[i]);
    2eac:	08 ef       	ldi	r16, 0xF8	; 248
    2eae:	10 e2       	ldi	r17, 0x20	; 32
    2eb0:	99 91       	ld	r25, Y+
    2eb2:	1f 92       	push	r1
    2eb4:	9f 93       	push	r25
    2eb6:	1f 93       	push	r17
    2eb8:	0f 93       	push	r16
    2eba:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cc 15       	cp	r28, r12
    2ec8:	dd 05       	cpc	r29, r13
    2eca:	91 f7       	brne	.-28     	; 0x2eb0 <ir_cmd+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    2ecc:	89 e4       	ldi	r24, 0x49	; 73
    2ece:	94 e0       	ldi	r25, 0x04	; 4
    2ed0:	9f 93       	push	r25
    2ed2:	8f 93       	push	r24
    2ed4:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	32 c0       	rjmp	.+100    	; 0x2f42 <ir_cmd+0xf2>
    2ede:	a4 e2       	ldi	r26, 0x24	; 36
    2ee0:	b0 e2       	ldi	r27, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    2ee6:	4c 2f       	mov	r20, r28
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    2eea:	d9 e3       	ldi	r29, 0x39	; 57
    2eec:	81 e0       	ldi	r24, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    2eee:	ba 01       	movw	r22, r20
    2ef0:	02 2e       	mov	r0, r18
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <ir_cmd+0xa8>
    2ef4:	75 95       	asr	r23
    2ef6:	67 95       	ror	r22
    2ef8:	0a 94       	dec	r0
    2efa:	e2 f7       	brpl	.-8      	; 0x2ef4 <ir_cmd+0xa4>
    2efc:	60 ff       	sbrs	r22, 0
    2efe:	13 c0       	rjmp	.+38     	; 0x2f26 <ir_cmd+0xd6>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    2f00:	ed 91       	ld	r30, X+
    2f02:	fc 91       	ld	r31, X
    2f04:	11 97       	sbiw	r26, 0x01	; 1
    2f06:	94 81       	ldd	r25, Z+4	; 0x04
    2f08:	9f 7e       	andi	r25, 0xEF	; 239
    2f0a:	94 83       	std	Z+4, r25	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    2f0c:	d2 9f       	mul	r29, r18
    2f0e:	f0 01       	movw	r30, r0
    2f10:	d3 9f       	mul	r29, r19
    2f12:	f0 0d       	add	r31, r0
    2f14:	11 24       	eor	r1, r1
    2f16:	e1 5c       	subi	r30, 0xC1	; 193
    2f18:	f8 4d       	sbci	r31, 0xD8	; 216
    2f1a:	80 af       	std	Z+56, r24	; 0x38
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    2f1c:	90 ad       	ldd	r25, Z+56	; 0x38
    2f1e:	90 68       	ori	r25, 0x80	; 128
    2f20:	90 af       	std	Z+56, r25	; 0x38
			ir_rxtx[dir].target_ID=target;
    2f22:	10 86       	std	Z+8, r1	; 0x08
    2f24:	11 86       	std	Z+9, r1	; 0x09
    2f26:	2f 5f       	subi	r18, 0xFF	; 255
    2f28:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2a:	12 96       	adiw	r26, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    2f2c:	26 30       	cpi	r18, 0x06	; 6
    2f2e:	31 05       	cpc	r19, r1
    2f30:	f1 f6       	brne	.-68     	; 0x2eee <ir_cmd+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	4f 2d       	mov	r20, r15
    2f36:	b8 01       	movw	r22, r16
    2f38:	8c 2f       	mov	r24, r28
    2f3a:	0e 94 2e 10 	call	0x205c	; 0x205c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    2f3e:	ee 24       	eor	r14, r14
    2f40:	e3 94       	inc	r14
	return all_ir_sends(dirs, data, data_length, target, 1);
}

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
	return all_ir_sends(dirs, data, data_length, 0, 1);
}
    2f42:	8e 2d       	mov	r24, r14
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	cf 90       	pop	r12
    2f54:	08 95       	ret

00002f56 <ir_targeted_send>:

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
    2f56:	bf 92       	push	r11
    2f58:	cf 92       	push	r12
    2f5a:	df 92       	push	r13
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	c8 2e       	mov	r12, r24
    2f6a:	7b 01       	movw	r14, r22
    2f6c:	d4 2e       	mov	r13, r20
    2f6e:	89 01       	movw	r16, r18
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    2f70:	80 91 ca 28 	lds	r24, 0x28CA
    2f74:	88 23       	and	r24, r24
    2f76:	31 f0       	breq	.+12     	; 0x2f84 <ir_targeted_send+0x2e>
		printf("Normal send blocked by hp.\r\n");
    2f78:	8c ed       	ldi	r24, 0xDC	; 220
    2f7a:	90 e2       	ldi	r25, 0x20	; 32
    2f7c:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
		return 0;
    2f80:	b1 2c       	mov	r11, r1
    2f82:	5e c0       	rjmp	.+188    	; 0x3040 <ir_targeted_send+0xea>
	}
	if(!ir_is_available(dirs_to_go)){
    2f84:	8c 2d       	mov	r24, r12
    2f86:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ir_is_available>
    2f8a:	b8 2e       	mov	r11, r24
    2f8c:	81 11       	cpse	r24, r1
    2f8e:	2a c0       	rjmp	.+84     	; 0x2fe4 <ir_targeted_send+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    2f90:	85 e8       	ldi	r24, 0x85	; 133
    2f92:	94 e0       	ldi	r25, 0x04	; 4
    2f94:	9f 93       	push	r25
    2f96:	8f 93       	push	r24
    2f98:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	dd 20       	and	r13, r13
    2fa2:	b9 f0       	breq	.+46     	; 0x2fd2 <ir_targeted_send+0x7c>
    2fa4:	e7 01       	movw	r28, r14
    2fa6:	da 94       	dec	r13
    2fa8:	8d 2d       	mov	r24, r13
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	e8 0e       	add	r14, r24
    2fb0:	f9 1e       	adc	r15, r25
			printf("%02hX ",data[i]);
    2fb2:	08 ef       	ldi	r16, 0xF8	; 248
    2fb4:	10 e2       	ldi	r17, 0x20	; 32
    2fb6:	99 91       	ld	r25, Y+
    2fb8:	1f 92       	push	r1
    2fba:	9f 93       	push	r25
    2fbc:	1f 93       	push	r17
    2fbe:	0f 93       	push	r16
    2fc0:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	ce 15       	cp	r28, r14
    2fce:	df 05       	cpc	r29, r15
    2fd0:	91 f7       	brne	.-28     	; 0x2fb6 <ir_targeted_send+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    2fd2:	89 e4       	ldi	r24, 0x49	; 73
    2fd4:	94 e0       	ldi	r25, 0x04	; 4
    2fd6:	9f 93       	push	r25
    2fd8:	8f 93       	push	r24
    2fda:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	2e c0       	rjmp	.+92     	; 0x3040 <ir_targeted_send+0xea>
    2fe4:	a4 e2       	ldi	r26, 0x24	; 36
    2fe6:	b0 e2       	ldi	r27, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    2fe8:	e0 e0       	ldi	r30, 0x00	; 0
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    2fec:	4c 2d       	mov	r20, r12
    2fee:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    2ff0:	69 e3       	ldi	r22, 0x39	; 57
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    2ff4:	9a 01       	movw	r18, r20
    2ff6:	0e 2e       	mov	r0, r30
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <ir_targeted_send+0xa8>
    2ffa:	35 95       	asr	r19
    2ffc:	27 95       	ror	r18
    2ffe:	0a 94       	dec	r0
    3000:	e2 f7       	brpl	.-8      	; 0x2ffa <ir_targeted_send+0xa4>
    3002:	20 ff       	sbrs	r18, 0
    3004:	10 c0       	rjmp	.+32     	; 0x3026 <ir_targeted_send+0xd0>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    3006:	cd 91       	ld	r28, X+
    3008:	dc 91       	ld	r29, X
    300a:	11 97       	sbiw	r26, 0x01	; 1
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	9f 7e       	andi	r25, 0xEF	; 239
    3010:	9c 83       	std	Y+4, r25	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    3012:	6e 9f       	mul	r22, r30
    3014:	e0 01       	movw	r28, r0
    3016:	6f 9f       	mul	r22, r31
    3018:	d0 0d       	add	r29, r0
    301a:	11 24       	eor	r1, r1
    301c:	c1 5c       	subi	r28, 0xC1	; 193
    301e:	d8 4d       	sbci	r29, 0xD8	; 216
    3020:	88 af       	std	Y+56, r24	; 0x38
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    3022:	08 87       	std	Y+8, r16	; 0x08
    3024:	19 87       	std	Y+9, r17	; 0x09
    3026:	31 96       	adiw	r30, 0x01	; 1
    3028:	12 96       	adiw	r26, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    302a:	e6 30       	cpi	r30, 0x06	; 6
    302c:	f1 05       	cpc	r31, r1
    302e:	11 f7       	brne	.-60     	; 0x2ff4 <ir_targeted_send+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	4d 2d       	mov	r20, r13
    3034:	b7 01       	movw	r22, r14
    3036:	8c 2d       	mov	r24, r12
    3038:	0e 94 2e 10 	call	0x205c	; 0x205c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    303c:	bb 24       	eor	r11, r11
    303e:	b3 94       	inc	r11
	return all_ir_sends(dirs, data, data_length, 0, 1);
}

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
	return all_ir_sends(dirs, data, data_length, target, 0);
}
    3040:	8b 2d       	mov	r24, r11
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	1f 91       	pop	r17
    3048:	0f 91       	pop	r16
    304a:	ff 90       	pop	r15
    304c:	ef 90       	pop	r14
    304e:	df 90       	pop	r13
    3050:	cf 90       	pop	r12
    3052:	bf 90       	pop	r11
    3054:	08 95       	ret

00003056 <ir_send>:

uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
    3056:	cf 92       	push	r12
    3058:	df 92       	push	r13
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	c8 2f       	mov	r28, r24
    3068:	8b 01       	movw	r16, r22
    306a:	f4 2e       	mov	r15, r20
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    306c:	80 91 ca 28 	lds	r24, 0x28CA
    3070:	88 23       	and	r24, r24
    3072:	31 f0       	breq	.+12     	; 0x3080 <ir_send+0x2a>
		printf("Normal send blocked by hp.\r\n");
    3074:	8c ed       	ldi	r24, 0xDC	; 220
    3076:	90 e2       	ldi	r25, 0x20	; 32
    3078:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
		return 0;
    307c:	e1 2c       	mov	r14, r1
    307e:	67 c0       	rjmp	.+206    	; 0x314e <ir_send+0xf8>
	}
	if(!ir_is_available(dirs_to_go)){
    3080:	8c 2f       	mov	r24, r28
    3082:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ir_is_available>
    3086:	e8 2e       	mov	r14, r24
    3088:	81 11       	cpse	r24, r1
    308a:	2c c0       	rjmp	.+88     	; 0x30e4 <ir_send+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    308c:	85 e8       	ldi	r24, 0x85	; 133
    308e:	94 e0       	ldi	r25, 0x04	; 4
    3090:	9f 93       	push	r25
    3092:	8f 93       	push	r24
    3094:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	ff 20       	and	r15, r15
    309e:	c9 f0       	breq	.+50     	; 0x30d2 <ir_send+0x7c>
    30a0:	e8 01       	movw	r28, r16
    30a2:	fa 94       	dec	r15
    30a4:	cf 2c       	mov	r12, r15
    30a6:	d1 2c       	mov	r13, r1
    30a8:	8f ef       	ldi	r24, 0xFF	; 255
    30aa:	c8 1a       	sub	r12, r24
    30ac:	d8 0a       	sbc	r13, r24
    30ae:	c0 0e       	add	r12, r16
    30b0:	d1 1e       	adc	r13, r17
			printf("%02hX ",data[i]);
    30b2:	08 ef       	ldi	r16, 0xF8	; 248
    30b4:	10 e2       	ldi	r17, 0x20	; 32
    30b6:	99 91       	ld	r25, Y+
    30b8:	1f 92       	push	r1
    30ba:	9f 93       	push	r25
    30bc:	1f 93       	push	r17
    30be:	0f 93       	push	r16
    30c0:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cc 15       	cp	r28, r12
    30ce:	dd 05       	cpc	r29, r13
    30d0:	91 f7       	brne	.-28     	; 0x30b6 <ir_send+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    30d2:	89 e4       	ldi	r24, 0x49	; 73
    30d4:	94 e0       	ldi	r25, 0x04	; 4
    30d6:	9f 93       	push	r25
    30d8:	8f 93       	push	r24
    30da:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	35 c0       	rjmp	.+106    	; 0x314e <ir_send+0xf8>
    30e4:	e4 e2       	ldi	r30, 0x24	; 36
    30e6:	f0 e2       	ldi	r31, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    30ec:	4c 2f       	mov	r20, r28
    30ee:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    30f0:	d9 e3       	ldi	r29, 0x39	; 57
    30f2:	81 e0       	ldi	r24, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    30f4:	ba 01       	movw	r22, r20
    30f6:	02 2e       	mov	r0, r18
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <ir_send+0xa8>
    30fa:	75 95       	asr	r23
    30fc:	67 95       	ror	r22
    30fe:	0a 94       	dec	r0
    3100:	e2 f7       	brpl	.-8      	; 0x30fa <ir_send+0xa4>
    3102:	60 ff       	sbrs	r22, 0
    3104:	16 c0       	rjmp	.+44     	; 0x3132 <ir_send+0xdc>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    3106:	a0 81       	ld	r26, Z
    3108:	b1 81       	ldd	r27, Z+1	; 0x01
    310a:	14 96       	adiw	r26, 0x04	; 4
    310c:	9c 91       	ld	r25, X
    310e:	14 97       	sbiw	r26, 0x04	; 4
    3110:	9f 7e       	andi	r25, 0xEF	; 239
    3112:	14 96       	adiw	r26, 0x04	; 4
    3114:	9c 93       	st	X, r25
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    3116:	d2 9f       	mul	r29, r18
    3118:	d0 01       	movw	r26, r0
    311a:	d3 9f       	mul	r29, r19
    311c:	b0 0d       	add	r27, r0
    311e:	11 24       	eor	r1, r1
    3120:	a1 5c       	subi	r26, 0xC1	; 193
    3122:	b8 4d       	sbci	r27, 0xD8	; 216
    3124:	d8 96       	adiw	r26, 0x38	; 56
    3126:	8c 93       	st	X, r24
    3128:	d8 97       	sbiw	r26, 0x38	; 56
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    312a:	18 96       	adiw	r26, 0x08	; 8
    312c:	1d 92       	st	X+, r1
    312e:	1c 92       	st	X, r1
    3130:	19 97       	sbiw	r26, 0x09	; 9
    3132:	2f 5f       	subi	r18, 0xFF	; 255
    3134:	3f 4f       	sbci	r19, 0xFF	; 255
    3136:	32 96       	adiw	r30, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    3138:	26 30       	cpi	r18, 0x06	; 6
    313a:	31 05       	cpc	r19, r1
    313c:	d9 f6       	brne	.-74     	; 0x30f4 <ir_send+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	4f 2d       	mov	r20, r15
    3142:	b8 01       	movw	r22, r16
    3144:	8c 2f       	mov	r24, r28
    3146:	0e 94 2e 10 	call	0x205c	; 0x205c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    314a:	ee 24       	eor	r14, r14
    314c:	e3 94       	inc	r14
	return all_ir_sends(dirs, data, data_length, target, 0);
}

uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
	return all_ir_sends(dirs, data, data_length, 0, 0);
}
    314e:	8e 2d       	mov	r24, r14
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	1f 91       	pop	r17
    3156:	0f 91       	pop	r16
    3158:	ff 90       	pop	r15
    315a:	ef 90       	pop	r14
    315c:	df 90       	pop	r13
    315e:	cf 90       	pop	r12
    3160:	08 95       	ret

00003162 <__vector_25>:
	}
    return 1;
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    3162:	1f 92       	push	r1
    3164:	0f 92       	push	r0
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	0f 92       	push	r0
    316a:	11 24       	eor	r1, r1
    316c:	0b b6       	in	r0, 0x3b	; 59
    316e:	0f 92       	push	r0
    3170:	2f 93       	push	r18
    3172:	3f 93       	push	r19
    3174:	4f 93       	push	r20
    3176:	5f 93       	push	r21
    3178:	6f 93       	push	r22
    317a:	7f 93       	push	r23
    317c:	8f 93       	push	r24
    317e:	9f 93       	push	r25
    3180:	af 93       	push	r26
    3182:	bf 93       	push	r27
    3184:	ef 93       	push	r30
    3186:	ff 93       	push	r31
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	0e 94 3c 13 	call	0x2678	; 0x2678 <ir_receive>
    318e:	ff 91       	pop	r31
    3190:	ef 91       	pop	r30
    3192:	bf 91       	pop	r27
    3194:	af 91       	pop	r26
    3196:	9f 91       	pop	r25
    3198:	8f 91       	pop	r24
    319a:	7f 91       	pop	r23
    319c:	6f 91       	pop	r22
    319e:	5f 91       	pop	r21
    31a0:	4f 91       	pop	r20
    31a2:	3f 91       	pop	r19
    31a4:	2f 91       	pop	r18
    31a6:	0f 90       	pop	r0
    31a8:	0b be       	out	0x3b, r0	; 59
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    31b4:	1f 92       	push	r1
    31b6:	0f 92       	push	r0
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	0f 92       	push	r0
    31bc:	11 24       	eor	r1, r1
    31be:	0b b6       	in	r0, 0x3b	; 59
    31c0:	0f 92       	push	r0
    31c2:	2f 93       	push	r18
    31c4:	3f 93       	push	r19
    31c6:	4f 93       	push	r20
    31c8:	5f 93       	push	r21
    31ca:	6f 93       	push	r22
    31cc:	7f 93       	push	r23
    31ce:	8f 93       	push	r24
    31d0:	9f 93       	push	r25
    31d2:	af 93       	push	r26
    31d4:	bf 93       	push	r27
    31d6:	ef 93       	push	r30
    31d8:	ff 93       	push	r31
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ir_transmit_complete>
    31e0:	ff 91       	pop	r31
    31e2:	ef 91       	pop	r30
    31e4:	bf 91       	pop	r27
    31e6:	af 91       	pop	r26
    31e8:	9f 91       	pop	r25
    31ea:	8f 91       	pop	r24
    31ec:	7f 91       	pop	r23
    31ee:	6f 91       	pop	r22
    31f0:	5f 91       	pop	r21
    31f2:	4f 91       	pop	r20
    31f4:	3f 91       	pop	r19
    31f6:	2f 91       	pop	r18
    31f8:	0f 90       	pop	r0
    31fa:	0b be       	out	0x3b, r0	; 59
    31fc:	0f 90       	pop	r0
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	0f 90       	pop	r0
    3202:	1f 90       	pop	r1
    3204:	18 95       	reti

00003206 <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    3206:	1f 92       	push	r1
    3208:	0f 92       	push	r0
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	0f 92       	push	r0
    320e:	11 24       	eor	r1, r1
    3210:	0b b6       	in	r0, 0x3b	; 59
    3212:	0f 92       	push	r0
    3214:	2f 93       	push	r18
    3216:	3f 93       	push	r19
    3218:	4f 93       	push	r20
    321a:	5f 93       	push	r21
    321c:	6f 93       	push	r22
    321e:	7f 93       	push	r23
    3220:	8f 93       	push	r24
    3222:	9f 93       	push	r25
    3224:	af 93       	push	r26
    3226:	bf 93       	push	r27
    3228:	ef 93       	push	r30
    322a:	ff 93       	push	r31
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <ir_transmit>
    3232:	ff 91       	pop	r31
    3234:	ef 91       	pop	r30
    3236:	bf 91       	pop	r27
    3238:	af 91       	pop	r26
    323a:	9f 91       	pop	r25
    323c:	8f 91       	pop	r24
    323e:	7f 91       	pop	r23
    3240:	6f 91       	pop	r22
    3242:	5f 91       	pop	r21
    3244:	4f 91       	pop	r20
    3246:	3f 91       	pop	r19
    3248:	2f 91       	pop	r18
    324a:	0f 90       	pop	r0
    324c:	0b be       	out	0x3b, r0	; 59
    324e:	0f 90       	pop	r0
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	0f 90       	pop	r0
    3254:	1f 90       	pop	r1
    3256:	18 95       	reti

00003258 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    3258:	1f 92       	push	r1
    325a:	0f 92       	push	r0
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	0f 92       	push	r0
    3260:	11 24       	eor	r1, r1
    3262:	0b b6       	in	r0, 0x3b	; 59
    3264:	0f 92       	push	r0
    3266:	2f 93       	push	r18
    3268:	3f 93       	push	r19
    326a:	4f 93       	push	r20
    326c:	5f 93       	push	r21
    326e:	6f 93       	push	r22
    3270:	7f 93       	push	r23
    3272:	8f 93       	push	r24
    3274:	9f 93       	push	r25
    3276:	af 93       	push	r26
    3278:	bf 93       	push	r27
    327a:	ef 93       	push	r30
    327c:	ff 93       	push	r31
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	0e 94 3c 13 	call	0x2678	; 0x2678 <ir_receive>
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	bf 91       	pop	r27
    328a:	af 91       	pop	r26
    328c:	9f 91       	pop	r25
    328e:	8f 91       	pop	r24
    3290:	7f 91       	pop	r23
    3292:	6f 91       	pop	r22
    3294:	5f 91       	pop	r21
    3296:	4f 91       	pop	r20
    3298:	3f 91       	pop	r19
    329a:	2f 91       	pop	r18
    329c:	0f 90       	pop	r0
    329e:	0b be       	out	0x3b, r0	; 59
    32a0:	0f 90       	pop	r0
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	0f 90       	pop	r0
    32a6:	1f 90       	pop	r1
    32a8:	18 95       	reti

000032aa <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    32aa:	1f 92       	push	r1
    32ac:	0f 92       	push	r0
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	0f 92       	push	r0
    32b2:	11 24       	eor	r1, r1
    32b4:	0b b6       	in	r0, 0x3b	; 59
    32b6:	0f 92       	push	r0
    32b8:	2f 93       	push	r18
    32ba:	3f 93       	push	r19
    32bc:	4f 93       	push	r20
    32be:	5f 93       	push	r21
    32c0:	6f 93       	push	r22
    32c2:	7f 93       	push	r23
    32c4:	8f 93       	push	r24
    32c6:	9f 93       	push	r25
    32c8:	af 93       	push	r26
    32ca:	bf 93       	push	r27
    32cc:	ef 93       	push	r30
    32ce:	ff 93       	push	r31
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ir_transmit_complete>
    32d6:	ff 91       	pop	r31
    32d8:	ef 91       	pop	r30
    32da:	bf 91       	pop	r27
    32dc:	af 91       	pop	r26
    32de:	9f 91       	pop	r25
    32e0:	8f 91       	pop	r24
    32e2:	7f 91       	pop	r23
    32e4:	6f 91       	pop	r22
    32e6:	5f 91       	pop	r21
    32e8:	4f 91       	pop	r20
    32ea:	3f 91       	pop	r19
    32ec:	2f 91       	pop	r18
    32ee:	0f 90       	pop	r0
    32f0:	0b be       	out	0x3b, r0	; 59
    32f2:	0f 90       	pop	r0
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	0f 90       	pop	r0
    32f8:	1f 90       	pop	r1
    32fa:	18 95       	reti

000032fc <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    32fc:	1f 92       	push	r1
    32fe:	0f 92       	push	r0
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	0f 92       	push	r0
    3304:	11 24       	eor	r1, r1
    3306:	0b b6       	in	r0, 0x3b	; 59
    3308:	0f 92       	push	r0
    330a:	2f 93       	push	r18
    330c:	3f 93       	push	r19
    330e:	4f 93       	push	r20
    3310:	5f 93       	push	r21
    3312:	6f 93       	push	r22
    3314:	7f 93       	push	r23
    3316:	8f 93       	push	r24
    3318:	9f 93       	push	r25
    331a:	af 93       	push	r26
    331c:	bf 93       	push	r27
    331e:	ef 93       	push	r30
    3320:	ff 93       	push	r31
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <ir_transmit>
    3328:	ff 91       	pop	r31
    332a:	ef 91       	pop	r30
    332c:	bf 91       	pop	r27
    332e:	af 91       	pop	r26
    3330:	9f 91       	pop	r25
    3332:	8f 91       	pop	r24
    3334:	7f 91       	pop	r23
    3336:	6f 91       	pop	r22
    3338:	5f 91       	pop	r21
    333a:	4f 91       	pop	r20
    333c:	3f 91       	pop	r19
    333e:	2f 91       	pop	r18
    3340:	0f 90       	pop	r0
    3342:	0b be       	out	0x3b, r0	; 59
    3344:	0f 90       	pop	r0
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	0f 90       	pop	r0
    334a:	1f 90       	pop	r1
    334c:	18 95       	reti

0000334e <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    334e:	1f 92       	push	r1
    3350:	0f 92       	push	r0
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	0f 92       	push	r0
    3356:	11 24       	eor	r1, r1
    3358:	0b b6       	in	r0, 0x3b	; 59
    335a:	0f 92       	push	r0
    335c:	2f 93       	push	r18
    335e:	3f 93       	push	r19
    3360:	4f 93       	push	r20
    3362:	5f 93       	push	r21
    3364:	6f 93       	push	r22
    3366:	7f 93       	push	r23
    3368:	8f 93       	push	r24
    336a:	9f 93       	push	r25
    336c:	af 93       	push	r26
    336e:	bf 93       	push	r27
    3370:	ef 93       	push	r30
    3372:	ff 93       	push	r31
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	0e 94 3c 13 	call	0x2678	; 0x2678 <ir_receive>
    337a:	ff 91       	pop	r31
    337c:	ef 91       	pop	r30
    337e:	bf 91       	pop	r27
    3380:	af 91       	pop	r26
    3382:	9f 91       	pop	r25
    3384:	8f 91       	pop	r24
    3386:	7f 91       	pop	r23
    3388:	6f 91       	pop	r22
    338a:	5f 91       	pop	r21
    338c:	4f 91       	pop	r20
    338e:	3f 91       	pop	r19
    3390:	2f 91       	pop	r18
    3392:	0f 90       	pop	r0
    3394:	0b be       	out	0x3b, r0	; 59
    3396:	0f 90       	pop	r0
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	0f 90       	pop	r0
    339c:	1f 90       	pop	r1
    339e:	18 95       	reti

000033a0 <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    33a0:	1f 92       	push	r1
    33a2:	0f 92       	push	r0
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	0f 92       	push	r0
    33a8:	11 24       	eor	r1, r1
    33aa:	0b b6       	in	r0, 0x3b	; 59
    33ac:	0f 92       	push	r0
    33ae:	2f 93       	push	r18
    33b0:	3f 93       	push	r19
    33b2:	4f 93       	push	r20
    33b4:	5f 93       	push	r21
    33b6:	6f 93       	push	r22
    33b8:	7f 93       	push	r23
    33ba:	8f 93       	push	r24
    33bc:	9f 93       	push	r25
    33be:	af 93       	push	r26
    33c0:	bf 93       	push	r27
    33c2:	ef 93       	push	r30
    33c4:	ff 93       	push	r31
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ir_transmit_complete>
    33cc:	ff 91       	pop	r31
    33ce:	ef 91       	pop	r30
    33d0:	bf 91       	pop	r27
    33d2:	af 91       	pop	r26
    33d4:	9f 91       	pop	r25
    33d6:	8f 91       	pop	r24
    33d8:	7f 91       	pop	r23
    33da:	6f 91       	pop	r22
    33dc:	5f 91       	pop	r21
    33de:	4f 91       	pop	r20
    33e0:	3f 91       	pop	r19
    33e2:	2f 91       	pop	r18
    33e4:	0f 90       	pop	r0
    33e6:	0b be       	out	0x3b, r0	; 59
    33e8:	0f 90       	pop	r0
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	0f 90       	pop	r0
    33ee:	1f 90       	pop	r1
    33f0:	18 95       	reti

000033f2 <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    33f2:	1f 92       	push	r1
    33f4:	0f 92       	push	r0
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	0f 92       	push	r0
    33fa:	11 24       	eor	r1, r1
    33fc:	0b b6       	in	r0, 0x3b	; 59
    33fe:	0f 92       	push	r0
    3400:	2f 93       	push	r18
    3402:	3f 93       	push	r19
    3404:	4f 93       	push	r20
    3406:	5f 93       	push	r21
    3408:	6f 93       	push	r22
    340a:	7f 93       	push	r23
    340c:	8f 93       	push	r24
    340e:	9f 93       	push	r25
    3410:	af 93       	push	r26
    3412:	bf 93       	push	r27
    3414:	ef 93       	push	r30
    3416:	ff 93       	push	r31
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <ir_transmit>
    341e:	ff 91       	pop	r31
    3420:	ef 91       	pop	r30
    3422:	bf 91       	pop	r27
    3424:	af 91       	pop	r26
    3426:	9f 91       	pop	r25
    3428:	8f 91       	pop	r24
    342a:	7f 91       	pop	r23
    342c:	6f 91       	pop	r22
    342e:	5f 91       	pop	r21
    3430:	4f 91       	pop	r20
    3432:	3f 91       	pop	r19
    3434:	2f 91       	pop	r18
    3436:	0f 90       	pop	r0
    3438:	0b be       	out	0x3b, r0	; 59
    343a:	0f 90       	pop	r0
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	0f 90       	pop	r0
    3440:	1f 90       	pop	r1
    3442:	18 95       	reti

00003444 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    3444:	1f 92       	push	r1
    3446:	0f 92       	push	r0
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	0f 92       	push	r0
    344c:	11 24       	eor	r1, r1
    344e:	0b b6       	in	r0, 0x3b	; 59
    3450:	0f 92       	push	r0
    3452:	2f 93       	push	r18
    3454:	3f 93       	push	r19
    3456:	4f 93       	push	r20
    3458:	5f 93       	push	r21
    345a:	6f 93       	push	r22
    345c:	7f 93       	push	r23
    345e:	8f 93       	push	r24
    3460:	9f 93       	push	r25
    3462:	af 93       	push	r26
    3464:	bf 93       	push	r27
    3466:	ef 93       	push	r30
    3468:	ff 93       	push	r31
    346a:	83 e0       	ldi	r24, 0x03	; 3
    346c:	0e 94 3c 13 	call	0x2678	; 0x2678 <ir_receive>
    3470:	ff 91       	pop	r31
    3472:	ef 91       	pop	r30
    3474:	bf 91       	pop	r27
    3476:	af 91       	pop	r26
    3478:	9f 91       	pop	r25
    347a:	8f 91       	pop	r24
    347c:	7f 91       	pop	r23
    347e:	6f 91       	pop	r22
    3480:	5f 91       	pop	r21
    3482:	4f 91       	pop	r20
    3484:	3f 91       	pop	r19
    3486:	2f 91       	pop	r18
    3488:	0f 90       	pop	r0
    348a:	0b be       	out	0x3b, r0	; 59
    348c:	0f 90       	pop	r0
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	0f 90       	pop	r0
    3492:	1f 90       	pop	r1
    3494:	18 95       	reti

00003496 <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    3496:	1f 92       	push	r1
    3498:	0f 92       	push	r0
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	0f 92       	push	r0
    349e:	11 24       	eor	r1, r1
    34a0:	0b b6       	in	r0, 0x3b	; 59
    34a2:	0f 92       	push	r0
    34a4:	2f 93       	push	r18
    34a6:	3f 93       	push	r19
    34a8:	4f 93       	push	r20
    34aa:	5f 93       	push	r21
    34ac:	6f 93       	push	r22
    34ae:	7f 93       	push	r23
    34b0:	8f 93       	push	r24
    34b2:	9f 93       	push	r25
    34b4:	af 93       	push	r26
    34b6:	bf 93       	push	r27
    34b8:	ef 93       	push	r30
    34ba:	ff 93       	push	r31
    34bc:	83 e0       	ldi	r24, 0x03	; 3
    34be:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ir_transmit_complete>
    34c2:	ff 91       	pop	r31
    34c4:	ef 91       	pop	r30
    34c6:	bf 91       	pop	r27
    34c8:	af 91       	pop	r26
    34ca:	9f 91       	pop	r25
    34cc:	8f 91       	pop	r24
    34ce:	7f 91       	pop	r23
    34d0:	6f 91       	pop	r22
    34d2:	5f 91       	pop	r21
    34d4:	4f 91       	pop	r20
    34d6:	3f 91       	pop	r19
    34d8:	2f 91       	pop	r18
    34da:	0f 90       	pop	r0
    34dc:	0b be       	out	0x3b, r0	; 59
    34de:	0f 90       	pop	r0
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	0f 90       	pop	r0
    34e4:	1f 90       	pop	r1
    34e6:	18 95       	reti

000034e8 <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    34e8:	1f 92       	push	r1
    34ea:	0f 92       	push	r0
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	0f 92       	push	r0
    34f0:	11 24       	eor	r1, r1
    34f2:	0b b6       	in	r0, 0x3b	; 59
    34f4:	0f 92       	push	r0
    34f6:	2f 93       	push	r18
    34f8:	3f 93       	push	r19
    34fa:	4f 93       	push	r20
    34fc:	5f 93       	push	r21
    34fe:	6f 93       	push	r22
    3500:	7f 93       	push	r23
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	af 93       	push	r26
    3508:	bf 93       	push	r27
    350a:	ef 93       	push	r30
    350c:	ff 93       	push	r31
    350e:	83 e0       	ldi	r24, 0x03	; 3
    3510:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <ir_transmit>
    3514:	ff 91       	pop	r31
    3516:	ef 91       	pop	r30
    3518:	bf 91       	pop	r27
    351a:	af 91       	pop	r26
    351c:	9f 91       	pop	r25
    351e:	8f 91       	pop	r24
    3520:	7f 91       	pop	r23
    3522:	6f 91       	pop	r22
    3524:	5f 91       	pop	r21
    3526:	4f 91       	pop	r20
    3528:	3f 91       	pop	r19
    352a:	2f 91       	pop	r18
    352c:	0f 90       	pop	r0
    352e:	0b be       	out	0x3b, r0	; 59
    3530:	0f 90       	pop	r0
    3532:	0f be       	out	0x3f, r0	; 63
    3534:	0f 90       	pop	r0
    3536:	1f 90       	pop	r1
    3538:	18 95       	reti

0000353a <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    353a:	1f 92       	push	r1
    353c:	0f 92       	push	r0
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	0f 92       	push	r0
    3542:	11 24       	eor	r1, r1
    3544:	0b b6       	in	r0, 0x3b	; 59
    3546:	0f 92       	push	r0
    3548:	2f 93       	push	r18
    354a:	3f 93       	push	r19
    354c:	4f 93       	push	r20
    354e:	5f 93       	push	r21
    3550:	6f 93       	push	r22
    3552:	7f 93       	push	r23
    3554:	8f 93       	push	r24
    3556:	9f 93       	push	r25
    3558:	af 93       	push	r26
    355a:	bf 93       	push	r27
    355c:	ef 93       	push	r30
    355e:	ff 93       	push	r31
    3560:	84 e0       	ldi	r24, 0x04	; 4
    3562:	0e 94 3c 13 	call	0x2678	; 0x2678 <ir_receive>
    3566:	ff 91       	pop	r31
    3568:	ef 91       	pop	r30
    356a:	bf 91       	pop	r27
    356c:	af 91       	pop	r26
    356e:	9f 91       	pop	r25
    3570:	8f 91       	pop	r24
    3572:	7f 91       	pop	r23
    3574:	6f 91       	pop	r22
    3576:	5f 91       	pop	r21
    3578:	4f 91       	pop	r20
    357a:	3f 91       	pop	r19
    357c:	2f 91       	pop	r18
    357e:	0f 90       	pop	r0
    3580:	0b be       	out	0x3b, r0	; 59
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	0f 90       	pop	r0
    3588:	1f 90       	pop	r1
    358a:	18 95       	reti

0000358c <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    358c:	1f 92       	push	r1
    358e:	0f 92       	push	r0
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	0f 92       	push	r0
    3594:	11 24       	eor	r1, r1
    3596:	0b b6       	in	r0, 0x3b	; 59
    3598:	0f 92       	push	r0
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	4f 93       	push	r20
    35a0:	5f 93       	push	r21
    35a2:	6f 93       	push	r22
    35a4:	7f 93       	push	r23
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31
    35b2:	84 e0       	ldi	r24, 0x04	; 4
    35b4:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ir_transmit_complete>
    35b8:	ff 91       	pop	r31
    35ba:	ef 91       	pop	r30
    35bc:	bf 91       	pop	r27
    35be:	af 91       	pop	r26
    35c0:	9f 91       	pop	r25
    35c2:	8f 91       	pop	r24
    35c4:	7f 91       	pop	r23
    35c6:	6f 91       	pop	r22
    35c8:	5f 91       	pop	r21
    35ca:	4f 91       	pop	r20
    35cc:	3f 91       	pop	r19
    35ce:	2f 91       	pop	r18
    35d0:	0f 90       	pop	r0
    35d2:	0b be       	out	0x3b, r0	; 59
    35d4:	0f 90       	pop	r0
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	0f 90       	pop	r0
    35da:	1f 90       	pop	r1
    35dc:	18 95       	reti

000035de <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    35de:	1f 92       	push	r1
    35e0:	0f 92       	push	r0
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	0f 92       	push	r0
    35e6:	11 24       	eor	r1, r1
    35e8:	0b b6       	in	r0, 0x3b	; 59
    35ea:	0f 92       	push	r0
    35ec:	2f 93       	push	r18
    35ee:	3f 93       	push	r19
    35f0:	4f 93       	push	r20
    35f2:	5f 93       	push	r21
    35f4:	6f 93       	push	r22
    35f6:	7f 93       	push	r23
    35f8:	8f 93       	push	r24
    35fa:	9f 93       	push	r25
    35fc:	af 93       	push	r26
    35fe:	bf 93       	push	r27
    3600:	ef 93       	push	r30
    3602:	ff 93       	push	r31
    3604:	84 e0       	ldi	r24, 0x04	; 4
    3606:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <ir_transmit>
    360a:	ff 91       	pop	r31
    360c:	ef 91       	pop	r30
    360e:	bf 91       	pop	r27
    3610:	af 91       	pop	r26
    3612:	9f 91       	pop	r25
    3614:	8f 91       	pop	r24
    3616:	7f 91       	pop	r23
    3618:	6f 91       	pop	r22
    361a:	5f 91       	pop	r21
    361c:	4f 91       	pop	r20
    361e:	3f 91       	pop	r19
    3620:	2f 91       	pop	r18
    3622:	0f 90       	pop	r0
    3624:	0b be       	out	0x3b, r0	; 59
    3626:	0f 90       	pop	r0
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	0f 90       	pop	r0
    362c:	1f 90       	pop	r1
    362e:	18 95       	reti

00003630 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    3630:	1f 92       	push	r1
    3632:	0f 92       	push	r0
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	0f 92       	push	r0
    3638:	11 24       	eor	r1, r1
    363a:	0b b6       	in	r0, 0x3b	; 59
    363c:	0f 92       	push	r0
    363e:	2f 93       	push	r18
    3640:	3f 93       	push	r19
    3642:	4f 93       	push	r20
    3644:	5f 93       	push	r21
    3646:	6f 93       	push	r22
    3648:	7f 93       	push	r23
    364a:	8f 93       	push	r24
    364c:	9f 93       	push	r25
    364e:	af 93       	push	r26
    3650:	bf 93       	push	r27
    3652:	ef 93       	push	r30
    3654:	ff 93       	push	r31
    3656:	85 e0       	ldi	r24, 0x05	; 5
    3658:	0e 94 3c 13 	call	0x2678	; 0x2678 <ir_receive>
    365c:	ff 91       	pop	r31
    365e:	ef 91       	pop	r30
    3660:	bf 91       	pop	r27
    3662:	af 91       	pop	r26
    3664:	9f 91       	pop	r25
    3666:	8f 91       	pop	r24
    3668:	7f 91       	pop	r23
    366a:	6f 91       	pop	r22
    366c:	5f 91       	pop	r21
    366e:	4f 91       	pop	r20
    3670:	3f 91       	pop	r19
    3672:	2f 91       	pop	r18
    3674:	0f 90       	pop	r0
    3676:	0b be       	out	0x3b, r0	; 59
    3678:	0f 90       	pop	r0
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	0f 90       	pop	r0
    367e:	1f 90       	pop	r1
    3680:	18 95       	reti

00003682 <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    3682:	1f 92       	push	r1
    3684:	0f 92       	push	r0
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	0f 92       	push	r0
    368a:	11 24       	eor	r1, r1
    368c:	0b b6       	in	r0, 0x3b	; 59
    368e:	0f 92       	push	r0
    3690:	2f 93       	push	r18
    3692:	3f 93       	push	r19
    3694:	4f 93       	push	r20
    3696:	5f 93       	push	r21
    3698:	6f 93       	push	r22
    369a:	7f 93       	push	r23
    369c:	8f 93       	push	r24
    369e:	9f 93       	push	r25
    36a0:	af 93       	push	r26
    36a2:	bf 93       	push	r27
    36a4:	ef 93       	push	r30
    36a6:	ff 93       	push	r31
    36a8:	85 e0       	ldi	r24, 0x05	; 5
    36aa:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ir_transmit_complete>
    36ae:	ff 91       	pop	r31
    36b0:	ef 91       	pop	r30
    36b2:	bf 91       	pop	r27
    36b4:	af 91       	pop	r26
    36b6:	9f 91       	pop	r25
    36b8:	8f 91       	pop	r24
    36ba:	7f 91       	pop	r23
    36bc:	6f 91       	pop	r22
    36be:	5f 91       	pop	r21
    36c0:	4f 91       	pop	r20
    36c2:	3f 91       	pop	r19
    36c4:	2f 91       	pop	r18
    36c6:	0f 90       	pop	r0
    36c8:	0b be       	out	0x3b, r0	; 59
    36ca:	0f 90       	pop	r0
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	0f 90       	pop	r0
    36d0:	1f 90       	pop	r1
    36d2:	18 95       	reti

000036d4 <__vector_120>:
ISR( USARTF0_DRE_vect ) { ir_transmit(5); }
    36d4:	1f 92       	push	r1
    36d6:	0f 92       	push	r0
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	0f 92       	push	r0
    36dc:	11 24       	eor	r1, r1
    36de:	0b b6       	in	r0, 0x3b	; 59
    36e0:	0f 92       	push	r0
    36e2:	2f 93       	push	r18
    36e4:	3f 93       	push	r19
    36e6:	4f 93       	push	r20
    36e8:	5f 93       	push	r21
    36ea:	6f 93       	push	r22
    36ec:	7f 93       	push	r23
    36ee:	8f 93       	push	r24
    36f0:	9f 93       	push	r25
    36f2:	af 93       	push	r26
    36f4:	bf 93       	push	r27
    36f6:	ef 93       	push	r30
    36f8:	ff 93       	push	r31
    36fa:	85 e0       	ldi	r24, 0x05	; 5
    36fc:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <ir_transmit>
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	bf 91       	pop	r27
    3706:	af 91       	pop	r26
    3708:	9f 91       	pop	r25
    370a:	8f 91       	pop	r24
    370c:	7f 91       	pop	r23
    370e:	6f 91       	pop	r22
    3710:	5f 91       	pop	r21
    3712:	4f 91       	pop	r20
    3714:	3f 91       	pop	r19
    3716:	2f 91       	pop	r18
    3718:	0f 90       	pop	r0
    371a:	0b be       	out	0x3b, r0	; 59
    371c:	0f 90       	pop	r0
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	0f 90       	pop	r0
    3722:	1f 90       	pop	r1
    3724:	18 95       	reti

00003726 <ir_led_init>:
uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void ir_led_init()
{
    3726:	cf 93       	push	r28
    3728:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    372a:	a0 ea       	ldi	r26, 0xA0	; 160
    372c:	b6 e0       	ldi	r27, 0x06	; 6
    372e:	93 ef       	ldi	r25, 0xF3	; 243
    3730:	11 96       	adiw	r26, 0x01	; 1
    3732:	9c 93       	st	X, r25
    3734:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    3736:	e0 e0       	ldi	r30, 0x00	; 0
    3738:	fb e0       	ldi	r31, 0x0B	; 11
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    373e:	80 81       	ld	r24, Z
    3740:	83 60       	ori	r24, 0x03	; 3
    3742:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    3744:	83 ed       	ldi	r24, 0xD3	; 211
    3746:	87 a3       	std	Z+39, r24	; 0x27
    3748:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    374a:	89 e6       	ldi	r24, 0x69	; 105
    374c:	81 a7       	std	Z+41, r24	; 0x29
    374e:	83 a7       	std	Z+43, r24	; 0x2b
    3750:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    3752:	87 a7       	std	Z+47, r24	; 0x2f
    3754:	80 a7       	std	Z+40, r24	; 0x28
    3756:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    3758:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    375a:	c0 e4       	ldi	r28, 0x40	; 64
    375c:	d6 e0       	ldi	r29, 0x06	; 6
    375e:	98 e8       	ldi	r25, 0x88	; 136
    3760:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    3762:	20 e6       	ldi	r18, 0x60	; 96
    3764:	36 e0       	ldi	r19, 0x06	; 6
    3766:	88 e0       	ldi	r24, 0x08	; 8
    3768:	f9 01       	movw	r30, r18
    376a:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    376c:	40 e8       	ldi	r20, 0x80	; 128
    376e:	56 e0       	ldi	r21, 0x06	; 6
    3770:	fa 01       	movw	r30, r20
    3772:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    3774:	11 96       	adiw	r26, 0x01	; 1
    3776:	8c 93       	st	X, r24
    3778:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    377a:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    377c:	f9 01       	movw	r30, r18
    377e:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    3780:	fa 01       	movw	r30, r20
    3782:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    3784:	16 96       	adiw	r26, 0x06	; 6
    3786:	8c 93       	st	X, r24
    3788:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    378a:	80 e4       	ldi	r24, 0x40	; 64
    378c:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    378e:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    3790:	f9 01       	movw	r30, r18
    3792:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    3794:	fa 01       	movw	r30, r20
    3796:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    3798:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    379a:	53 96       	adiw	r26, 0x13	; 19
    379c:	8c 93       	st	X, r24
	
}
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	08 95       	ret

000037a4 <ir_led_on>:

void ir_led_on(uint8_t direction)
{
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	dc 01       	movw	r26, r24
    37ac:	aa 0f       	add	r26, r26
    37ae:	bb 1f       	adc	r27, r27
    37b0:	ad 01       	movw	r20, r26
    37b2:	4c 5d       	subi	r20, 0xDC	; 220
    37b4:	5f 4d       	sbci	r21, 0xDF	; 223
    37b6:	ea 01       	movw	r28, r20
    37b8:	e8 81       	ld	r30, Y
    37ba:	f9 81       	ldd	r31, Y+1	; 0x01
    37bc:	24 81       	ldd	r18, Z+4	; 0x04
    37be:	fc 01       	movw	r30, r24
    37c0:	ee 54       	subi	r30, 0x4E	; 78
    37c2:	fc 4d       	sbci	r31, 0xDC	; 220
    37c4:	20 83       	st	Z, r18
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    37c6:	e0 e0       	ldi	r30, 0x00	; 0
    37c8:	fb e0       	ldi	r31, 0x0B	; 11
    37ca:	31 81       	ldd	r19, Z+1	; 0x01
    37cc:	ec 01       	movw	r28, r24
    37ce:	c2 5e       	subi	r28, 0xE2	; 226
    37d0:	df 4d       	sbci	r29, 0xDF	; 223
    37d2:	28 81       	ld	r18, Y
    37d4:	20 95       	com	r18
    37d6:	23 23       	and	r18, r19
    37d8:	21 83       	std	Z+1, r18	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    37da:	28 81       	ld	r18, Y
    37dc:	e0 ea       	ldi	r30, 0xA0	; 160
    37de:	f6 e0       	ldi	r31, 0x06	; 6
    37e0:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    37e2:	34 81       	ldd	r19, Z+4	; 0x04
    37e4:	28 81       	ld	r18, Y
    37e6:	23 2b       	or	r18, r19
    37e8:	24 83       	std	Z+4, r18	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    37ea:	ea 01       	movw	r28, r20
    37ec:	e8 81       	ld	r30, Y
    37ee:	f9 81       	ldd	r31, Y+1	; 0x01
    37f0:	14 82       	std	Z+4, r1	; 0x04
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    37f2:	a4 5f       	subi	r26, 0xF4	; 244
    37f4:	bf 4d       	sbci	r27, 0xDF	; 223
    37f6:	cd 91       	ld	r28, X+
    37f8:	dc 91       	ld	r29, X
    37fa:	11 97       	sbiw	r26, 0x01	; 1
    37fc:	fc 01       	movw	r30, r24
    37fe:	e8 5e       	subi	r30, 0xE8	; 232
    3800:	ff 4d       	sbci	r31, 0xDF	; 223
    3802:	80 81       	ld	r24, Z
    3804:	89 83       	std	Y+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    3806:	0d 90       	ld	r0, X+
    3808:	bc 91       	ld	r27, X
    380a:	a0 2d       	mov	r26, r0
    380c:	14 96       	adiw	r26, 0x04	; 4
    380e:	9c 91       	ld	r25, X
    3810:	14 97       	sbiw	r26, 0x04	; 4
    3812:	80 81       	ld	r24, Z
    3814:	80 95       	com	r24
    3816:	89 23       	and	r24, r25
    3818:	14 96       	adiw	r26, 0x04	; 4
    381a:	8c 93       	st	X, r24

}
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	08 95       	ret

00003822 <ir_led_off>:

void ir_led_off(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9c 01       	movw	r18, r24
    3826:	22 0f       	add	r18, r18
    3828:	33 1f       	adc	r19, r19
    382a:	f9 01       	movw	r30, r18
    382c:	e4 5f       	subi	r30, 0xF4	; 244
    382e:	ff 4d       	sbci	r31, 0xDF	; 223
    3830:	01 90       	ld	r0, Z+
    3832:	f0 81       	ld	r31, Z
    3834:	e0 2d       	mov	r30, r0
    3836:	54 81       	ldd	r21, Z+4	; 0x04
    3838:	dc 01       	movw	r26, r24
    383a:	a8 5e       	subi	r26, 0xE8	; 232
    383c:	bf 4d       	sbci	r27, 0xDF	; 223
    383e:	4c 91       	ld	r20, X
    3840:	45 2b       	or	r20, r21
    3842:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    3844:	f9 01       	movw	r30, r18
    3846:	ec 5d       	subi	r30, 0xDC	; 220
    3848:	ff 4d       	sbci	r31, 0xDF	; 223
    384a:	01 90       	ld	r0, Z+
    384c:	f0 81       	ld	r31, Z
    384e:	e0 2d       	mov	r30, r0
    3850:	dc 01       	movw	r26, r24
    3852:	ae 54       	subi	r26, 0x4E	; 78
    3854:	bc 4d       	sbci	r27, 0xDC	; 220
    3856:	2c 91       	ld	r18, X
    3858:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    385a:	a0 ea       	ldi	r26, 0xA0	; 160
    385c:	b6 e0       	ldi	r27, 0x06	; 6
    385e:	14 96       	adiw	r26, 0x04	; 4
    3860:	2c 91       	ld	r18, X
    3862:	14 97       	sbiw	r26, 0x04	; 4
    3864:	fc 01       	movw	r30, r24
    3866:	e2 5e       	subi	r30, 0xE2	; 226
    3868:	ff 4d       	sbci	r31, 0xDF	; 223
    386a:	80 81       	ld	r24, Z
    386c:	80 95       	com	r24
    386e:	82 23       	and	r24, r18
    3870:	14 96       	adiw	r26, 0x04	; 4
    3872:	8c 93       	st	X, r24
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	bb e0       	ldi	r27, 0x0B	; 11
    3878:	11 96       	adiw	r26, 0x01	; 1
    387a:	9c 91       	ld	r25, X
    387c:	11 97       	sbiw	r26, 0x01	; 1
    387e:	80 81       	ld	r24, Z
    3880:	89 2b       	or	r24, r25
    3882:	11 96       	adiw	r26, 0x01	; 1
    3884:	8c 93       	st	X, r24
    3886:	08 95       	ret

00003888 <set_all_ir_powers>:
}

void set_all_ir_powers(uint16_t power)
{
    3888:	8f 92       	push	r8
    388a:	9f 92       	push	r9
    388c:	af 92       	push	r10
    388e:	bf 92       	push	r11
    3890:	df 92       	push	r13
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	00 d0       	rcall	.+0      	; 0x38a0 <set_all_ir_powers+0x18>
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <set_all_ir_powers+0x1a>
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	7c 01       	movw	r14, r24
	if(power>256) return;
    38a8:	81 30       	cpi	r24, 0x01	; 1
    38aa:	91 40       	sbci	r25, 0x01	; 1
    38ac:	08 f0       	brcs	.+2      	; 0x38b0 <set_all_ir_powers+0x28>
    38ae:	47 c1       	rjmp	.+654    	; 0x3b3e <set_all_ir_powers+0x2b6>
	if(curr_ir_power==power) return;
    38b0:	80 91 d9 28 	lds	r24, 0x28D9
    38b4:	90 91 da 28 	lds	r25, 0x28DA
    38b8:	8e 15       	cp	r24, r14
    38ba:	9f 05       	cpc	r25, r15
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <set_all_ir_powers+0x38>
    38be:	3f c1       	rjmp	.+638    	; 0x3b3e <set_all_ir_powers+0x2b6>
	uint8_t power_high = (power>>8);
	uint8_t power_low = (power&0xFF);
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    38c0:	f9 82       	std	Y+1, r15	; 0x01
    38c2:	ea 82       	std	Y+2, r14	; 0x02
    38c4:	8f 2d       	mov	r24, r15
    38c6:	80 61       	ori	r24, 0x10	; 16
    38c8:	8b 83       	std	Y+3, r24	; 0x03
    38ca:	ec 82       	std	Y+4, r14	; 0x04
    38cc:	8f 2d       	mov	r24, r15
    38ce:	80 66       	ori	r24, 0x60	; 96
    38d0:	8d 83       	std	Y+5, r24	; 0x05
    38d2:	ee 82       	std	Y+6, r14	; 0x06
	
	uint32_t startTime = get_time();
    38d4:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    38d8:	4b 01       	movw	r8, r22
    38da:	5c 01       	movw	r10, r24
	uint8_t result;	
	uint8_t printed = 0;
    38dc:	d1 2c       	mov	r13, r1
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
    38de:	0a e5       	ldi	r16, 0x5A	; 90
    38e0:	15 e0       	ldi	r17, 0x05	; 5
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
	
	uint32_t startTime = get_time();
	uint8_t result;	
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
    38e2:	34 c0       	rjmp	.+104    	; 0x394c <set_all_ir_powers+0xc4>
		if((get_time()-startTime)>100){
    38e4:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	88 19       	sub	r24, r8
    38ee:	99 09       	sbc	r25, r9
    38f0:	aa 09       	sbc	r26, r10
    38f2:	bb 09       	sbc	r27, r11
    38f4:	85 36       	cpi	r24, 0x65	; 101
    38f6:	91 05       	cpc	r25, r1
    38f8:	a1 05       	cpc	r26, r1
    38fa:	b1 05       	cpc	r27, r1
    38fc:	68 f0       	brcs	.+26     	; 0x3918 <set_all_ir_powers+0x90>
			printf_P(TWI_WAITING_STR);
    38fe:	1f 93       	push	r17
    3900:	0f 93       	push	r16
    3902:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			printed = 1;
			delay_ms(10);
    3906:	8a e0       	ldi	r24, 0x0A	; 10
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
	uint8_t result;	
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
			printed = 1;
    3912:	dd 24       	eor	r13, r13
    3914:	d3 94       	inc	r13
    3916:	1a c0       	rjmp	.+52     	; 0x394c <set_all_ir_powers+0xc4>
			delay_ms(10);
		}else if((get_time()-startTime)>1000){
    3918:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	88 19       	sub	r24, r8
    3922:	99 09       	sbc	r25, r9
    3924:	aa 09       	sbc	r26, r10
    3926:	bb 09       	sbc	r27, r11
    3928:	89 3e       	cpi	r24, 0xE9	; 233
    392a:	93 40       	sbci	r25, 0x03	; 3
    392c:	a1 05       	cpc	r26, r1
    392e:	b1 05       	cpc	r27, r1
    3930:	68 f0       	brcs	.+26     	; 0x394c <set_all_ir_powers+0xc4>
			printf_P(TWI_TIMEOUT_STR);
    3932:	85 e3       	ldi	r24, 0x35	; 53
    3934:	95 e0       	ldi	r25, 0x05	; 5
    3936:	9f 93       	push	r25
    3938:	8f 93       	push	r24
    393a:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			printf("(a)\r\n");
    393e:	8f ef       	ldi	r24, 0xFF	; 255
    3940:	90 e2       	ldi	r25, 0x20	; 32
    3942:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
			return;
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	f9 c0       	rjmp	.+498    	; 0x3b3e <set_all_ir_powers+0x2b6>
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
	
	uint32_t startTime = get_time();
	uint8_t result;	
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
    394c:	e0 91 d7 28 	lds	r30, 0x28D7
    3950:	f0 91 d8 28 	lds	r31, 0x28D8
    3954:	87 89       	ldd	r24, Z+23	; 0x17
    3956:	81 11       	cpse	r24, r1
    3958:	c5 cf       	rjmp	.-118    	; 0x38e4 <set_all_ir_powers+0x5c>
			printf_P(TWI_TIMEOUT_STR);
			printf("(a)\r\n");
			return;
		}			
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
    395a:	46 e0       	ldi	r20, 0x06	; 6
    395c:	be 01       	movw	r22, r28
    395e:	6f 5f       	subi	r22, 0xFF	; 255
    3960:	7f 4f       	sbci	r23, 0xFF	; 255
    3962:	8c e2       	ldi	r24, 0x2C	; 44
    3964:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TWI_MasterWrite>
	while(!result){
    3968:	88 23       	and	r24, r24
    396a:	09 f4       	brne	.+2      	; 0x396e <set_all_ir_powers+0xe6>
    396c:	46 c0       	rjmp	.+140    	; 0x39fa <set_all_ir_powers+0x172>
    396e:	48 c0       	rjmp	.+144    	; 0x3a00 <set_all_ir_powers+0x178>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
    3970:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	88 19       	sub	r24, r8
    397a:	99 09       	sbc	r25, r9
    397c:	aa 09       	sbc	r26, r10
    397e:	bb 09       	sbc	r27, r11
    3980:	85 36       	cpi	r24, 0x65	; 101
    3982:	91 05       	cpc	r25, r1
    3984:	a1 05       	cpc	r26, r1
    3986:	b1 05       	cpc	r27, r1
    3988:	68 f0       	brcs	.+26     	; 0x39a4 <set_all_ir_powers+0x11c>
			printf_P(TWI_WAITING_STR);
    398a:	1f 93       	push	r17
    398c:	0f 93       	push	r16
    398e:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
				printed = 1;				
				delay_ms(10);				
    3992:	8a e0       	ldi	r24, 0x0A	; 10
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
				printed = 1;				
    399e:	dd 24       	eor	r13, r13
    39a0:	d3 94       	inc	r13
    39a2:	1a c0       	rjmp	.+52     	; 0x39d8 <set_all_ir_powers+0x150>
				delay_ms(10);				
			}else if((get_time()-startTime)>1000){
    39a4:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	88 19       	sub	r24, r8
    39ae:	99 09       	sbc	r25, r9
    39b0:	aa 09       	sbc	r26, r10
    39b2:	bb 09       	sbc	r27, r11
    39b4:	89 3e       	cpi	r24, 0xE9	; 233
    39b6:	93 40       	sbci	r25, 0x03	; 3
    39b8:	a1 05       	cpc	r26, r1
    39ba:	b1 05       	cpc	r27, r1
    39bc:	68 f0       	brcs	.+26     	; 0x39d8 <set_all_ir_powers+0x150>
				printf_P(TWI_TIMEOUT_STR);
    39be:	85 e3       	ldi	r24, 0x35	; 53
    39c0:	95 e0       	ldi	r25, 0x05	; 5
    39c2:	9f 93       	push	r25
    39c4:	8f 93       	push	r24
    39c6:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
				printf("(b)\r\n");
    39ca:	84 e0       	ldi	r24, 0x04	; 4
    39cc:	91 e2       	ldi	r25, 0x21	; 33
    39ce:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
				return;
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	b3 c0       	rjmp	.+358    	; 0x3b3e <set_all_ir_powers+0x2b6>
			return;
		}			
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
    39d8:	e0 91 d7 28 	lds	r30, 0x28D7
    39dc:	f0 91 d8 28 	lds	r31, 0x28D8
    39e0:	87 89       	ldd	r24, Z+23	; 0x17
    39e2:	81 11       	cpse	r24, r1
    39e4:	c5 cf       	rjmp	.-118    	; 0x3970 <set_all_ir_powers+0xe8>
				printf_P(TWI_TIMEOUT_STR);
				printf("(b)\r\n");
				return;
			}
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
    39e6:	46 e0       	ldi	r20, 0x06	; 6
    39e8:	be 01       	movw	r22, r28
    39ea:	6f 5f       	subi	r22, 0xFF	; 255
    39ec:	7f 4f       	sbci	r23, 0xFF	; 255
    39ee:	8c e2       	ldi	r24, 0x2C	; 44
    39f0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TWI_MasterWrite>
			printf("(a)\r\n");
			return;
		}			
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	while(!result){
    39f4:	88 23       	and	r24, r24
    39f6:	81 f3       	breq	.-32     	; 0x39d8 <set_all_ir_powers+0x150>
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <set_all_ir_powers+0x178>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
    39fa:	0a e5       	ldi	r16, 0x5A	; 90
    39fc:	15 e0       	ldi	r17, 0x05	; 5
    39fe:	ec cf       	rjmp	.-40     	; 0x39d8 <set_all_ir_powers+0x150>
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
    3a00:	0a e5       	ldi	r16, 0x5A	; 90
    3a02:	15 e0       	ldi	r17, 0x05	; 5
    3a04:	34 c0       	rjmp	.+104    	; 0x3a6e <set_all_ir_powers+0x1e6>
			}
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
    3a06:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	88 19       	sub	r24, r8
    3a10:	99 09       	sbc	r25, r9
    3a12:	aa 09       	sbc	r26, r10
    3a14:	bb 09       	sbc	r27, r11
    3a16:	85 36       	cpi	r24, 0x65	; 101
    3a18:	91 05       	cpc	r25, r1
    3a1a:	a1 05       	cpc	r26, r1
    3a1c:	b1 05       	cpc	r27, r1
    3a1e:	68 f0       	brcs	.+26     	; 0x3a3a <set_all_ir_powers+0x1b2>
			printf_P(TWI_WAITING_STR);
    3a20:	1f 93       	push	r17
    3a22:	0f 93       	push	r16
    3a24:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			printed = 1;			
			delay_ms(10);			
    3a28:	8a e0       	ldi	r24, 0x0A	; 10
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
			printed = 1;			
    3a34:	dd 24       	eor	r13, r13
    3a36:	d3 94       	inc	r13
    3a38:	1a c0       	rjmp	.+52     	; 0x3a6e <set_all_ir_powers+0x1e6>
			delay_ms(10);			
		}else if((get_time()-startTime)>1000){
    3a3a:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	88 19       	sub	r24, r8
    3a44:	99 09       	sbc	r25, r9
    3a46:	aa 09       	sbc	r26, r10
    3a48:	bb 09       	sbc	r27, r11
    3a4a:	89 3e       	cpi	r24, 0xE9	; 233
    3a4c:	93 40       	sbci	r25, 0x03	; 3
    3a4e:	a1 05       	cpc	r26, r1
    3a50:	b1 05       	cpc	r27, r1
    3a52:	68 f0       	brcs	.+26     	; 0x3a6e <set_all_ir_powers+0x1e6>
			printf_P(TWI_TIMEOUT_STR);
    3a54:	85 e3       	ldi	r24, 0x35	; 53
    3a56:	95 e0       	ldi	r25, 0x05	; 5
    3a58:	9f 93       	push	r25
    3a5a:	8f 93       	push	r24
    3a5c:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			printf("(c)\r\n");
    3a60:	89 e0       	ldi	r24, 0x09	; 9
    3a62:	91 e2       	ldi	r25, 0x21	; 33
    3a64:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
			return;
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	68 c0       	rjmp	.+208    	; 0x3b3e <set_all_ir_powers+0x2b6>
				return;
			}
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
    3a6e:	e0 91 d7 28 	lds	r30, 0x28D7
    3a72:	f0 91 d8 28 	lds	r31, 0x28D8
    3a76:	87 89       	ldd	r24, Z+23	; 0x17
    3a78:	81 11       	cpse	r24, r1
    3a7a:	c5 cf       	rjmp	.-118    	; 0x3a06 <set_all_ir_powers+0x17e>
			printf_P(TWI_TIMEOUT_STR);
			printf("(c)\r\n");
			return;
		}
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
    3a7c:	46 e0       	ldi	r20, 0x06	; 6
    3a7e:	be 01       	movw	r22, r28
    3a80:	6f 5f       	subi	r22, 0xFF	; 255
    3a82:	7f 4f       	sbci	r23, 0xFF	; 255
    3a84:	8e e2       	ldi	r24, 0x2E	; 46
    3a86:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TWI_MasterWrite>
	while(!result){
    3a8a:	88 23       	and	r24, r24
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <set_all_ir_powers+0x208>
    3a8e:	46 c0       	rjmp	.+140    	; 0x3b1c <set_all_ir_powers+0x294>
    3a90:	48 c0       	rjmp	.+144    	; 0x3b22 <set_all_ir_powers+0x29a>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
    3a92:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	88 19       	sub	r24, r8
    3a9c:	99 09       	sbc	r25, r9
    3a9e:	aa 09       	sbc	r26, r10
    3aa0:	bb 09       	sbc	r27, r11
    3aa2:	85 36       	cpi	r24, 0x65	; 101
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	a1 05       	cpc	r26, r1
    3aa8:	b1 05       	cpc	r27, r1
    3aaa:	68 f0       	brcs	.+26     	; 0x3ac6 <set_all_ir_powers+0x23e>
				printf_P(TWI_WAITING_STR);
    3aac:	1f 93       	push	r17
    3aae:	0f 93       	push	r16
    3ab0:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
				printed = 1;				
				delay_ms(10);					
    3ab4:	8a e0       	ldi	r24, 0x0A	; 10
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
				printf_P(TWI_WAITING_STR);
				printed = 1;				
    3ac0:	dd 24       	eor	r13, r13
    3ac2:	d3 94       	inc	r13
    3ac4:	1a c0       	rjmp	.+52     	; 0x3afa <set_all_ir_powers+0x272>
				delay_ms(10);					
			}else if((get_time()-startTime)>1000){
    3ac6:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	88 19       	sub	r24, r8
    3ad0:	99 09       	sbc	r25, r9
    3ad2:	aa 09       	sbc	r26, r10
    3ad4:	bb 09       	sbc	r27, r11
    3ad6:	89 3e       	cpi	r24, 0xE9	; 233
    3ad8:	93 40       	sbci	r25, 0x03	; 3
    3ada:	a1 05       	cpc	r26, r1
    3adc:	b1 05       	cpc	r27, r1
    3ade:	68 f0       	brcs	.+26     	; 0x3afa <set_all_ir_powers+0x272>
				printf_P(TWI_TIMEOUT_STR);
    3ae0:	85 e3       	ldi	r24, 0x35	; 53
    3ae2:	95 e0       	ldi	r25, 0x05	; 5
    3ae4:	9f 93       	push	r25
    3ae6:	8f 93       	push	r24
    3ae8:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
				printf("(d)\r\n");
    3aec:	8e e0       	ldi	r24, 0x0E	; 14
    3aee:	91 e2       	ldi	r25, 0x21	; 33
    3af0:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
				return;
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	22 c0       	rjmp	.+68     	; 0x3b3e <set_all_ir_powers+0x2b6>
			return;
		}
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
    3afa:	e0 91 d7 28 	lds	r30, 0x28D7
    3afe:	f0 91 d8 28 	lds	r31, 0x28D8
    3b02:	87 89       	ldd	r24, Z+23	; 0x17
    3b04:	81 11       	cpse	r24, r1
    3b06:	c5 cf       	rjmp	.-118    	; 0x3a92 <set_all_ir_powers+0x20a>
				printf_P(TWI_TIMEOUT_STR);
				printf("(d)\r\n");
				return;
			}
		}
		result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);
    3b08:	46 e0       	ldi	r20, 0x06	; 6
    3b0a:	be 01       	movw	r22, r28
    3b0c:	6f 5f       	subi	r22, 0xFF	; 255
    3b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b10:	8e e2       	ldi	r24, 0x2E	; 46
    3b12:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TWI_MasterWrite>
			printf("(c)\r\n");
			return;
		}
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
	while(!result){
    3b16:	88 23       	and	r24, r24
    3b18:	81 f3       	breq	.-32     	; 0x3afa <set_all_ir_powers+0x272>
    3b1a:	03 c0       	rjmp	.+6      	; 0x3b22 <set_all_ir_powers+0x29a>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
				printf_P(TWI_WAITING_STR);
    3b1c:	0a e5       	ldi	r16, 0x5A	; 90
    3b1e:	15 e0       	ldi	r17, 0x05	; 5
    3b20:	ec cf       	rjmp	.-40     	; 0x3afa <set_all_ir_powers+0x272>
				return;
			}
		}
		result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);
	}
	if(printed){
    3b22:	dd 20       	and	r13, r13
    3b24:	41 f0       	breq	.+16     	; 0x3b36 <set_all_ir_powers+0x2ae>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	95 e0       	ldi	r25, 0x05	; 5
    3b2a:	9f 93       	push	r25
    3b2c:	8f 93       	push	r24
    3b2e:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    3b36:	e0 92 d9 28 	sts	0x28D9, r14
    3b3a:	f0 92 da 28 	sts	0x28DA, r15
    3b3e:	26 96       	adiw	r28, 0x06	; 6
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	bf 90       	pop	r11
    3b54:	af 90       	pop	r10
    3b56:	9f 90       	pop	r9
    3b58:	8f 90       	pop	r8
    3b5a:	08 95       	ret

00003b5c <ir_sensor_init>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    3b5c:	e0 e2       	ldi	r30, 0x20	; 32
    3b5e:	f6 e0       	ldi	r31, 0x06	; 6
    3b60:	8c ef       	ldi	r24, 0xFC	; 252
    3b62:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3b64:	87 e0       	ldi	r24, 0x07	; 7
    3b66:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3b68:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3b6a:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3b6c:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3b6e:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3b70:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    3b72:	e0 e4       	ldi	r30, 0x40	; 64
    3b74:	f2 e0       	ldi	r31, 0x02	; 2
    3b76:	90 e2       	ldi	r25, 0x20	; 32
    3b78:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    3b7a:	90 e1       	ldi	r25, 0x10	; 16
    3b7c:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    3b7e:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    3b80:	83 e1       	ldi	r24, 0x13	; 19
    3b82:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    3b84:	84 e0       	ldi	r24, 0x04	; 4
    3b86:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    3b88:	84 b5       	in	r24, 0x24	; 36
    3b8a:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    3b8c:	85 b5       	in	r24, 0x25	; 37
    3b8e:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	80 83       	st	Z, r24
	#endif
	
	delay_ms(10);
    3b94:	8a e0       	ldi	r24, 0x0A	; 10
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
	
	for(uint8_t dir=0; dir<6; dir++){
		min_collision_vals[dir] = 32767;
    3b9c:	ee e1       	ldi	r30, 0x1E	; 30
    3b9e:	f7 e2       	ldi	r31, 0x27	; 39
    3ba0:	8f ef       	ldi	r24, 0xFF	; 255
    3ba2:	9f e7       	ldi	r25, 0x7F	; 127
    3ba4:	80 83       	st	Z, r24
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	82 83       	std	Z+2, r24	; 0x02
    3baa:	93 83       	std	Z+3, r25	; 0x03
    3bac:	84 83       	std	Z+4, r24	; 0x04
    3bae:	95 83       	std	Z+5, r25	; 0x05
    3bb0:	86 83       	std	Z+6, r24	; 0x06
    3bb2:	97 83       	std	Z+7, r25	; 0x07
    3bb4:	80 87       	std	Z+8, r24	; 0x08
    3bb6:	91 87       	std	Z+9, r25	; 0x09
    3bb8:	82 87       	std	Z+10, r24	; 0x0a
    3bba:	93 87       	std	Z+11, r25	; 0x0b
	}
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    3bbc:	e5 e5       	ldi	r30, 0x55	; 85
    3bbe:	f6 e2       	ldi	r31, 0x26	; 38
    3bc0:	10 82       	st	Z, r1
    3bc2:	11 82       	std	Z+1, r1	; 0x01
    3bc4:	12 82       	std	Z+2, r1	; 0x02
    3bc6:	13 82       	std	Z+3, r1	; 0x03
    3bc8:	14 82       	std	Z+4, r1	; 0x04
    3bca:	15 82       	std	Z+5, r1	; 0x05
    3bcc:	16 82       	std	Z+6, r1	; 0x06
    3bce:	17 82       	std	Z+7, r1	; 0x07
    3bd0:	10 86       	std	Z+8, r1	; 0x08
    3bd2:	11 86       	std	Z+9, r1	; 0x09
    3bd4:	12 86       	std	Z+10, r1	; 0x0a
    3bd6:	13 86       	std	Z+11, r1	; 0x0b
	}
	schedule_task(1000,initialize_ir_baselines,NULL);
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	47 e3       	ldi	r20, 0x37	; 55
    3bde:	5f e1       	ldi	r21, 0x1F	; 31
    3be0:	68 ee       	ldi	r22, 0xE8	; 232
    3be2:	73 e0       	ldi	r23, 0x03	; 3
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
	schedule_periodic_task(13331, update_ir_baselines, NULL);
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	4f e6       	ldi	r20, 0x6F	; 111
    3bf2:	5f e1       	ldi	r21, 0x1F	; 31
    3bf4:	63 e1       	ldi	r22, 0x13	; 19
    3bf6:	74 e3       	ldi	r23, 0x34	; 52
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	0e 94 95 3c 	call	0x792a	; 0x792a <schedule_periodic_task>
    3c00:	08 95       	ret

00003c02 <meas_find_median>:
}	

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    3c10:	61 30       	cpi	r22, 0x01	; 1
    3c12:	19 f4       	brne	.+6      	; 0x3c1a <meas_find_median+0x18>
    3c14:	88 81       	ld	r24, Y
    3c16:	99 81       	ldd	r25, Y+1	; 0x01
    3c18:	53 c0       	rjmp	.+166    	; 0x3cc0 <meas_find_median+0xbe>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    3c1a:	62 30       	cpi	r22, 0x02	; 2
    3c1c:	59 f5       	brne	.+86     	; 0x3c74 <meas_find_median+0x72>
    3c1e:	28 81       	ld	r18, Y
    3c20:	39 81       	ldd	r19, Y+1	; 0x01
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	82 0f       	add	r24, r18
    3c28:	93 1f       	adc	r25, r19
    3c2a:	99 23       	and	r25, r25
    3c2c:	0c f4       	brge	.+2      	; 0x3c30 <meas_find_median+0x2e>
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	95 95       	asr	r25
    3c32:	87 95       	ror	r24
    3c34:	45 c0       	rjmp	.+138    	; 0x3cc0 <meas_find_median+0xbe>
    3c36:	92 e0       	ldi	r25, 0x02	; 2
    3c38:	e9 0e       	add	r14, r25
    3c3a:	f1 1c       	adc	r15, r1
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    3c3c:	8f 5f       	subi	r24, 0xFF	; 255
    3c3e:	86 17       	cp	r24, r22
    3c40:	f1 f0       	breq	.+60     	; 0x3c7e <meas_find_median+0x7c>
    3c42:	98 2f       	mov	r25, r24
    3c44:	87 01       	movw	r16, r14
		{
			if(meas[j] < meas[i])
    3c46:	e9 2f       	mov	r30, r25
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	ee 0f       	add	r30, r30
    3c4c:	ff 1f       	adc	r31, r31
    3c4e:	ec 0f       	add	r30, r28
    3c50:	fd 1f       	adc	r31, r29
    3c52:	40 81       	ld	r20, Z
    3c54:	51 81       	ldd	r21, Z+1	; 0x01
    3c56:	d7 01       	movw	r26, r14
    3c58:	2d 91       	ld	r18, X+
    3c5a:	3c 91       	ld	r19, X
    3c5c:	42 17       	cp	r20, r18
    3c5e:	53 07       	cpc	r21, r19
    3c60:	2c f4       	brge	.+10     	; 0x3c6c <meas_find_median+0x6a>
			{
				int16_t temp = meas[i];
				meas[i] = meas[j];
    3c62:	d8 01       	movw	r26, r16
    3c64:	4d 93       	st	X+, r20
    3c66:	5c 93       	st	X, r21
				meas[j] = temp;
    3c68:	20 83       	st	Z, r18
    3c6a:	31 83       	std	Z+1, r19	; 0x01
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    3c6c:	9f 5f       	subi	r25, 0xFF	; 255
    3c6e:	96 13       	cpse	r25, r22
    3c70:	ea cf       	rjmp	.-44     	; 0x3c46 <meas_find_median+0x44>
    3c72:	e1 cf       	rjmp	.-62     	; 0x3c36 <meas_find_median+0x34>
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
    3c74:	66 23       	and	r22, r22
    3c76:	29 f0       	breq	.+10     	; 0x3c82 <meas_find_median+0x80>
    3c78:	7c 01       	movw	r14, r24
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	df cf       	rjmp	.-66     	; 0x3c3c <meas_find_median+0x3a>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    3c7e:	60 fd       	sbrc	r22, 0
    3c80:	15 c0       	rjmp	.+42     	; 0x3cac <meas_find_median+0xaa>
    3c82:	66 95       	lsr	r22
    3c84:	e6 2f       	mov	r30, r22
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	e1 50       	subi	r30, 0x01	; 1
    3c8a:	f0 48       	sbci	r31, 0x80	; 128
    3c8c:	ee 0f       	add	r30, r30
    3c8e:	ff 1f       	adc	r31, r31
    3c90:	ec 0f       	add	r30, r28
    3c92:	fd 1f       	adc	r31, r29
    3c94:	20 81       	ld	r18, Z
    3c96:	31 81       	ldd	r19, Z+1	; 0x01
    3c98:	82 81       	ldd	r24, Z+2	; 0x02
    3c9a:	93 81       	ldd	r25, Z+3	; 0x03
    3c9c:	82 0f       	add	r24, r18
    3c9e:	93 1f       	adc	r25, r19
    3ca0:	99 23       	and	r25, r25
    3ca2:	0c f4       	brge	.+2      	; 0x3ca6 <meas_find_median+0xa4>
    3ca4:	01 96       	adiw	r24, 0x01	; 1
    3ca6:	95 95       	asr	r25
    3ca8:	87 95       	ror	r24
    3caa:	0a c0       	rjmp	.+20     	; 0x3cc0 <meas_find_median+0xbe>
	else return meas[arr_len/2];
    3cac:	66 95       	lsr	r22
    3cae:	26 2f       	mov	r18, r22
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	22 0f       	add	r18, r18
    3cb4:	33 1f       	adc	r19, r19
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e2 0f       	add	r30, r18
    3cba:	f3 1f       	adc	r31, r19
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	ff 90       	pop	r15
    3cca:	ef 90       	pop	r14
    3ccc:	08 95       	ret

00003cce <get_ir_sensors>:
	}

}

void get_ir_sensors(int16_t* output_arr, uint8_t meas_per_ch)
{			
    3cce:	2f 92       	push	r2
    3cd0:	3f 92       	push	r3
    3cd2:	4f 92       	push	r4
    3cd4:	5f 92       	push	r5
    3cd6:	6f 92       	push	r6
    3cd8:	7f 92       	push	r7
    3cda:	8f 92       	push	r8
    3cdc:	9f 92       	push	r9
    3cde:	af 92       	push	r10
    3ce0:	bf 92       	push	r11
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	1f 92       	push	r1
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	89 83       	std	Y+1, r24	; 0x01
    3cfa:	69 2e       	mov	r6, r25
    3cfc:	76 2e       	mov	r7, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3cfe:	4d b6       	in	r4, 0x3d	; 61
    3d00:	5e b6       	in	r5, 0x3e	; 62

}

void get_ir_sensors(int16_t* output_arr, uint8_t meas_per_ch)
{			
	int16_t meas[6][meas_per_ch];	
    3d02:	86 2f       	mov	r24, r22
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	6c 01       	movw	r12, r24
    3d08:	cc 0c       	add	r12, r12
    3d0a:	dd 1c       	adc	r13, r13
    3d0c:	8c 0d       	add	r24, r12
    3d0e:	9d 1d       	adc	r25, r13
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	2d b7       	in	r18, 0x3d	; 61
    3d1a:	3e b7       	in	r19, 0x3e	; 62
    3d1c:	28 1b       	sub	r18, r24
    3d1e:	39 0b       	sbc	r19, r25
    3d20:	2d bf       	out	0x3d, r18	; 61
    3d22:	3e bf       	out	0x3e, r19	; 62
    3d24:	0d b7       	in	r16, 0x3d	; 61
    3d26:	1e b7       	in	r17, 0x3e	; 62
    3d28:	0f 5f       	subi	r16, 0xFF	; 255
    3d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2c:	18 01       	movw	r2, r16
    3d2e:	63 e2       	ldi	r22, 0x23	; 35
    3d30:	71 e2       	ldi	r23, 0x21	; 33
    3d32:	a8 01       	movw	r20, r16
    3d34:	0f 2e       	mov	r0, r31
    3d36:	f9 e2       	ldi	r31, 0x29	; 41
    3d38:	ef 2e       	mov	r14, r31
    3d3a:	f1 e2       	ldi	r31, 0x21	; 33
    3d3c:	ff 2e       	mov	r15, r31
    3d3e:	f0 2d       	mov	r31, r0
    3d40:	aa 24       	eor	r10, r10
    3d42:	aa 94       	dec	r10
    3d44:	a7 0c       	add	r10, r7
    3d46:	b1 2c       	mov	r11, r1
    3d48:	aa 0c       	add	r10, r10
    3d4a:	bb 1c       	adc	r11, r11
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    3d4c:	e0 e4       	ldi	r30, 0x40	; 64
    3d4e:	f2 e0       	ldi	r31, 0x02	; 2
    3d50:	32 e0       	ldi	r19, 0x02	; 2
    3d52:	a3 0e       	add	r10, r19
    3d54:	b1 1c       	adc	r11, r1
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    3d56:	88 24       	eor	r8, r8
    3d58:	83 94       	inc	r8
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    3d5a:	81 a1       	ldd	r24, Z+33	; 0x21
    3d5c:	87 70       	andi	r24, 0x07	; 7
    3d5e:	81 a3       	std	Z+33, r24	; 0x21
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    3d60:	81 a1       	ldd	r24, Z+33	; 0x21
    3d62:	db 01       	movw	r26, r22
    3d64:	9d 91       	ld	r25, X+
    3d66:	bd 01       	movw	r22, r26
    3d68:	89 2b       	or	r24, r25
    3d6a:	81 a3       	std	Z+33, r24	; 0x21
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3d6c:	77 20       	and	r7, r7
    3d6e:	a9 f0       	breq	.+42     	; 0x3d9a <get_ir_sensors+0xcc>
    3d70:	95 01       	movw	r18, r10
    3d72:	24 0f       	add	r18, r20
    3d74:	35 1f       	adc	r19, r21
    3d76:	da 01       	movw	r26, r20
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    3d78:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d7a:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    3d7c:	80 a1       	ldd	r24, Z+32	; 0x20
    3d7e:	80 68       	ori	r24, 0x80	; 128
    3d80:	80 a3       	std	Z+32, r24	; 0x20
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    3d82:	83 a1       	ldd	r24, Z+35	; 0x23
    3d84:	88 23       	and	r24, r24
    3d86:	e9 f3       	breq	.-6      	; 0x3d82 <get_ir_sensors+0xb4>
					meas[dir][meas_count] = ADCB.CH0RES;
    3d88:	80 89       	ldd	r24, Z+16	; 0x10
    3d8a:	91 89       	ldd	r25, Z+17	; 0x11
    3d8c:	8d 93       	st	X+, r24
    3d8e:	9d 93       	st	X+, r25
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    3d90:	83 a2       	std	Z+35, r8	; 0x23
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3d92:	9f be       	out	0x3f, r9	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3d94:	a2 17       	cp	r26, r18
    3d96:	b3 07       	cpc	r27, r19
    3d98:	79 f7       	brne	.-34     	; 0x3d78 <get_ir_sensors+0xaa>
    3d9a:	4c 0d       	add	r20, r12
    3d9c:	5d 1d       	adc	r21, r13
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    3d9e:	6e 15       	cp	r22, r14
    3da0:	7f 05       	cpc	r23, r15
    3da2:	d9 f6       	brne	.-74     	; 0x3d5a <get_ir_sensors+0x8c>
    3da4:	0c 5f       	subi	r16, 0xFC	; 252
    3da6:	1f 4f       	sbci	r17, 0xFF	; 255
    3da8:	0f 2e       	mov	r0, r31
    3daa:	f5 e5       	ldi	r31, 0x55	; 85
    3dac:	8f 2e       	mov	r8, r31
    3dae:	f6 e2       	ldi	r31, 0x26	; 38
    3db0:	9f 2e       	mov	r9, r31
    3db2:	f0 2d       	mov	r31, r0
    3db4:	e9 80       	ldd	r14, Y+1	; 0x01
    3db6:	f6 2c       	mov	r15, r6
    3db8:	a1 2c       	mov	r10, r1
    3dba:	b1 2c       	mov	r11, r1
	
	
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(meas_per_ch>2){
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
    3dbc:	0f 2e       	mov	r0, r31
    3dbe:	fe ef       	ldi	r31, 0xFE	; 254
    3dc0:	6f 2e       	mov	r6, r31
    3dc2:	f0 2d       	mov	r31, r0
    3dc4:	67 0c       	add	r6, r7
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(meas_per_ch>2){
    3dc6:	b2 e0       	ldi	r27, 0x02	; 2
    3dc8:	b7 15       	cp	r27, r7
    3dca:	68 f4       	brcc	.+26     	; 0x3de6 <get_ir_sensors+0x118>
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
    3dcc:	66 2d       	mov	r22, r6
    3dce:	c8 01       	movw	r24, r16
    3dd0:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <meas_find_median>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
    3dd4:	f4 01       	movw	r30, r8
    3dd6:	20 81       	ld	r18, Z
    3dd8:	31 81       	ldd	r19, Z+1	; 0x01
    3dda:	82 1b       	sub	r24, r18
    3ddc:	93 0b       	sbc	r25, r19
    3dde:	d7 01       	movw	r26, r14
    3de0:	8d 93       	st	X+, r24
    3de2:	9c 93       	st	X, r25
    3de4:	1f c0       	rjmp	.+62     	; 0x3e24 <get_ir_sensors+0x156>
		}			
		else if(meas_per_ch==2)
    3de6:	b2 e0       	ldi	r27, 0x02	; 2
    3de8:	7b 12       	cpse	r7, r27
    3dea:	0e c0       	rjmp	.+28     	; 0x3e08 <get_ir_sensors+0x13a>
			output_arr[dir] = meas_find_median(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3dec:	61 e0       	ldi	r22, 0x01	; 1
    3dee:	c8 01       	movw	r24, r16
    3df0:	02 97       	sbiw	r24, 0x02	; 2
    3df2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <meas_find_median>
    3df6:	f4 01       	movw	r30, r8
    3df8:	20 81       	ld	r18, Z
    3dfa:	31 81       	ldd	r19, Z+1	; 0x01
    3dfc:	82 1b       	sub	r24, r18
    3dfe:	93 0b       	sbc	r25, r19
    3e00:	d7 01       	movw	r26, r14
    3e02:	8d 93       	st	X+, r24
    3e04:	9c 93       	st	X, r25
    3e06:	0e c0       	rjmp	.+28     	; 0x3e24 <get_ir_sensors+0x156>
		else
			output_arr[dir] = meas[dir][0];
    3e08:	ca 9c       	mul	r12, r10
    3e0a:	f0 01       	movw	r30, r0
    3e0c:	cb 9c       	mul	r12, r11
    3e0e:	f0 0d       	add	r31, r0
    3e10:	da 9c       	mul	r13, r10
    3e12:	f0 0d       	add	r31, r0
    3e14:	11 24       	eor	r1, r1
    3e16:	e2 0d       	add	r30, r2
    3e18:	f3 1d       	adc	r31, r3
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	f7 01       	movw	r30, r14
    3e20:	80 83       	st	Z, r24
    3e22:	91 83       	std	Z+1, r25	; 0x01
    3e24:	ff ef       	ldi	r31, 0xFF	; 255
    3e26:	af 1a       	sub	r10, r31
    3e28:	bf 0a       	sbc	r11, r31
    3e2a:	0c 0d       	add	r16, r12
    3e2c:	1d 1d       	adc	r17, r13
    3e2e:	22 e0       	ldi	r18, 0x02	; 2
    3e30:	82 0e       	add	r8, r18
    3e32:	91 1c       	adc	r9, r1
    3e34:	32 e0       	ldi	r19, 0x02	; 2
    3e36:	e3 0e       	add	r14, r19
    3e38:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++)
    3e3a:	86 e0       	ldi	r24, 0x06	; 6
    3e3c:	a8 16       	cp	r10, r24
    3e3e:	b1 04       	cpc	r11, r1
    3e40:	11 f6       	brne	.-124    	; 0x3dc6 <get_ir_sensors+0xf8>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3e42:	4d be       	out	0x3d, r4	; 61
    3e44:	5e be       	out	0x3e, r5	; 62
    3e46:	0f 90       	pop	r0
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	cf 90       	pop	r12
    3e58:	bf 90       	pop	r11
    3e5a:	af 90       	pop	r10
    3e5c:	9f 90       	pop	r9
    3e5e:	8f 90       	pop	r8
    3e60:	7f 90       	pop	r7
    3e62:	6f 90       	pop	r6
    3e64:	5f 90       	pop	r5
    3e66:	4f 90       	pop	r4
    3e68:	3f 90       	pop	r3
    3e6a:	2f 90       	pop	r2
    3e6c:	08 95       	ret

00003e6e <initialize_ir_baselines>:
	}
	schedule_task(1000,initialize_ir_baselines,NULL);
	schedule_periodic_task(13331, update_ir_baselines, NULL);
}

void initialize_ir_baselines(){
    3e6e:	ef 92       	push	r14
    3e70:	ff 92       	push	r15
    3e72:	0f 93       	push	r16
    3e74:	1f 93       	push	r17
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
	get_ir_sensors(ir_sense_baseline, 13);
    3e7a:	6d e0       	ldi	r22, 0x0D	; 13
    3e7c:	85 e5       	ldi	r24, 0x55	; 85
    3e7e:	96 e2       	ldi	r25, 0x26	; 38
    3e80:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_ir_sensors>
	printf("Baselines:");
    3e84:	83 e1       	ldi	r24, 0x13	; 19
    3e86:	91 e2       	ldi	r25, 0x21	; 33
    3e88:	9f 93       	push	r25
    3e8a:	8f 93       	push	r24
    3e8c:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    3e90:	c5 e5       	ldi	r28, 0x55	; 85
    3e92:	d6 e2       	ldi	r29, 0x26	; 38
    3e94:	0f 2e       	mov	r0, r31
    3e96:	f1 e6       	ldi	r31, 0x61	; 97
    3e98:	ef 2e       	mov	r14, r31
    3e9a:	f6 e2       	ldi	r31, 0x26	; 38
    3e9c:	ff 2e       	mov	r15, r31
    3e9e:	f0 2d       	mov	r31, r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
	for(uint8_t dir=0;dir<6;dir++){
		printf(" %4d", ir_sense_baseline[dir]);
    3ea4:	0e e1       	ldi	r16, 0x1E	; 30
    3ea6:	11 e2       	ldi	r17, 0x21	; 33
    3ea8:	88 81       	ld	r24, Y
    3eaa:	99 81       	ldd	r25, Y+1	; 0x01
    3eac:	22 96       	adiw	r28, 0x02	; 2
    3eae:	9f 93       	push	r25
    3eb0:	8f 93       	push	r24
    3eb2:	1f 93       	push	r17
    3eb4:	0f 93       	push	r16
    3eb6:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
}

void initialize_ir_baselines(){
	get_ir_sensors(ir_sense_baseline, 13);
	printf("Baselines:");
	for(uint8_t dir=0;dir<6;dir++){
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	ce 15       	cp	r28, r14
    3ec4:	df 05       	cpc	r29, r15
    3ec6:	81 f7       	brne	.-32     	; 0x3ea8 <initialize_ir_baselines+0x3a>
		printf(" %4d", ir_sense_baseline[dir]);
	}
	printf("\r\n");	
    3ec8:	85 ea       	ldi	r24, 0xA5	; 165
    3eca:	90 e2       	ldi	r25, 0x20	; 32
    3ecc:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
}
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	08 95       	ret

00003ede <update_ir_baselines>:

void update_ir_baselines(){
    3ede:	cf 92       	push	r12
    3ee0:	df 92       	push	r13
    3ee2:	ef 92       	push	r14
    3ee4:	ff 92       	push	r15
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	2c 97       	sbiw	r28, 0x0c	; 12
    3ef4:	cd bf       	out	0x3d, r28	; 61
    3ef6:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3ef8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3efa:	f8 94       	cli
		if(hp_ir_block_bm){
    3efc:	80 91 ca 28 	lds	r24, 0x28CA
    3f00:	81 11       	cpse	r24, r1
    3f02:	12 c0       	rjmp	.+36     	; 0x3f28 <update_ir_baselines+0x4a>
			return;
		}
		hp_ir_block_bm=0xFF;
    3f04:	8f ef       	ldi	r24, 0xFF	; 255
    3f06:	80 93 ca 28 	sts	0x28CA, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3f0a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	01 96       	adiw	r24, 0x01	; 1
    3f10:	7c 01       	movw	r14, r24
    3f12:	05 e5       	ldi	r16, 0x55	; 85
    3f14:	16 e2       	ldi	r17, 0x26	; 38
    3f16:	0f 2e       	mov	r0, r31
    3f18:	f1 e6       	ldi	r31, 0x61	; 97
    3f1a:	cf 2e       	mov	r12, r31
    3f1c:	f6 e2       	ldi	r31, 0x26	; 38
    3f1e:	df 2e       	mov	r13, r31
    3f20:	f0 2d       	mov	r31, r0
    3f22:	f8 01       	movw	r30, r16
    3f24:	dc 01       	movw	r26, r24
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <update_ir_baselines+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3f28:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    3f2a:	28 c0       	rjmp	.+80     	; 0x3f7c <update_ir_baselines+0x9e>
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    3f2c:	80 81       	ld	r24, Z
    3f2e:	91 81       	ldd	r25, Z+1	; 0x01
    3f30:	8d 93       	st	X+, r24
    3f32:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    3f34:	11 92       	st	Z+, r1
    3f36:	11 92       	st	Z+, r1
			return;
		}
		hp_ir_block_bm=0xFF;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    3f38:	ec 15       	cp	r30, r12
    3f3a:	fd 05       	cpc	r31, r13
    3f3c:	b9 f7       	brne	.-18     	; 0x3f2c <update_ir_baselines+0x4e>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	get_ir_sensors(ir_sense_baseline, 13);
    3f3e:	6d e0       	ldi	r22, 0x0D	; 13
    3f40:	85 e5       	ldi	r24, 0x55	; 85
    3f42:	96 e2       	ldi	r25, 0x26	; 38
    3f44:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_ir_sensors>
    3f48:	f8 01       	movw	r30, r16
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3f4a:	d7 01       	movw	r26, r14
    3f4c:	2d 91       	ld	r18, X+
    3f4e:	3d 91       	ld	r19, X+
    3f50:	7d 01       	movw	r14, r26
    3f52:	80 81       	ld	r24, Z
    3f54:	91 81       	ldd	r25, Z+1	; 0x01
    3f56:	82 0f       	add	r24, r18
    3f58:	93 1f       	adc	r25, r19
    3f5a:	99 23       	and	r25, r25
    3f5c:	0c f4       	brge	.+2      	; 0x3f60 <update_ir_baselines+0x82>
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	95 95       	asr	r25
    3f62:	87 95       	ror	r24
    3f64:	80 83       	st	Z, r24
    3f66:	91 83       	std	Z+1, r25	; 0x01
    3f68:	0e 5f       	subi	r16, 0xFE	; 254
    3f6a:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	get_ir_sensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    3f6c:	0c 15       	cp	r16, r12
    3f6e:	1d 05       	cpc	r17, r13
    3f70:	59 f7       	brne	.-42     	; 0x3f48 <update_ir_baselines+0x6a>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3f72:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3f74:	f8 94       	cli
		hp_ir_block_bm = 0;
    3f76:	10 92 ca 28 	sts	0x28CA, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3f7a:	8f bf       	out	0x3f, r24	; 63
	}

}
    3f7c:	2c 96       	adiw	r28, 0x0c	; 12
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	de bf       	out	0x3e, r29	; 62
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	df 90       	pop	r13
    3f90:	cf 90       	pop	r12
    3f92:	08 95       	ret

00003f94 <check_collisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t check_collisions(){
    3f94:	af 92       	push	r10
    3f96:	bf 92       	push	r11
    3f98:	cf 92       	push	r12
    3f9a:	df 92       	push	r13
    3f9c:	ef 92       	push	r14
    3f9e:	ff 92       	push	r15
    3fa0:	0f 93       	push	r16
    3fa2:	1f 93       	push	r17
    3fa4:	cf 93       	push	r28
    3fa6:	df 93       	push	r29
    3fa8:	cd b7       	in	r28, 0x3d	; 61
    3faa:	de b7       	in	r29, 0x3e	; 62
    3fac:	68 97       	sbiw	r28, 0x18	; 24
    3fae:	cd bf       	out	0x3d, r28	; 61
    3fb0:	de bf       	out	0x3e, r29	; 62
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	80 93 77 27 	sts	0x2777, r24
    3fb8:	80 93 b0 27 	sts	0x27B0, r24
    3fbc:	80 93 e9 27 	sts	0x27E9, r24
    3fc0:	80 93 22 28 	sts	0x2822, r24
    3fc4:	80 93 5b 28 	sts	0x285B, r24
    3fc8:	80 93 94 28 	sts	0x2894, r24

void ir_led_init();
void set_all_ir_powers(uint16_t power);
void ir_led_on(uint8_t direction);
void ir_led_off(uint8_t direction);
    3fcc:	e0 90 d9 28 	lds	r14, 0x28D9
    3fd0:	f0 90 da 28 	lds	r15, 0x28DA
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	91 e0       	ldi	r25, 0x01	; 1
    3fd8:	0e 94 44 1c 	call	0x3888	; 0x3888 <set_all_ir_powers>
	//printf("coll base: ");
	get_ir_sensors(baseline_meas, 5);
    3fdc:	65 e0       	ldi	r22, 0x05	; 5
    3fde:	ce 01       	movw	r24, r28
    3fe0:	01 96       	adiw	r24, 0x01	; 1
    3fe2:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_ir_sensors>
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_on(i);
    3fe6:	10 e0       	ldi	r17, 0x00	; 0
    3fe8:	81 2f       	mov	r24, r17
    3fea:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <ir_led_on>
    3fee:	1f 5f       	subi	r17, 0xFF	; 255
    3ff0:	16 30       	cpi	r17, 0x06	; 6
    3ff2:	d1 f7       	brne	.-12     	; 0x3fe8 <check_collisions+0x54>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    3ff4:	8f ec       	ldi	r24, 0xCF	; 207
    3ff6:	97 e0       	ldi	r25, 0x07	; 7
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <check_collisions+0x64>
    3ffc:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    3ffe:	00 c0       	rjmp	.+0      	; 0x4000 <__stack+0x1>
	busy_delay_us(250);	
	//delay_ms(250);
	//printf("Coll results: ");
	get_ir_sensors(measured_vals, 5);
    4000:	65 e0       	ldi	r22, 0x05	; 5
    4002:	ce 01       	movw	r24, r28
    4004:	0d 96       	adiw	r24, 0x0d	; 13
    4006:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_ir_sensors>
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
    400a:	10 e0       	ldi	r17, 0x00	; 0
    400c:	81 2f       	mov	r24, r17
    400e:	0e 94 11 1c 	call	0x3822	; 0x3822 <ir_led_off>
    4012:	1f 5f       	subi	r17, 0xFF	; 255
    4014:	16 30       	cpi	r17, 0x06	; 6
    4016:	d1 f7       	brne	.-12     	; 0x400c <__stack+0xd>
    4018:	ce 01       	movw	r24, r28
    401a:	0d 96       	adiw	r24, 0x0d	; 13
    401c:	9e 01       	movw	r18, r28
    401e:	2f 5f       	subi	r18, 0xFF	; 255
    4020:	3f 4f       	sbci	r19, 0xFF	; 255
    4022:	59 01       	movw	r10, r18
    4024:	ee e1       	ldi	r30, 0x1E	; 30
    4026:	f7 e2       	ldi	r31, 0x27	; 39
    4028:	40 e0       	ldi	r20, 0x00	; 0
    402a:	50 e0       	ldi	r21, 0x00	; 0
    402c:	10 e0       	ldi	r17, 0x00	; 0
		int16_t measure_above_base = measured_vals[i]-baseline_meas[i];
		//printf("%4d ", measure_above_base);
		if(measure_above_base<min_collision_vals[i]) min_collision_vals[i]=measure_above_base;
		//printf("%4d ", measure_above_base-min_collision_vals[i]);
		if((measure_above_base-min_collision_vals[i])>20){
			dirs = dirs|(1<<i);
    402e:	61 e0       	ldi	r22, 0x01	; 1
    4030:	70 e0       	ldi	r23, 0x00	; 0
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
	
	for(uint8_t i=0;i<6;i++)
	{
		int16_t measure_above_base = measured_vals[i]-baseline_meas[i];
    4032:	dc 01       	movw	r26, r24
    4034:	2d 91       	ld	r18, X+
    4036:	3d 91       	ld	r19, X+
    4038:	cd 01       	movw	r24, r26
    403a:	d5 01       	movw	r26, r10
    403c:	cd 90       	ld	r12, X+
    403e:	dd 90       	ld	r13, X+
    4040:	5d 01       	movw	r10, r26
    4042:	2c 19       	sub	r18, r12
    4044:	3d 09       	sbc	r19, r13
		//printf("%4d ", measure_above_base);
		if(measure_above_base<min_collision_vals[i]) min_collision_vals[i]=measure_above_base;
    4046:	c0 80       	ld	r12, Z
    4048:	d1 80       	ldd	r13, Z+1	; 0x01
    404a:	2c 15       	cp	r18, r12
    404c:	3d 05       	cpc	r19, r13
    404e:	1c f4       	brge	.+6      	; 0x4056 <__stack+0x57>
    4050:	20 83       	st	Z, r18
    4052:	31 83       	std	Z+1, r19	; 0x01
    4054:	0d c0       	rjmp	.+26     	; 0x4070 <__stack+0x71>
		//printf("%4d ", measure_above_base-min_collision_vals[i]);
		if((measure_above_base-min_collision_vals[i])>20){
    4056:	2c 19       	sub	r18, r12
    4058:	3d 09       	sbc	r19, r13
    405a:	25 31       	cpi	r18, 0x15	; 21
    405c:	31 05       	cpc	r19, r1
    405e:	44 f0       	brlt	.+16     	; 0x4070 <__stack+0x71>
			dirs = dirs|(1<<i);
    4060:	9b 01       	movw	r18, r22
    4062:	04 2e       	mov	r0, r20
    4064:	02 c0       	rjmp	.+4      	; 0x406a <__stack+0x6b>
    4066:	22 0f       	add	r18, r18
    4068:	33 1f       	adc	r19, r19
    406a:	0a 94       	dec	r0
    406c:	e2 f7       	brpl	.-8      	; 0x4066 <__stack+0x67>
    406e:	12 2b       	or	r17, r18
    4070:	4f 5f       	subi	r20, 0xFF	; 255
    4072:	5f 4f       	sbci	r21, 0xFF	; 255
    4074:	32 96       	adiw	r30, 0x02	; 2
	//printf("Coll results: ");
	get_ir_sensors(measured_vals, 5);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
	
	for(uint8_t i=0;i<6;i++)
    4076:	46 30       	cpi	r20, 0x06	; 6
    4078:	51 05       	cpc	r21, r1
    407a:	d9 f6       	brne	.-74     	; 0x4032 <__stack+0x33>
		if((measure_above_base-min_collision_vals[i])>20){
			dirs = dirs|(1<<i);
		}
	}
	//printf("\r\n");
	set_all_ir_powers(curr_power);
    407c:	c7 01       	movw	r24, r14
    407e:	0e 94 44 1c 	call	0x3888	; 0x3888 <set_all_ir_powers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    4082:	10 92 77 27 	sts	0x2777, r1
    4086:	10 92 b0 27 	sts	0x27B0, r1
    408a:	10 92 e9 27 	sts	0x27E9, r1
    408e:	10 92 22 28 	sts	0x2822, r1
    4092:	10 92 5b 28 	sts	0x285B, r1
    4096:	10 92 94 28 	sts	0x2894, r1
	return dirs;
}	
    409a:	81 2f       	mov	r24, r17
    409c:	68 96       	adiw	r28, 0x18	; 24
    409e:	cd bf       	out	0x3d, r28	; 61
    40a0:	de bf       	out	0x3e, r29	; 62
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	1f 91       	pop	r17
    40a8:	0f 91       	pop	r16
    40aa:	ff 90       	pop	r15
    40ac:	ef 90       	pop	r14
    40ae:	df 90       	pop	r13
    40b0:	cf 90       	pop	r12
    40b2:	bf 90       	pop	r11
    40b4:	af 90       	pop	r10
    40b6:	08 95       	ret

000040b8 <stop_move>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    40b8:	83 e0       	ldi	r24, 0x03	; 3
    40ba:	80 93 01 08 	sts	0x0801, r24
    40be:	80 93 41 08 	sts	0x0841, r24
    40c2:	80 93 01 09 	sts	0x0901, r24
    40c6:	93 e3       	ldi	r25, 0x33	; 51
    40c8:	90 93 46 06 	sts	0x0646, r25
    40cc:	80 93 66 06 	sts	0x0666, r24
    40d0:	10 92 a1 24 	sts	0x24A1, r1
    40d4:	80 91 45 24 	lds	r24, 0x2445
    40d8:	90 91 46 24 	lds	r25, 0x2446
    40dc:	0e 94 8a 39 	call	0x7314	; 0x7314 <remove_task>
    40e0:	08 95       	ret

000040e2 <is_moving>:
    40e2:	80 91 a1 24 	lds	r24, 0x24A1
    40e6:	88 23       	and	r24, r24
    40e8:	24 f4       	brge	.+8      	; 0x40f2 <is_moving+0x10>
    40ea:	80 91 a1 24 	lds	r24, 0x24A1
    40ee:	87 70       	andi	r24, 0x07	; 7
    40f0:	08 95       	ret
    40f2:	8f ef       	ldi	r24, 0xFF	; 255
    40f4:	08 95       	ret

000040f6 <move_steps>:
    40f6:	4f 92       	push	r4
    40f8:	5f 92       	push	r5
    40fa:	6f 92       	push	r6
    40fc:	7f 92       	push	r7
    40fe:	8f 92       	push	r8
    4100:	9f 92       	push	r9
    4102:	af 92       	push	r10
    4104:	bf 92       	push	r11
    4106:	cf 92       	push	r12
    4108:	df 92       	push	r13
    410a:	ef 92       	push	r14
    410c:	ff 92       	push	r15
    410e:	0f 93       	push	r16
    4110:	1f 93       	push	r17
    4112:	cf 93       	push	r28
    4114:	df 93       	push	r29
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	29 97       	sbiw	r28, 0x09	; 9
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	18 2f       	mov	r17, r24
    4122:	7b 01       	movw	r14, r22
    4124:	0e 94 71 20 	call	0x40e2	; 0x40e2 <is_moving>
    4128:	88 23       	and	r24, r24
    412a:	0c f0       	brlt	.+2      	; 0x412e <move_steps+0x38>
    412c:	25 c1       	rjmp	.+586    	; 0x4378 <move_steps+0x282>
    412e:	81 2f       	mov	r24, r17
    4130:	87 70       	andi	r24, 0x07	; 7
    4132:	80 68       	ori	r24, 0x80	; 128
    4134:	80 93 a1 24 	sts	0x24A1, r24
    4138:	a0 90 24 26 	lds	r10, 0x2624
    413c:	b0 90 25 26 	lds	r11, 0x2625
    4140:	aa 0c       	add	r10, r10
    4142:	bb 1c       	adc	r11, r11
    4144:	aa 0c       	add	r10, r10
    4146:	bb 1c       	adc	r11, r11
    4148:	aa 0c       	add	r10, r10
    414a:	bb 1c       	adc	r11, r11
    414c:	aa 0c       	add	r10, r10
    414e:	bb 1c       	adc	r11, r11
    4150:	aa 0c       	add	r10, r10
    4152:	bb 1c       	adc	r11, r11
    4154:	80 90 ab 26 	lds	r8, 0x26AB
    4158:	90 90 ac 26 	lds	r9, 0x26AC
    415c:	88 0c       	add	r8, r8
    415e:	99 1c       	adc	r9, r9
    4160:	88 0c       	add	r8, r8
    4162:	99 1c       	adc	r9, r9
    4164:	88 0c       	add	r8, r8
    4166:	99 1c       	adc	r9, r9
    4168:	88 0c       	add	r8, r8
    416a:	99 1c       	adc	r9, r9
    416c:	88 0c       	add	r8, r8
    416e:	99 1c       	adc	r9, r9
    4170:	81 2f       	mov	r24, r17
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	fc 01       	movw	r30, r24
    4176:	ee 0f       	add	r30, r30
    4178:	ff 1f       	adc	r31, r31
    417a:	e8 0f       	add	r30, r24
    417c:	f9 1f       	adc	r31, r25
    417e:	ee 0f       	add	r30, r30
    4180:	ff 1f       	adc	r31, r31
    4182:	e9 56       	subi	r30, 0x69	; 105
    4184:	f7 4d       	sbci	r31, 0xD7	; 215
    4186:	ce 01       	movw	r24, r28
    4188:	01 96       	adiw	r24, 0x01	; 1
    418a:	6c 01       	movw	r12, r24
    418c:	9e 01       	movw	r18, r28
    418e:	29 5f       	subi	r18, 0xF9	; 249
    4190:	3f 4f       	sbci	r19, 0xFF	; 255
    4192:	29 01       	movw	r4, r18
    4194:	00 e0       	ldi	r16, 0x00	; 0
    4196:	10 e0       	ldi	r17, 0x00	; 0
    4198:	3f 01       	movw	r6, r30
    419a:	60 81       	ld	r22, Z
    419c:	71 81       	ldd	r23, Z+1	; 0x01
    419e:	61 15       	cp	r22, r1
    41a0:	71 05       	cpc	r23, r1
    41a2:	31 f4       	brne	.+12     	; 0x41b0 <move_steps+0xba>
    41a4:	dc 01       	movw	r26, r24
    41a6:	1d 92       	st	X+, r1
    41a8:	1c 92       	st	X, r1
    41aa:	d9 01       	movw	r26, r18
    41ac:	1c 92       	st	X, r1
    41ae:	19 c0       	rjmp	.+50     	; 0x41e2 <move_steps+0xec>
    41b0:	ab 01       	movw	r20, r22
    41b2:	77 23       	and	r23, r23
    41b4:	24 f4       	brge	.+8      	; 0x41be <move_steps+0xc8>
    41b6:	44 27       	eor	r20, r20
    41b8:	55 27       	eor	r21, r21
    41ba:	46 1b       	sub	r20, r22
    41bc:	57 0b       	sbc	r21, r23
    41be:	4a 0d       	add	r20, r10
    41c0:	5b 1d       	adc	r21, r11
    41c2:	dc 01       	movw	r26, r24
    41c4:	4d 93       	st	X+, r20
    41c6:	5c 93       	st	X, r21
    41c8:	d3 01       	movw	r26, r6
    41ca:	11 96       	adiw	r26, 0x01	; 1
    41cc:	6c 91       	ld	r22, X
    41ce:	66 0f       	add	r22, r22
    41d0:	66 0b       	sbc	r22, r22
    41d2:	66 0f       	add	r22, r22
    41d4:	6f 5f       	subi	r22, 0xFF	; 255
    41d6:	d9 01       	movw	r26, r18
    41d8:	6c 93       	st	X, r22
    41da:	08 0d       	add	r16, r8
    41dc:	19 1d       	adc	r17, r9
    41de:	04 0f       	add	r16, r20
    41e0:	15 1f       	adc	r17, r21
    41e2:	32 96       	adiw	r30, 0x02	; 2
    41e4:	02 96       	adiw	r24, 0x02	; 2
    41e6:	2f 5f       	subi	r18, 0xFF	; 255
    41e8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ea:	84 15       	cp	r24, r4
    41ec:	95 05       	cpc	r25, r5
    41ee:	a1 f6       	brne	.-88     	; 0x4198 <move_steps+0xa2>
    41f0:	40 e0       	ldi	r20, 0x00	; 0
    41f2:	59 e0       	ldi	r21, 0x09	; 9
    41f4:	fa 01       	movw	r30, r20
    41f6:	06 a3       	std	Z+38, r16	; 0x26
    41f8:	17 a3       	std	Z+39, r17	; 0x27
    41fa:	a0 e4       	ldi	r26, 0x40	; 64
    41fc:	b8 e0       	ldi	r27, 0x08	; 8
    41fe:	96 96       	adiw	r26, 0x26	; 38
    4200:	0d 93       	st	X+, r16
    4202:	1c 93       	st	X, r17
    4204:	97 97       	sbiw	r26, 0x27	; 39
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	98 e0       	ldi	r25, 0x08	; 8
    420a:	fc 01       	movw	r30, r24
    420c:	06 a3       	std	Z+38, r16	; 0x26
    420e:	17 a3       	std	Z+39, r17	; 0x27
    4210:	29 81       	ldd	r18, Y+1	; 0x01
    4212:	3a 81       	ldd	r19, Y+2	; 0x02
    4214:	22 a7       	std	Z+42, r18	; 0x2a
    4216:	33 a7       	std	Z+43, r19	; 0x2b
    4218:	20 a7       	std	Z+40, r18	; 0x28
    421a:	31 a7       	std	Z+41, r19	; 0x29
    421c:	8b 81       	ldd	r24, Y+3	; 0x03
    421e:	9c 81       	ldd	r25, Y+4	; 0x04
    4220:	9a 96       	adiw	r26, 0x2a	; 42
    4222:	8d 93       	st	X+, r24
    4224:	9c 93       	st	X, r25
    4226:	9b 97       	sbiw	r26, 0x2b	; 43
    4228:	98 96       	adiw	r26, 0x28	; 40
    422a:	8d 93       	st	X+, r24
    422c:	9c 93       	st	X, r25
    422e:	99 97       	sbiw	r26, 0x29	; 41
    4230:	8d 81       	ldd	r24, Y+5	; 0x05
    4232:	9e 81       	ldd	r25, Y+6	; 0x06
    4234:	da 01       	movw	r26, r20
    4236:	9a 96       	adiw	r26, 0x2a	; 42
    4238:	8d 93       	st	X+, r24
    423a:	9c 93       	st	X, r25
    423c:	9b 97       	sbiw	r26, 0x2b	; 43
    423e:	98 96       	adiw	r26, 0x28	; 40
    4240:	8d 93       	st	X+, r24
    4242:	9c 93       	st	X, r25
    4244:	99 97       	sbiw	r26, 0x29	; 41
    4246:	a0 90 ab 26 	lds	r10, 0x26AB
    424a:	b0 90 ac 26 	lds	r11, 0x26AC
    424e:	aa 0c       	add	r10, r10
    4250:	bb 1c       	adc	r11, r11
    4252:	aa 0c       	add	r10, r10
    4254:	bb 1c       	adc	r11, r11
    4256:	aa 0c       	add	r10, r10
    4258:	bb 1c       	adc	r11, r11
    425a:	aa 0c       	add	r10, r10
    425c:	bb 1c       	adc	r11, r11
    425e:	aa 0c       	add	r10, r10
    4260:	bb 1c       	adc	r11, r11
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	68 94       	set
    426a:	88 24       	eor	r8, r8
    426c:	86 f8       	bld	r8, 6
    426e:	99 24       	eor	r9, r9
    4270:	93 f8       	bld	r9, 3
    4272:	61 2c       	mov	r6, r1
    4274:	68 94       	set
    4276:	77 24       	eor	r7, r7
    4278:	73 f8       	bld	r7, 3
    427a:	0f 2e       	mov	r0, r31
    427c:	41 2c       	mov	r4, r1
    427e:	f9 e0       	ldi	r31, 0x09	; 9
    4280:	5f 2e       	mov	r5, r31
    4282:	f0 2d       	mov	r31, r0
    4284:	d6 01       	movw	r26, r12
    4286:	ed 91       	ld	r30, X+
    4288:	fd 91       	ld	r31, X+
    428a:	6d 01       	movw	r12, r26
    428c:	30 97       	sbiw	r30, 0x00	; 0
    428e:	69 f1       	breq	.+90     	; 0x42ea <move_steps+0x1f4>
    4290:	41 30       	cpi	r20, 0x01	; 1
    4292:	81 f0       	breq	.+32     	; 0x42b4 <move_steps+0x1be>
    4294:	18 f0       	brcs	.+6      	; 0x429c <move_steps+0x1a6>
    4296:	42 30       	cpi	r20, 0x02	; 2
    4298:	c9 f0       	breq	.+50     	; 0x42cc <move_steps+0x1d6>
    429a:	23 c0       	rjmp	.+70     	; 0x42e2 <move_steps+0x1ec>
    429c:	c8 01       	movw	r24, r16
    429e:	82 1b       	sub	r24, r18
    42a0:	93 0b       	sbc	r25, r19
    42a2:	b8 01       	movw	r22, r16
    42a4:	0e 94 0c 50 	call	0xa018	; 0xa018 <__udivmodhi4>
    42a8:	d3 01       	movw	r26, r6
    42aa:	90 96       	adiw	r26, 0x20	; 32
    42ac:	8d 93       	st	X+, r24
    42ae:	9c 93       	st	X, r25
    42b0:	91 97       	sbiw	r26, 0x21	; 33
    42b2:	17 c0       	rjmp	.+46     	; 0x42e2 <move_steps+0x1ec>
    42b4:	c8 01       	movw	r24, r16
    42b6:	82 1b       	sub	r24, r18
    42b8:	93 0b       	sbc	r25, r19
    42ba:	b8 01       	movw	r22, r16
    42bc:	0e 94 0c 50 	call	0xa018	; 0xa018 <__udivmodhi4>
    42c0:	d4 01       	movw	r26, r8
    42c2:	90 96       	adiw	r26, 0x20	; 32
    42c4:	8d 93       	st	X+, r24
    42c6:	9c 93       	st	X, r25
    42c8:	91 97       	sbiw	r26, 0x21	; 33
    42ca:	0b c0       	rjmp	.+22     	; 0x42e2 <move_steps+0x1ec>
    42cc:	c8 01       	movw	r24, r16
    42ce:	82 1b       	sub	r24, r18
    42d0:	93 0b       	sbc	r25, r19
    42d2:	b8 01       	movw	r22, r16
    42d4:	0e 94 0c 50 	call	0xa018	; 0xa018 <__udivmodhi4>
    42d8:	d2 01       	movw	r26, r4
    42da:	90 96       	adiw	r26, 0x20	; 32
    42dc:	8d 93       	st	X+, r24
    42de:	9c 93       	st	X, r25
    42e0:	91 97       	sbiw	r26, 0x21	; 33
    42e2:	2a 0d       	add	r18, r10
    42e4:	3b 1d       	adc	r19, r11
    42e6:	2e 0f       	add	r18, r30
    42e8:	3f 1f       	adc	r19, r31
    42ea:	4f 5f       	subi	r20, 0xFF	; 255
    42ec:	43 30       	cpi	r20, 0x03	; 3
    42ee:	51 f6       	brne	.-108    	; 0x4284 <move_steps+0x18e>
    42f0:	20 17       	cp	r18, r16
    42f2:	31 07       	cpc	r19, r17
    42f4:	09 f4       	brne	.+2      	; 0x42f8 <move_steps+0x202>
    42f6:	44 c0       	rjmp	.+136    	; 0x4380 <move_steps+0x28a>
    42f8:	1f 93       	push	r17
    42fa:	0f 93       	push	r16
    42fc:	3f 93       	push	r19
    42fe:	2f 93       	push	r18
    4300:	8a ee       	ldi	r24, 0xEA	; 234
    4302:	95 e0       	ldi	r25, 0x05	; 5
    4304:	9f 93       	push	r25
    4306:	8f 93       	push	r24
    4308:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	33 c0       	rjmp	.+102    	; 0x4380 <move_steps+0x28a>
    431a:	e0 e0       	ldi	r30, 0x00	; 0
    431c:	f9 e0       	ldi	r31, 0x09	; 9
    431e:	81 81       	ldd	r24, Z+1	; 0x01
    4320:	80 61       	ori	r24, 0x10	; 16
    4322:	81 83       	std	Z+1, r24	; 0x01
    4324:	07 c0       	rjmp	.+14     	; 0x4334 <move_steps+0x23e>
    4326:	18 16       	cp	r1, r24
    4328:	2c f4       	brge	.+10     	; 0x4334 <move_steps+0x23e>
    432a:	e0 e0       	ldi	r30, 0x00	; 0
    432c:	f9 e0       	ldi	r31, 0x09	; 9
    432e:	81 81       	ldd	r24, Z+1	; 0x01
    4330:	80 62       	ori	r24, 0x20	; 32
    4332:	81 83       	std	Z+1, r24	; 0x01
    4334:	98 01       	movw	r18, r16
    4336:	d7 01       	movw	r26, r14
    4338:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <__umulhisi3>
    433c:	68 94       	set
    433e:	14 f8       	bld	r1, 4
    4340:	96 95       	lsr	r25
    4342:	87 95       	ror	r24
    4344:	77 95       	ror	r23
    4346:	67 95       	ror	r22
    4348:	16 94       	lsr	r1
    434a:	d1 f7       	brne	.-12     	; 0x4340 <move_steps+0x24a>
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	4c e5       	ldi	r20, 0x5C	; 92
    4352:	50 e2       	ldi	r21, 0x20	; 32
    4354:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    4358:	80 93 45 24 	sts	0x2445, r24
    435c:	90 93 46 24 	sts	0x2446, r25
    4360:	89 2b       	or	r24, r25
    4362:	61 f4       	brne	.+24     	; 0x437c <move_steps+0x286>
    4364:	89 e2       	ldi	r24, 0x29	; 41
    4366:	91 e2       	ldi	r25, 0x21	; 33
    4368:	9f 93       	push	r25
    436a:	8f 93       	push	r24
    436c:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	30 c0       	rjmp	.+96     	; 0x43d8 <move_steps+0x2e2>
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	2e c0       	rjmp	.+92     	; 0x43d8 <move_steps+0x2e2>
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	2c c0       	rjmp	.+88     	; 0x43d8 <move_steps+0x2e2>
    4380:	8f 81       	ldd	r24, Y+7	; 0x07
    4382:	88 23       	and	r24, r24
    4384:	34 f4       	brge	.+12     	; 0x4392 <move_steps+0x29c>
    4386:	e0 e0       	ldi	r30, 0x00	; 0
    4388:	f8 e0       	ldi	r31, 0x08	; 8
    438a:	81 81       	ldd	r24, Z+1	; 0x01
    438c:	80 61       	ori	r24, 0x10	; 16
    438e:	81 83       	std	Z+1, r24	; 0x01
    4390:	1a c0       	rjmp	.+52     	; 0x43c6 <move_steps+0x2d0>
    4392:	18 16       	cp	r1, r24
    4394:	c4 f4       	brge	.+48     	; 0x43c6 <move_steps+0x2d0>
    4396:	e0 e0       	ldi	r30, 0x00	; 0
    4398:	f8 e0       	ldi	r31, 0x08	; 8
    439a:	81 81       	ldd	r24, Z+1	; 0x01
    439c:	80 62       	ori	r24, 0x20	; 32
    439e:	81 83       	std	Z+1, r24	; 0x01
    43a0:	12 c0       	rjmp	.+36     	; 0x43c6 <move_steps+0x2d0>
    43a2:	e0 e4       	ldi	r30, 0x40	; 64
    43a4:	f8 e0       	ldi	r31, 0x08	; 8
    43a6:	81 81       	ldd	r24, Z+1	; 0x01
    43a8:	80 61       	ori	r24, 0x10	; 16
    43aa:	81 83       	std	Z+1, r24	; 0x01
    43ac:	07 c0       	rjmp	.+14     	; 0x43bc <move_steps+0x2c6>
    43ae:	18 16       	cp	r1, r24
    43b0:	74 f4       	brge	.+28     	; 0x43ce <move_steps+0x2d8>
    43b2:	e0 e4       	ldi	r30, 0x40	; 64
    43b4:	f8 e0       	ldi	r31, 0x08	; 8
    43b6:	81 81       	ldd	r24, Z+1	; 0x01
    43b8:	80 62       	ori	r24, 0x20	; 32
    43ba:	81 83       	std	Z+1, r24	; 0x01
    43bc:	89 85       	ldd	r24, Y+9	; 0x09
    43be:	88 23       	and	r24, r24
    43c0:	0c f0       	brlt	.+2      	; 0x43c4 <move_steps+0x2ce>
    43c2:	b1 cf       	rjmp	.-158    	; 0x4326 <move_steps+0x230>
    43c4:	aa cf       	rjmp	.-172    	; 0x431a <move_steps+0x224>
    43c6:	88 85       	ldd	r24, Y+8	; 0x08
    43c8:	88 23       	and	r24, r24
    43ca:	8c f7       	brge	.-30     	; 0x43ae <move_steps+0x2b8>
    43cc:	ea cf       	rjmp	.-44     	; 0x43a2 <move_steps+0x2ac>
    43ce:	89 85       	ldd	r24, Y+9	; 0x09
    43d0:	88 23       	and	r24, r24
    43d2:	0c f0       	brlt	.+2      	; 0x43d6 <move_steps+0x2e0>
    43d4:	a8 cf       	rjmp	.-176    	; 0x4326 <move_steps+0x230>
    43d6:	a1 cf       	rjmp	.-190    	; 0x431a <move_steps+0x224>
    43d8:	29 96       	adiw	r28, 0x09	; 9
    43da:	cd bf       	out	0x3d, r28	; 61
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	1f 91       	pop	r17
    43e4:	0f 91       	pop	r16
    43e6:	ff 90       	pop	r15
    43e8:	ef 90       	pop	r14
    43ea:	df 90       	pop	r13
    43ec:	cf 90       	pop	r12
    43ee:	bf 90       	pop	r11
    43f0:	af 90       	pop	r10
    43f2:	9f 90       	pop	r9
    43f4:	8f 90       	pop	r8
    43f6:	7f 90       	pop	r7
    43f8:	6f 90       	pop	r6
    43fa:	5f 90       	pop	r5
    43fc:	4f 90       	pop	r4
    43fe:	08 95       	ret

00004400 <walk>:
    4400:	8f 92       	push	r8
    4402:	9f 92       	push	r9
    4404:	af 92       	push	r10
    4406:	bf 92       	push	r11
    4408:	ff 92       	push	r15
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	f8 2e       	mov	r15, r24
    4414:	eb 01       	movw	r28, r22
    4416:	e8 2f       	mov	r30, r24
    4418:	f0 e0       	ldi	r31, 0x00	; 0
    441a:	ee 0f       	add	r30, r30
    441c:	ff 1f       	adc	r31, r31
    441e:	e1 5d       	subi	r30, 0xD1	; 209
    4420:	f8 4d       	sbci	r31, 0xD8	; 216
    4422:	00 81       	ld	r16, Z
    4424:	11 81       	ldd	r17, Z+1	; 0x01
    4426:	86 ee       	ldi	r24, 0xE6	; 230
    4428:	93 e0       	ldi	r25, 0x03	; 3
    442a:	80 1b       	sub	r24, r16
    442c:	91 0b       	sbc	r25, r17
    442e:	8f 3c       	cpi	r24, 0xCF	; 207
    4430:	97 40       	sbci	r25, 0x07	; 7
    4432:	60 f4       	brcc	.+24     	; 0x444c <walk+0x4c>
    4434:	83 e5       	ldi	r24, 0x53	; 83
    4436:	91 e2       	ldi	r25, 0x21	; 33
    4438:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
    443c:	85 e0       	ldi	r24, 0x05	; 5
    443e:	8f 15       	cp	r24, r15
    4440:	18 f0       	brcs	.+6      	; 0x4448 <walk+0x48>
    4442:	08 e5       	ldi	r16, 0x58	; 88
    4444:	12 e0       	ldi	r17, 0x02	; 2
    4446:	02 c0       	rjmp	.+4      	; 0x444c <walk+0x4c>
    4448:	00 ed       	ldi	r16, 0xD0	; 208
    444a:	17 e0       	ldi	r17, 0x07	; 7
    444c:	be 01       	movw	r22, r28
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 1f 48 	call	0x903e	; 0x903e <__floatunsisf>
    4456:	4b 01       	movw	r8, r22
    4458:	5c 01       	movw	r10, r24
    445a:	b8 01       	movw	r22, r16
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	0e 94 1f 48 	call	0x903e	; 0x903e <__floatunsisf>
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	4a e7       	ldi	r20, 0x7A	; 122
    446a:	54 e4       	ldi	r21, 0x44	; 68
    446c:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    4470:	9b 01       	movw	r18, r22
    4472:	ac 01       	movw	r20, r24
    4474:	c5 01       	movw	r24, r10
    4476:	b4 01       	movw	r22, r8
    4478:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    447c:	4b 01       	movw	r8, r22
    447e:	5c 01       	movw	r10, r24
    4480:	8a e0       	ldi	r24, 0x0A	; 10
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    4488:	c5 01       	movw	r24, r10
    448a:	b4 01       	movw	r22, r8
    448c:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    4490:	06 2f       	mov	r16, r22
    4492:	17 2f       	mov	r17, r23
    4494:	7f 93       	push	r23
    4496:	6f 93       	push	r22
    4498:	df 93       	push	r29
    449a:	cf 93       	push	r28
    449c:	1f 92       	push	r1
    449e:	ff 92       	push	r15
    44a0:	8c ea       	ldi	r24, 0xAC	; 172
    44a2:	95 e0       	ldi	r25, 0x05	; 5
    44a4:	9f 93       	push	r25
    44a6:	8f 93       	push	r24
    44a8:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    44ac:	8a e0       	ldi	r24, 0x0A	; 10
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    44b4:	60 2f       	mov	r22, r16
    44b6:	71 2f       	mov	r23, r17
    44b8:	8f 2d       	mov	r24, r15
    44ba:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <move_steps>
    44be:	8d b7       	in	r24, 0x3d	; 61
    44c0:	9e b7       	in	r25, 0x3e	; 62
    44c2:	08 96       	adiw	r24, 0x08	; 8
    44c4:	8d bf       	out	0x3d, r24	; 61
    44c6:	9e bf       	out	0x3e, r25	; 62
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	1f 91       	pop	r17
    44ce:	0f 91       	pop	r16
    44d0:	ff 90       	pop	r15
    44d2:	bf 90       	pop	r11
    44d4:	af 90       	pop	r10
    44d6:	9f 90       	pop	r9
    44d8:	8f 90       	pop	r8
    44da:	08 95       	ret

000044dc <set_mm_per_kilostep>:
    44dc:	e8 2f       	mov	r30, r24
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	ee 0f       	add	r30, r30
    44e2:	ff 1f       	adc	r31, r31
    44e4:	e1 5d       	subi	r30, 0xD1	; 209
    44e6:	f8 4d       	sbci	r31, 0xD8	; 216
    44e8:	60 83       	st	Z, r22
    44ea:	71 83       	std	Z+1, r23	; 0x01
    44ec:	08 95       	ret

000044ee <read_motor_settings>:
    44ee:	9f 92       	push	r9
    44f0:	af 92       	push	r10
    44f2:	bf 92       	push	r11
    44f4:	cf 92       	push	r12
    44f6:	df 92       	push	r13
    44f8:	ef 92       	push	r14
    44fa:	ff 92       	push	r15
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	c0 e1       	ldi	r28, 0x10	; 16
    4506:	d0 e0       	ldi	r29, 0x00	; 0
    4508:	18 c0       	rjmp	.+48     	; 0x453a <read_motor_settings+0x4c>
    450a:	ce 01       	movw	r24, r28
    450c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_read_byte>
    4510:	98 2e       	mov	r9, r24
    4512:	ce 01       	movw	r24, r28
    4514:	01 96       	adiw	r24, 0x01	; 1
    4516:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_read_byte>
    451a:	f9 2c       	mov	r15, r9
    451c:	e1 2c       	mov	r14, r1
    451e:	8e 29       	or	r24, r14
    4520:	9f 29       	or	r25, r15
    4522:	f6 01       	movw	r30, r12
    4524:	81 93       	st	Z+, r24
    4526:	91 93       	st	Z+, r25
    4528:	6f 01       	movw	r12, r30
    452a:	22 96       	adiw	r28, 0x02	; 2
    452c:	c0 17       	cp	r28, r16
    452e:	d1 07       	cpc	r29, r17
    4530:	61 f7       	brne	.-40     	; 0x450a <read_motor_settings+0x1c>
    4532:	e8 01       	movw	r28, r16
    4534:	00 34       	cpi	r16, 0x40	; 64
    4536:	11 05       	cpc	r17, r1
    4538:	41 f0       	breq	.+16     	; 0x454a <read_motor_settings+0x5c>
    453a:	ce 01       	movw	r24, r28
    453c:	89 57       	subi	r24, 0x79	; 121
    453e:	97 4d       	sbci	r25, 0xD7	; 215
    4540:	6c 01       	movw	r12, r24
    4542:	8e 01       	movw	r16, r28
    4544:	0a 5f       	subi	r16, 0xFA	; 250
    4546:	1f 4f       	sbci	r17, 0xFF	; 255
    4548:	e0 cf       	rjmp	.-64     	; 0x450a <read_motor_settings+0x1c>
    454a:	cf e2       	ldi	r28, 0x2F	; 47
    454c:	d7 e2       	ldi	r29, 0x27	; 39
    454e:	c8 01       	movw	r24, r16
    4550:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_read_byte>
    4554:	f8 2e       	mov	r15, r24
    4556:	c8 01       	movw	r24, r16
    4558:	01 96       	adiw	r24, 0x01	; 1
    455a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_read_byte>
    455e:	bf 2c       	mov	r11, r15
    4560:	a1 2c       	mov	r10, r1
    4562:	8a 29       	or	r24, r10
    4564:	9b 29       	or	r25, r11
    4566:	89 93       	st	Y+, r24
    4568:	99 93       	st	Y+, r25
    456a:	0e 5f       	subi	r16, 0xFE	; 254
    456c:	1f 4f       	sbci	r17, 0xFF	; 255
    456e:	00 35       	cpi	r16, 0x50	; 80
    4570:	11 05       	cpc	r17, r1
    4572:	69 f7       	brne	.-38     	; 0x454e <read_motor_settings+0x60>
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	df 90       	pop	r13
    4582:	cf 90       	pop	r12
    4584:	bf 90       	pop	r11
    4586:	af 90       	pop	r10
    4588:	9f 90       	pop	r9
    458a:	08 95       	ret

0000458c <motor_init>:
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	a0 e4       	ldi	r26, 0x40	; 64
    4592:	b6 e0       	ldi	r27, 0x06	; 6
    4594:	83 e3       	ldi	r24, 0x33	; 51
    4596:	11 96       	adiw	r26, 0x01	; 1
    4598:	8c 93       	st	X, r24
    459a:	11 97       	sbiw	r26, 0x01	; 1
    459c:	e0 e6       	ldi	r30, 0x60	; 96
    459e:	f6 e0       	ldi	r31, 0x06	; 6
    45a0:	83 e0       	ldi	r24, 0x03	; 3
    45a2:	81 83       	std	Z+1, r24	; 0x01
    45a4:	c0 e0       	ldi	r28, 0x00	; 0
    45a6:	d8 e0       	ldi	r29, 0x08	; 8
    45a8:	97 e0       	ldi	r25, 0x07	; 7
    45aa:	98 83       	st	Y, r25
    45ac:	89 83       	std	Y+1, r24	; 0x01
    45ae:	c0 e4       	ldi	r28, 0x40	; 64
    45b0:	d8 e0       	ldi	r29, 0x08	; 8
    45b2:	98 83       	st	Y, r25
    45b4:	89 83       	std	Y+1, r24	; 0x01
    45b6:	c0 e0       	ldi	r28, 0x00	; 0
    45b8:	d9 e0       	ldi	r29, 0x09	; 9
    45ba:	98 83       	st	Y, r25
    45bc:	89 83       	std	Y+1, r24	; 0x01
    45be:	90 e4       	ldi	r25, 0x40	; 64
    45c0:	54 96       	adiw	r26, 0x14	; 20
    45c2:	9c 93       	st	X, r25
    45c4:	54 97       	sbiw	r26, 0x14	; 20
    45c6:	55 96       	adiw	r26, 0x15	; 21
    45c8:	9c 93       	st	X, r25
    45ca:	55 97       	sbiw	r26, 0x15	; 21
    45cc:	90 8b       	std	Z+16, r25	; 0x10
    45ce:	91 8b       	std	Z+17, r25	; 0x11
    45d0:	90 e3       	ldi	r25, 0x30	; 48
    45d2:	16 96       	adiw	r26, 0x06	; 6
    45d4:	9c 93       	st	X, r25
    45d6:	86 83       	std	Z+6, r24	; 0x06
    45d8:	10 92 a1 24 	sts	0x24A1, r1
    45dc:	84 e1       	ldi	r24, 0x14	; 20
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	80 93 24 26 	sts	0x2624, r24
    45e4:	90 93 25 26 	sts	0x2625, r25
    45e8:	88 e2       	ldi	r24, 0x28	; 40
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	80 93 ab 26 	sts	0x26AB, r24
    45f0:	90 93 ac 26 	sts	0x26AC, r25
    45f4:	0e 94 77 22 	call	0x44ee	; 0x44ee <read_motor_settings>
    45f8:	df 91       	pop	r29
    45fa:	cf 91       	pop	r28
    45fc:	08 95       	ret

000045fe <write_motor_settings>:
    45fe:	cf 92       	push	r12
    4600:	df 92       	push	r13
    4602:	ef 92       	push	r14
    4604:	ff 92       	push	r15
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	c0 e1       	ldi	r28, 0x10	; 16
    4610:	d0 e0       	ldi	r29, 0x00	; 0
    4612:	18 c0       	rjmp	.+48     	; 0x4644 <write_motor_settings+0x46>
    4614:	f6 01       	movw	r30, r12
    4616:	01 91       	ld	r16, Z+
    4618:	11 91       	ld	r17, Z+
    461a:	6f 01       	movw	r12, r30
    461c:	61 2f       	mov	r22, r17
    461e:	70 e0       	ldi	r23, 0x00	; 0
    4620:	ce 01       	movw	r24, r28
    4622:	0e 94 92 0a 	call	0x1524	; 0x1524 <EEPROM_write_byte>
    4626:	b8 01       	movw	r22, r16
    4628:	77 27       	eor	r23, r23
    462a:	ce 01       	movw	r24, r28
    462c:	01 96       	adiw	r24, 0x01	; 1
    462e:	0e 94 92 0a 	call	0x1524	; 0x1524 <EEPROM_write_byte>
    4632:	22 96       	adiw	r28, 0x02	; 2
    4634:	ce 15       	cp	r28, r14
    4636:	df 05       	cpc	r29, r15
    4638:	69 f7       	brne	.-38     	; 0x4614 <write_motor_settings+0x16>
    463a:	e7 01       	movw	r28, r14
    463c:	f0 e4       	ldi	r31, 0x40	; 64
    463e:	ef 16       	cp	r14, r31
    4640:	f1 04       	cpc	r15, r1
    4642:	49 f0       	breq	.+18     	; 0x4656 <write_motor_settings+0x58>
    4644:	ce 01       	movw	r24, r28
    4646:	89 57       	subi	r24, 0x79	; 121
    4648:	97 4d       	sbci	r25, 0xD7	; 215
    464a:	6c 01       	movw	r12, r24
    464c:	7e 01       	movw	r14, r28
    464e:	96 e0       	ldi	r25, 0x06	; 6
    4650:	e9 0e       	add	r14, r25
    4652:	f1 1c       	adc	r15, r1
    4654:	df cf       	rjmp	.-66     	; 0x4614 <write_motor_settings+0x16>
    4656:	0f e2       	ldi	r16, 0x2F	; 47
    4658:	17 e2       	ldi	r17, 0x27	; 39
    465a:	f8 01       	movw	r30, r16
    465c:	c1 91       	ld	r28, Z+
    465e:	d1 91       	ld	r29, Z+
    4660:	8f 01       	movw	r16, r30
    4662:	6d 2f       	mov	r22, r29
    4664:	70 e0       	ldi	r23, 0x00	; 0
    4666:	c7 01       	movw	r24, r14
    4668:	0e 94 92 0a 	call	0x1524	; 0x1524 <EEPROM_write_byte>
    466c:	be 01       	movw	r22, r28
    466e:	77 27       	eor	r23, r23
    4670:	c7 01       	movw	r24, r14
    4672:	01 96       	adiw	r24, 0x01	; 1
    4674:	0e 94 92 0a 	call	0x1524	; 0x1524 <EEPROM_write_byte>
    4678:	f2 e0       	ldi	r31, 0x02	; 2
    467a:	ef 0e       	add	r14, r31
    467c:	f1 1c       	adc	r15, r1
    467e:	80 e5       	ldi	r24, 0x50	; 80
    4680:	e8 16       	cp	r14, r24
    4682:	f1 04       	cpc	r15, r1
    4684:	51 f7       	brne	.-44     	; 0x465a <write_motor_settings+0x5c>
    4686:	df 91       	pop	r29
    4688:	cf 91       	pop	r28
    468a:	1f 91       	pop	r17
    468c:	0f 91       	pop	r16
    468e:	ff 90       	pop	r15
    4690:	ef 90       	pop	r14
    4692:	df 90       	pop	r13
    4694:	cf 90       	pop	r12
    4696:	08 95       	ret

00004698 <print_motor_values>:
    4698:	8f 92       	push	r8
    469a:	9f 92       	push	r9
    469c:	af 92       	push	r10
    469e:	bf 92       	push	r11
    46a0:	cf 92       	push	r12
    46a2:	df 92       	push	r13
    46a4:	ef 92       	push	r14
    46a6:	ff 92       	push	r15
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	8d e9       	ldi	r24, 0x9D	; 157
    46b0:	95 e0       	ldi	r25, 0x05	; 5
    46b2:	9f 93       	push	r25
    46b4:	8f 93       	push	r24
    46b6:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    46ba:	0f 2e       	mov	r0, r31
    46bc:	f7 e9       	ldi	r31, 0x97	; 151
    46be:	af 2e       	mov	r10, r31
    46c0:	f8 e2       	ldi	r31, 0x28	; 40
    46c2:	bf 2e       	mov	r11, r31
    46c4:	f0 2d       	mov	r31, r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	c1 2c       	mov	r12, r1
    46cc:	d1 2c       	mov	r13, r1
    46ce:	0f 2e       	mov	r0, r31
    46d0:	f3 e9       	ldi	r31, 0x93	; 147
    46d2:	8f 2e       	mov	r8, r31
    46d4:	f5 e0       	ldi	r31, 0x05	; 5
    46d6:	9f 2e       	mov	r9, r31
    46d8:	f0 2d       	mov	r31, r0
    46da:	0f 2e       	mov	r0, r31
    46dc:	fc e8       	ldi	r31, 0x8C	; 140
    46de:	ef 2e       	mov	r14, r31
    46e0:	f1 e2       	ldi	r31, 0x21	; 33
    46e2:	ff 2e       	mov	r15, r31
    46e4:	f0 2d       	mov	r31, r0
    46e6:	df 92       	push	r13
    46e8:	cf 92       	push	r12
    46ea:	9f 92       	push	r9
    46ec:	8f 92       	push	r8
    46ee:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    46f2:	0f 90       	pop	r0
    46f4:	0f 90       	pop	r0
    46f6:	0f 90       	pop	r0
    46f8:	0f 90       	pop	r0
    46fa:	e5 01       	movw	r28, r10
    46fc:	10 e0       	ldi	r17, 0x00	; 0
    46fe:	88 81       	ld	r24, Y
    4700:	99 81       	ldd	r25, Y+1	; 0x01
    4702:	22 96       	adiw	r28, 0x02	; 2
    4704:	9f 93       	push	r25
    4706:	8f 93       	push	r24
    4708:	ff 92       	push	r15
    470a:	ef 92       	push	r14
    470c:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    4710:	1f 5f       	subi	r17, 0xFF	; 255
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	13 30       	cpi	r17, 0x03	; 3
    471c:	81 f7       	brne	.-32     	; 0x46fe <print_motor_values+0x66>
    471e:	85 ea       	ldi	r24, 0xA5	; 165
    4720:	90 e2       	ldi	r25, 0x20	; 32
    4722:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
    4726:	8f ef       	ldi	r24, 0xFF	; 255
    4728:	c8 1a       	sub	r12, r24
    472a:	d8 0a       	sbc	r13, r24
    472c:	86 e0       	ldi	r24, 0x06	; 6
    472e:	a8 0e       	add	r10, r24
    4730:	b1 1c       	adc	r11, r1
    4732:	88 e0       	ldi	r24, 0x08	; 8
    4734:	c8 16       	cp	r12, r24
    4736:	d1 04       	cpc	r13, r1
    4738:	b1 f6       	brne	.-84     	; 0x46e6 <print_motor_values+0x4e>
    473a:	85 ea       	ldi	r24, 0xA5	; 165
    473c:	90 e2       	ldi	r25, 0x20	; 32
    473e:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	ff 90       	pop	r15
    474a:	ef 90       	pop	r14
    474c:	df 90       	pop	r13
    474e:	cf 90       	pop	r12
    4750:	bf 90       	pop	r11
    4752:	af 90       	pop	r10
    4754:	9f 90       	pop	r9
    4756:	8f 90       	pop	r8
    4758:	08 95       	ret

0000475a <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    4766:	8a e7       	ldi	r24, 0x7A	; 122
    4768:	95 e0       	ldi	r25, 0x05	; 5
    476a:	9f 93       	push	r25
    476c:	8f 93       	push	r24
    476e:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    4772:	0f e2       	ldi	r16, 0x2F	; 47
    4774:	17 e2       	ldi	r17, 0x27	; 39
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	c0 e0       	ldi	r28, 0x00	; 0
    477c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%i\t%hu\r\n"), direction, mm_per_kilostep[direction]);	
    477e:	0f 2e       	mov	r0, r31
    4780:	f0 e7       	ldi	r31, 0x70	; 112
    4782:	ef 2e       	mov	r14, r31
    4784:	f5 e0       	ldi	r31, 0x05	; 5
    4786:	ff 2e       	mov	r15, r31
    4788:	f0 2d       	mov	r31, r0
    478a:	f8 01       	movw	r30, r16
    478c:	80 81       	ld	r24, Z
    478e:	91 81       	ldd	r25, Z+1	; 0x01
    4790:	0e 5f       	subi	r16, 0xFE	; 254
    4792:	1f 4f       	sbci	r17, 0xFF	; 255
    4794:	9f 93       	push	r25
    4796:	8f 93       	push	r24
    4798:	df 93       	push	r29
    479a:	cf 93       	push	r28
    479c:	ff 92       	push	r15
    479e:	ef 92       	push	r14
    47a0:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    47a4:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	c8 30       	cpi	r28, 0x08	; 8
    47b4:	d1 05       	cpc	r29, r1
    47b6:	49 f7       	brne	.-46     	; 0x478a <print_dist_per_step+0x30>
	{
		printf_P(PSTR("\t%i\t%hu\r\n"), direction, mm_per_kilostep[direction]);	
	}
    47b8:	df 91       	pop	r29
    47ba:	cf 91       	pop	r28
    47bc:	1f 91       	pop	r17
    47be:	0f 91       	pop	r16
    47c0:	ff 90       	pop	r15
    47c2:	ef 90       	pop	r14
    47c4:	08 95       	ret

000047c6 <pc_comm_putchar>:
	serial_in_index = temp_index;
}

int pc_comm_putchar(char c, FILE *stream)
{
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    47c6:	e0 eb       	ldi	r30, 0xB0	; 176
    47c8:	f9 e0       	ldi	r31, 0x09	; 9
    47ca:	91 81       	ldd	r25, Z+1	; 0x01
    47cc:	95 ff       	sbrs	r25, 5
    47ce:	fd cf       	rjmp	.-6      	; 0x47ca <pc_comm_putchar+0x4>
	PC_USART.DATA = c;
    47d0:	80 93 b0 09 	sts	0x09B0, r24
	return 1;
}
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	08 95       	ret

000047da <pc_comm_init>:

static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init()
{
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    47da:	e0 e6       	ldi	r30, 0x60	; 96
    47dc:	f6 e0       	ldi	r31, 0x06	; 6
    47de:	80 e8       	ldi	r24, 0x80	; 128
    47e0:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    47e2:	80 e4       	ldi	r24, 0x40	; 64
    47e4:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    47e6:	e0 eb       	ldi	r30, 0xB0	; 176
    47e8:	f9 e0       	ldi	r31, 0x09	; 9
    47ea:	83 e0       	ldi	r24, 0x03	; 3
    47ec:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    47ee:	87 e1       	ldi	r24, 0x17	; 23
    47f0:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    47f2:	84 ea       	ldi	r24, 0xA4	; 164
    47f4:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    47f6:	84 81       	ldd	r24, Z+4	; 0x04
    47f8:	80 61       	ori	r24, 0x10	; 16
    47fa:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    47fc:	84 81       	ldd	r24, Z+4	; 0x04
    47fe:	88 60       	ori	r24, 0x08	; 8
    4800:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    4802:	80 e3       	ldi	r24, 0x30	; 48
    4804:	90 e2       	ldi	r25, 0x20	; 32
    4806:	80 93 26 2d 	sts	0x2D26, r24
    480a:	90 93 27 2d 	sts	0x2D27, r25
	serial_in_index = 0;
    480e:	10 92 9b 24 	sts	0x249B, r1
    4812:	10 92 9c 24 	sts	0x249C, r1
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    4816:	80 e2       	ldi	r24, 0x20	; 32
    4818:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    481a:	8a e0       	ldi	r24, 0x0A	; 10
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	0e 94 d9 54 	call	0xa9b2	; 0xa9b2 <putchar>
    4822:	08 95       	ret

00004824 <handle_up_arrow>:
		putchar(data);
	}
}

void handle_up_arrow()
{
    4824:	0f 93       	push	r16
    4826:	1f 93       	push	r17
    4828:	cf 93       	push	r28
	uint8_t temp_index = serial_in_index;
    482a:	80 91 9b 24 	lds	r24, 0x249B
    482e:	90 91 9c 24 	lds	r25, 0x249C
    4832:	c8 2f       	mov	r28, r24
    4834:	99 27       	eor	r25, r25
			
	while(serial_in_buffer[temp_index] != '\0')
    4836:	fc 01       	movw	r30, r24
    4838:	ee 5a       	subi	r30, 0xAE	; 174
    483a:	fb 4d       	sbci	r31, 0xDB	; 219
    483c:	80 81       	ld	r24, Z
    483e:	88 23       	and	r24, r24
    4840:	81 f0       	breq	.+32     	; 0x4862 <handle_up_arrow+0x3e>
	{
		putchar(serial_in_buffer[temp_index]);
    4842:	04 e2       	ldi	r16, 0x24	; 36
    4844:	1d e2       	ldi	r17, 0x2D	; 45
    4846:	f8 01       	movw	r30, r16
    4848:	62 81       	ldd	r22, Z+2	; 0x02
    484a:	73 81       	ldd	r23, Z+3	; 0x03
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
		temp_index++;
    4852:	cf 5f       	subi	r28, 0xFF	; 255

void handle_up_arrow()
{
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0')
    4854:	ec 2f       	mov	r30, r28
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	ee 5a       	subi	r30, 0xAE	; 174
    485a:	fb 4d       	sbci	r31, 0xDB	; 219
    485c:	80 81       	ld	r24, Z
    485e:	81 11       	cpse	r24, r1
    4860:	f2 cf       	rjmp	.-28     	; 0x4846 <handle_up_arrow+0x22>
	{
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    4862:	8c 2f       	mov	r24, r28
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	80 93 9b 24 	sts	0x249B, r24
    486a:	90 93 9c 24 	sts	0x249C, r25
}
    486e:	cf 91       	pop	r28
    4870:	1f 91       	pop	r17
    4872:	0f 91       	pop	r16
    4874:	08 95       	ret

00004876 <handle_serial_input>:

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }

void handle_serial_input()
{
	char data = PC_USART.DATA;
    4876:	80 91 b0 09 	lds	r24, 0x09B0
	if(escaped_arrow==1)
    487a:	90 91 96 28 	lds	r25, 0x2896
    487e:	91 30       	cpi	r25, 0x01	; 1
    4880:	39 f4       	brne	.+14     	; 0x4890 <handle_serial_input+0x1a>
	{
		if(data == 65)
    4882:	81 34       	cpi	r24, 0x41	; 65
    4884:	11 f4       	brne	.+4      	; 0x488a <handle_serial_input+0x14>
		{
			handle_up_arrow();
    4886:	0e 94 12 24 	call	0x4824	; 0x4824 <handle_up_arrow>
		}
		escaped_arrow=0;
    488a:	10 92 96 28 	sts	0x2896, r1
    488e:	08 95       	ret
	}
	else if(escaped)
    4890:	90 91 4a 24 	lds	r25, 0x244A
    4894:	99 23       	and	r25, r25
    4896:	41 f0       	breq	.+16     	; 0x48a8 <handle_serial_input+0x32>
	{
		if(data == 91)
    4898:	8b 35       	cpi	r24, 0x5B	; 91
    489a:	19 f4       	brne	.+6      	; 0x48a2 <handle_serial_input+0x2c>
		{
			escaped_arrow=1;	
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	80 93 96 28 	sts	0x2896, r24
		}
		escaped=0;
    48a2:	10 92 4a 24 	sts	0x244A, r1
    48a6:	08 95       	ret
	}
	else if(data == '\r' || data == '\n') //We got the newline character.
    48a8:	8d 30       	cpi	r24, 0x0D	; 13
    48aa:	11 f0       	breq	.+4      	; 0x48b0 <handle_serial_input+0x3a>
    48ac:	8a 30       	cpi	r24, 0x0A	; 10
    48ae:	a9 f4       	brne	.+42     	; 0x48da <handle_serial_input+0x64>
	{
		printf("\r\n");
    48b0:	85 ea       	ldi	r24, 0xA5	; 165
    48b2:	90 e2       	ldi	r25, 0x20	; 32
    48b4:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
		serial_in_buffer[serial_in_index]='\0';
    48b8:	60 91 9b 24 	lds	r22, 0x249B
    48bc:	70 91 9c 24 	lds	r23, 0x249C
    48c0:	fb 01       	movw	r30, r22
    48c2:	ee 5a       	subi	r30, 0xAE	; 174
    48c4:	fb 4d       	sbci	r31, 0xDB	; 219
    48c6:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    48c8:	82 e5       	ldi	r24, 0x52	; 82
    48ca:	94 e2       	ldi	r25, 0x24	; 36
    48cc:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <handle_serial_command>
		serial_in_index = 0;
    48d0:	10 92 9b 24 	sts	0x249B, r1
    48d4:	10 92 9c 24 	sts	0x249C, r1
    48d8:	08 95       	ret
	}
	else if(data == '\b') //We got the backspace character.
    48da:	88 30       	cpi	r24, 0x08	; 8
    48dc:	a1 f4       	brne	.+40     	; 0x4906 <handle_serial_input+0x90>
	{
		if(serial_in_index > 0) serial_in_index--;
    48de:	80 91 9b 24 	lds	r24, 0x249B
    48e2:	90 91 9c 24 	lds	r25, 0x249C
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	29 f0       	breq	.+10     	; 0x48f4 <handle_serial_input+0x7e>
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	80 93 9b 24 	sts	0x249B, r24
    48f0:	90 93 9c 24 	sts	0x249C, r25
		printf("\b \b");
    48f4:	80 e9       	ldi	r24, 0x90	; 144
    48f6:	91 e2       	ldi	r25, 0x21	; 33
    48f8:	9f 93       	push	r25
    48fa:	8f 93       	push	r24
    48fc:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	08 95       	ret
	}
	else if(data == 27) //escape pressed.
    4906:	8b 31       	cpi	r24, 0x1B	; 27
    4908:	21 f4       	brne	.+8      	; 0x4912 <handle_serial_input+0x9c>
	{
		escaped = 1;
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	80 93 4a 24 	sts	0x244A, r24
    4910:	08 95       	ret
	}
	else if(serial_in_index==BUFFER_SIZE) //Buffer overflow
    4912:	20 91 9b 24 	lds	r18, 0x249B
    4916:	30 91 9c 24 	lds	r19, 0x249C
    491a:	20 34       	cpi	r18, 0x40	; 64
    491c:	31 05       	cpc	r19, r1
    491e:	91 f4       	brne	.+36     	; 0x4944 <handle_serial_input+0xce>
	{
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),BUFFER_SIZE);
    4920:	1f 92       	push	r1
    4922:	80 e4       	ldi	r24, 0x40	; 64
    4924:	8f 93       	push	r24
    4926:	86 e2       	ldi	r24, 0x26	; 38
    4928:	96 e0       	ldi	r25, 0x06	; 6
    492a:	9f 93       	push	r25
    492c:	8f 93       	push	r24
    492e:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		serial_in_index = 0;
    4932:	10 92 9b 24 	sts	0x249B, r1
    4936:	10 92 9c 24 	sts	0x249C, r1
    493a:	0f 90       	pop	r0
    493c:	0f 90       	pop	r0
    493e:	0f 90       	pop	r0
    4940:	0f 90       	pop	r0
    4942:	08 95       	ret
	}
	else //Everything is fine. Add the character to the buffer.
	{
		serial_in_buffer[serial_in_index] = data;
    4944:	f9 01       	movw	r30, r18
    4946:	ee 5a       	subi	r30, 0xAE	; 174
    4948:	fb 4d       	sbci	r31, 0xDB	; 219
    494a:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    494c:	2f 5f       	subi	r18, 0xFF	; 255
    494e:	3f 4f       	sbci	r19, 0xFF	; 255
    4950:	20 93 9b 24 	sts	0x249B, r18
    4954:	30 93 9c 24 	sts	0x249C, r19
		putchar(data);
    4958:	60 91 26 2d 	lds	r22, 0x2D26
    495c:	70 91 27 2d 	lds	r23, 0x2D27
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    4966:	08 95       	ret

00004968 <__vector_91>:
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4968:	1f 92       	push	r1
    496a:	0f 92       	push	r0
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	0f 92       	push	r0
    4970:	11 24       	eor	r1, r1
    4972:	0b b6       	in	r0, 0x3b	; 59
    4974:	0f 92       	push	r0
    4976:	2f 93       	push	r18
    4978:	3f 93       	push	r19
    497a:	4f 93       	push	r20
    497c:	5f 93       	push	r21
    497e:	6f 93       	push	r22
    4980:	7f 93       	push	r23
    4982:	8f 93       	push	r24
    4984:	9f 93       	push	r25
    4986:	af 93       	push	r26
    4988:	bf 93       	push	r27
    498a:	ef 93       	push	r30
    498c:	ff 93       	push	r31
    498e:	0e 94 3b 24 	call	0x4876	; 0x4876 <handle_serial_input>
    4992:	ff 91       	pop	r31
    4994:	ef 91       	pop	r30
    4996:	bf 91       	pop	r27
    4998:	af 91       	pop	r26
    499a:	9f 91       	pop	r25
    499c:	8f 91       	pop	r24
    499e:	7f 91       	pop	r23
    49a0:	6f 91       	pop	r22
    49a2:	5f 91       	pop	r21
    49a4:	4f 91       	pop	r20
    49a6:	3f 91       	pop	r19
    49a8:	2f 91       	pop	r18
    49aa:	0f 90       	pop	r0
    49ac:	0b be       	out	0x3b, r0	; 59
    49ae:	0f 90       	pop	r0
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	0f 90       	pop	r0
    49b4:	1f 90       	pop	r1
    49b6:	18 95       	reti

000049b8 <cap_monitor_init>:
	ACA.WINCTRL |= AC_WINTMODE_INSIDE_gc | AES_INTLVL_LO_gc;
}

void disable_leg_status_interrupt()
{
	ACA.WINCTRL &= ~(AC_WINTMODE_INSIDE_gc | AC_WINTMODE_OUTSIDE_gc | AES_INTLVL_LO_gc);
    49b8:	83 e0       	ldi	r24, 0x03	; 3
    49ba:	80 93 22 06 	sts	0x0622, r24
    49be:	e0 e9       	ldi	r30, 0x90	; 144
    49c0:	f3 e0       	ldi	r31, 0x03	; 3
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	80 83       	st	Z, r24
    49c6:	81 83       	std	Z+1, r24	; 0x01
    49c8:	88 e0       	ldi	r24, 0x08	; 8
    49ca:	82 83       	std	Z+2, r24	; 0x02
    49cc:	83 83       	std	Z+3, r24	; 0x03
    49ce:	80 e1       	ldi	r24, 0x10	; 16
    49d0:	86 83       	std	Z+6, r24	; 0x06
    49d2:	08 95       	ret

000049d4 <leg_monitor_init>:
    49d4:	e0 e0       	ldi	r30, 0x00	; 0
    49d6:	f6 e0       	ldi	r31, 0x06	; 6
    49d8:	8f e1       	ldi	r24, 0x1F	; 31
    49da:	82 83       	std	Z+2, r24	; 0x02
    49dc:	87 e0       	ldi	r24, 0x07	; 7
    49de:	80 8b       	std	Z+16, r24	; 0x10
    49e0:	81 8b       	std	Z+17, r24	; 0x11
    49e2:	82 8b       	std	Z+18, r24	; 0x12
    49e4:	83 8b       	std	Z+19, r24	; 0x13
    49e6:	84 8b       	std	Z+20, r24	; 0x14
    49e8:	e0 e8       	ldi	r30, 0x80	; 128
    49ea:	f3 e0       	ldi	r31, 0x03	; 3
    49ec:	80 e1       	ldi	r24, 0x10	; 16
    49ee:	86 83       	std	Z+6, r24	; 0x06
    49f0:	82 83       	std	Z+2, r24	; 0x02
    49f2:	81 e1       	ldi	r24, 0x11	; 17
    49f4:	83 83       	std	Z+3, r24	; 0x03
    49f6:	89 e0       	ldi	r24, 0x09	; 9
    49f8:	80 83       	st	Z, r24
    49fa:	81 83       	std	Z+1, r24	; 0x01
    49fc:	08 95       	ret

000049fe <power_init>:
    49fe:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <cap_monitor_init>
    4a02:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <leg_monitor_init>
    4a06:	08 95       	ret

00004a08 <leg_status>:
		}
	}
}

int8_t leg_status(uint8_t leg)
{
    4a08:	cf 93       	push	r28
    4a0a:	df 93       	push	r29
    4a0c:	1f 92       	push	r1
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t status;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4a12:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a14:	f8 94       	cli
	{
		switch (leg)
    4a16:	81 30       	cpi	r24, 0x01	; 1
    4a18:	19 f0       	breq	.+6      	; 0x4a20 <leg_status+0x18>
    4a1a:	82 30       	cpi	r24, 0x02	; 2
    4a1c:	41 f0       	breq	.+16     	; 0x4a2e <leg_status+0x26>
    4a1e:	0e c0       	rjmp	.+28     	; 0x4a3c <leg_status+0x34>
		{
			case 1:
				ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN3_gc;
    4a20:	e0 e8       	ldi	r30, 0x80	; 128
    4a22:	f3 e0       	ldi	r31, 0x03	; 3
    4a24:	88 e1       	ldi	r24, 0x18	; 24
    4a26:	82 83       	std	Z+2, r24	; 0x02
				ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN3_gc;
    4a28:	89 e1       	ldi	r24, 0x19	; 25
    4a2a:	83 83       	std	Z+3, r24	; 0x03
				break;
    4a2c:	09 c0       	rjmp	.+18     	; 0x4a40 <leg_status+0x38>
			case 2:
				ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN4_gc;
    4a2e:	e0 e8       	ldi	r30, 0x80	; 128
    4a30:	f3 e0       	ldi	r31, 0x03	; 3
    4a32:	80 e2       	ldi	r24, 0x20	; 32
    4a34:	82 83       	std	Z+2, r24	; 0x02
				ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN4_gc;
    4a36:	81 e2       	ldi	r24, 0x21	; 33
    4a38:	83 83       	std	Z+3, r24	; 0x03
				break;
    4a3a:	02 c0       	rjmp	.+4      	; 0x4a40 <leg_status+0x38>
		}
		if(leg!=0) delay_us(100);		//The comparators seem to need a bit of time.
    4a3c:	88 23       	and	r24, r24
    4a3e:	01 f1       	breq	.+64     	; 0x4a80 <leg_status+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4a40:	ef e1       	ldi	r30, 0x1F	; 31
    4a42:	f3 e0       	ldi	r31, 0x03	; 3
    4a44:	31 97       	sbiw	r30, 0x01	; 1
    4a46:	f1 f7       	brne	.-4      	; 0x4a44 <leg_status+0x3c>
    4a48:	00 c0       	rjmp	.+0      	; 0x4a4a <leg_status+0x42>
    4a4a:	00 00       	nop
		status = ACA.STATUS;
    4a4c:	e0 e8       	ldi	r30, 0x80	; 128
    4a4e:	f3 e0       	ldi	r31, 0x03	; 3
    4a50:	87 81       	ldd	r24, Z+7	; 0x07
    4a52:	89 83       	std	Y+1, r24	; 0x01
		if(leg!=0)//Set MUX back to leg 0.
		{
			ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;
    4a54:	80 e1       	ldi	r24, 0x10	; 16
    4a56:	82 83       	std	Z+2, r24	; 0x02
			ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;
    4a58:	81 e1       	ldi	r24, 0x11	; 17
    4a5a:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a5c:	9f bf       	out	0x3f, r25	; 63
		}
	}
	switch (status & AC_WSTATE_gm)
    4a5e:	89 81       	ldd	r24, Y+1	; 0x01
    4a60:	80 7c       	andi	r24, 0xC0	; 192
    4a62:	80 34       	cpi	r24, 0x40	; 64
    4a64:	29 f0       	breq	.+10     	; 0x4a70 <leg_status+0x68>
    4a66:	80 38       	cpi	r24, 0x80	; 128
    4a68:	29 f0       	breq	.+10     	; 0x4a74 <leg_status+0x6c>
    4a6a:	81 11       	cpse	r24, r1
    4a6c:	05 c0       	rjmp	.+10     	; 0x4a78 <leg_status+0x70>
    4a6e:	06 c0       	rjmp	.+12     	; 0x4a7c <leg_status+0x74>
	{
		case AC_WSTATE_ABOVE_gc:	return 1;
		case AC_WSTATE_INSIDE_gc:	return 0;
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	0a c0       	rjmp	.+20     	; 0x4a88 <leg_status+0x80>
		case AC_WSTATE_BELOW_gc:	return -1;
    4a74:	8f ef       	ldi	r24, 0xFF	; 255
    4a76:	08 c0       	rjmp	.+16     	; 0x4a88 <leg_status+0x80>
		default:					return 127;
    4a78:	8f e7       	ldi	r24, 0x7F	; 127
    4a7a:	06 c0       	rjmp	.+12     	; 0x4a88 <leg_status+0x80>
			ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;
		}
	}
	switch (status & AC_WSTATE_gm)
	{
		case AC_WSTATE_ABOVE_gc:	return 1;
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	04 c0       	rjmp	.+8      	; 0x4a88 <leg_status+0x80>
				ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN4_gc;
				ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN4_gc;
				break;
		}
		if(leg!=0) delay_us(100);		//The comparators seem to need a bit of time.
		status = ACA.STATUS;
    4a80:	80 91 87 03 	lds	r24, 0x0387
    4a84:	89 83       	std	Y+1, r24	; 0x01
    4a86:	ea cf       	rjmp	.-44     	; 0x4a5c <leg_status+0x54>
		case AC_WSTATE_ABOVE_gc:	return 1;
		case AC_WSTATE_INSIDE_gc:	return 0;
		case AC_WSTATE_BELOW_gc:	return -1;
		default:					return 127;
	}
}
    4a88:	0f 90       	pop	r0
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	08 95       	ret

00004a90 <leg_float>:
}

void leg_float()
{
	//disable_leg_status_interrupt();
	if(leg_status(0) != 0 ||leg_status(1) != 0 || leg_status(2) != 0) return;
    4a90:	80 e0       	ldi	r24, 0x00	; 0
    4a92:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4a96:	81 11       	cpse	r24, r1
    4a98:	14 c0       	rjmp	.+40     	; 0x4ac2 <leg_float+0x32>
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4aa0:	81 11       	cpse	r24, r1
    4aa2:	0f c0       	rjmp	.+30     	; 0x4ac2 <leg_float+0x32>
    4aa4:	82 e0       	ldi	r24, 0x02	; 2
    4aa6:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4aaa:	81 11       	cpse	r24, r1
    4aac:	0a c0       	rjmp	.+20     	; 0x4ac2 <leg_float+0x32>
	printf("!\r\n");
    4aae:	84 e9       	ldi	r24, 0x94	; 148
    4ab0:	91 e2       	ldi	r25, 0x21	; 33
    4ab2:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
	if(user_leg_status_interrupt) user_leg_status_interrupt();
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	89 2b       	or	r24, r25
    4abc:	11 f0       	breq	.+4      	; 0x4ac2 <leg_float+0x32>
    4abe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    4ac2:	08 95       	ret

00004ac4 <__vector_70>:
	//enable_leg_status_interrupt();
}


ISR(ACA_ACW_vect)
{
    4ac4:	1f 92       	push	r1
    4ac6:	0f 92       	push	r0
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	0f 92       	push	r0
    4acc:	11 24       	eor	r1, r1
    4ace:	0b b6       	in	r0, 0x3b	; 59
    4ad0:	0f 92       	push	r0
    4ad2:	cf 92       	push	r12
    4ad4:	df 92       	push	r13
    4ad6:	ef 92       	push	r14
    4ad8:	ff 92       	push	r15
    4ada:	2f 93       	push	r18
    4adc:	3f 93       	push	r19
    4ade:	4f 93       	push	r20
    4ae0:	5f 93       	push	r21
    4ae2:	6f 93       	push	r22
    4ae4:	7f 93       	push	r23
    4ae6:	8f 93       	push	r24
    4ae8:	9f 93       	push	r25
    4aea:	af 93       	push	r26
    4aec:	bf 93       	push	r27
    4aee:	cf 93       	push	r28
    4af0:	df 93       	push	r29
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
	uint32_t now = get_time();
    4af6:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    4afa:	6b 01       	movw	r12, r22
    4afc:	7c 01       	movw	r14, r24
	if((now-last_int_time)>200)
    4afe:	80 91 14 27 	lds	r24, 0x2714
    4b02:	90 91 15 27 	lds	r25, 0x2715
    4b06:	a0 91 16 27 	lds	r26, 0x2716
    4b0a:	b0 91 17 27 	lds	r27, 0x2717
    4b0e:	a7 01       	movw	r20, r14
    4b10:	96 01       	movw	r18, r12
    4b12:	28 1b       	sub	r18, r24
    4b14:	39 0b       	sbc	r19, r25
    4b16:	4a 0b       	sbc	r20, r26
    4b18:	5b 0b       	sbc	r21, r27
    4b1a:	29 3c       	cpi	r18, 0xC9	; 201
    4b1c:	31 05       	cpc	r19, r1
    4b1e:	41 05       	cpc	r20, r1
    4b20:	51 05       	cpc	r21, r1
    4b22:	08 f4       	brcc	.+2      	; 0x4b26 <__vector_70+0x62>
    4b24:	a8 c0       	rjmp	.+336    	; 0x4c76 <__vector_70+0x1b2>
	{	
		if(ACA.WINCTRL & 0x8)
    4b26:	80 91 86 03 	lds	r24, 0x0386
    4b2a:	83 ff       	sbrs	r24, 3
    4b2c:	53 c0       	rjmp	.+166    	; 0x4bd4 <__vector_70+0x110>
		{
			printf("I'm down!");
    4b2e:	87 e9       	ldi	r24, 0x97	; 151
    4b30:	91 e2       	ldi	r25, 0x21	; 33
    4b32:	9f 93       	push	r25
    4b34:	8f 93       	push	r24
    4b36:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
			delay_ms(10);
    4b3a:	8a e0       	ldi	r24, 0x0A	; 10
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
			printf("\tLeg Status': %hd\t%hd\t%hd\r\n", leg_status(0),leg_status(1),leg_status(2));
    4b42:	82 e0       	ldi	r24, 0x02	; 2
    4b44:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4b48:	d8 2f       	mov	r29, r24
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4b50:	c8 2f       	mov	r28, r24
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4b58:	2d 2f       	mov	r18, r29
    4b5a:	0d 2e       	mov	r0, r29
    4b5c:	00 0c       	add	r0, r0
    4b5e:	33 0b       	sbc	r19, r19
    4b60:	3f 93       	push	r19
    4b62:	df 93       	push	r29
    4b64:	2c 2f       	mov	r18, r28
    4b66:	0c 2e       	mov	r0, r28
    4b68:	00 0c       	add	r0, r0
    4b6a:	33 0b       	sbc	r19, r19
    4b6c:	3f 93       	push	r19
    4b6e:	cf 93       	push	r28
    4b70:	28 2f       	mov	r18, r24
    4b72:	08 2e       	mov	r0, r24
    4b74:	00 0c       	add	r0, r0
    4b76:	33 0b       	sbc	r19, r19
    4b78:	3f 93       	push	r19
    4b7a:	8f 93       	push	r24
    4b7c:	81 ea       	ldi	r24, 0xA1	; 161
    4b7e:	91 e2       	ldi	r25, 0x21	; 33
    4b80:	9f 93       	push	r25
    4b82:	8f 93       	push	r24
    4b84:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
			last_int_time=now;
    4b88:	c0 92 14 27 	sts	0x2714, r12
    4b8c:	d0 92 15 27 	sts	0x2715, r13
    4b90:	e0 92 16 27 	sts	0x2716, r14
    4b94:	f0 92 17 27 	sts	0x2717, r15
			ACA.WINCTRL = AC_WEN_bm | AES_INTLVL_LO_gc | AC_WINTMODE_INSIDE_gc;
    4b98:	85 e1       	ldi	r24, 0x15	; 21
    4b9a:	80 93 86 03 	sts	0x0386, r24
			remove_task(leg_task);				
    4b9e:	80 91 c8 28 	lds	r24, 0x28C8
    4ba2:	90 91 c9 28 	lds	r25, 0x28C9
    4ba6:	0e 94 8a 39 	call	0x7314	; 0x7314 <remove_task>
			leg_task = schedule_task(500, leg_float, NULL);	
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	48 e4       	ldi	r20, 0x48	; 72
    4bb0:	55 e2       	ldi	r21, 0x25	; 37
    4bb2:	64 ef       	ldi	r22, 0xF4	; 244
    4bb4:	71 e0       	ldi	r23, 0x01	; 1
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    4bbe:	80 93 c8 28 	sts	0x28C8, r24
    4bc2:	90 93 c9 28 	sts	0x28C9, r25
    4bc6:	4d b7       	in	r20, 0x3d	; 61
    4bc8:	5e b7       	in	r21, 0x3e	; 62
    4bca:	46 5f       	subi	r20, 0xF6	; 246
    4bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bce:	4d bf       	out	0x3d, r20	; 61
    4bd0:	5e bf       	out	0x3e, r21	; 62
    4bd2:	51 c0       	rjmp	.+162    	; 0x4c76 <__vector_70+0x1b2>
		}
		else
		{
			printf("I'm up!\t");
    4bd4:	8d eb       	ldi	r24, 0xBD	; 189
    4bd6:	91 e2       	ldi	r25, 0x21	; 33
    4bd8:	9f 93       	push	r25
    4bda:	8f 93       	push	r24
    4bdc:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
			delay_ms(10);			
    4be0:	8a e0       	ldi	r24, 0x0A	; 10
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
			printf("\tLeg Status': %hd\t%hd\t%hd\r\n", leg_status(0),leg_status(1),leg_status(2));
    4be8:	82 e0       	ldi	r24, 0x02	; 2
    4bea:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4bee:	d8 2f       	mov	r29, r24
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4bf6:	c8 2f       	mov	r28, r24
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	0e 94 04 25 	call	0x4a08	; 0x4a08 <leg_status>
    4bfe:	2d 2f       	mov	r18, r29
    4c00:	0d 2e       	mov	r0, r29
    4c02:	00 0c       	add	r0, r0
    4c04:	33 0b       	sbc	r19, r19
    4c06:	3f 93       	push	r19
    4c08:	df 93       	push	r29
    4c0a:	2c 2f       	mov	r18, r28
    4c0c:	0c 2e       	mov	r0, r28
    4c0e:	00 0c       	add	r0, r0
    4c10:	33 0b       	sbc	r19, r19
    4c12:	3f 93       	push	r19
    4c14:	cf 93       	push	r28
    4c16:	28 2f       	mov	r18, r24
    4c18:	08 2e       	mov	r0, r24
    4c1a:	00 0c       	add	r0, r0
    4c1c:	33 0b       	sbc	r19, r19
    4c1e:	3f 93       	push	r19
    4c20:	8f 93       	push	r24
    4c22:	81 ea       	ldi	r24, 0xA1	; 161
    4c24:	91 e2       	ldi	r25, 0x21	; 33
    4c26:	9f 93       	push	r25
    4c28:	8f 93       	push	r24
    4c2a:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
			last_int_time=now;
    4c2e:	c0 92 14 27 	sts	0x2714, r12
    4c32:	d0 92 15 27 	sts	0x2715, r13
    4c36:	e0 92 16 27 	sts	0x2716, r14
    4c3a:	f0 92 17 27 	sts	0x2717, r15
			ACA.WINCTRL = AC_WEN_bm | AES_INTLVL_LO_gc | AC_WINTMODE_OUTSIDE_gc;
    4c3e:	8d e1       	ldi	r24, 0x1D	; 29
    4c40:	80 93 86 03 	sts	0x0386, r24
			remove_task(leg_task);
    4c44:	80 91 c8 28 	lds	r24, 0x28C8
    4c48:	90 91 c9 28 	lds	r25, 0x28C9
    4c4c:	0e 94 8a 39 	call	0x7314	; 0x7314 <remove_task>
			leg_task = schedule_task(500, leg_float, NULL);
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	48 e4       	ldi	r20, 0x48	; 72
    4c56:	55 e2       	ldi	r21, 0x25	; 37
    4c58:	64 ef       	ldi	r22, 0xF4	; 244
    4c5a:	71 e0       	ldi	r23, 0x01	; 1
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    4c64:	80 93 c8 28 	sts	0x28C8, r24
    4c68:	90 93 c9 28 	sts	0x28C9, r25
    4c6c:	8d b7       	in	r24, 0x3d	; 61
    4c6e:	9e b7       	in	r25, 0x3e	; 62
    4c70:	0a 96       	adiw	r24, 0x0a	; 10
    4c72:	8d bf       	out	0x3d, r24	; 61
    4c74:	9e bf       	out	0x3e, r25	; 62
		}
	}
}
    4c76:	ff 91       	pop	r31
    4c78:	ef 91       	pop	r30
    4c7a:	df 91       	pop	r29
    4c7c:	cf 91       	pop	r28
    4c7e:	bf 91       	pop	r27
    4c80:	af 91       	pop	r26
    4c82:	9f 91       	pop	r25
    4c84:	8f 91       	pop	r24
    4c86:	7f 91       	pop	r23
    4c88:	6f 91       	pop	r22
    4c8a:	5f 91       	pop	r21
    4c8c:	4f 91       	pop	r20
    4c8e:	3f 91       	pop	r19
    4c90:	2f 91       	pop	r18
    4c92:	ff 90       	pop	r15
    4c94:	ef 90       	pop	r14
    4c96:	df 90       	pop	r13
    4c98:	cf 90       	pop	r12
    4c9a:	0f 90       	pop	r0
    4c9c:	0b be       	out	0x3b, r0	; 59
    4c9e:	0f 90       	pop	r0
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	0f 90       	pop	r0
    4ca4:	1f 90       	pop	r1
    4ca6:	18 95       	reti

00004ca8 <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    4ca8:	e0 ec       	ldi	r30, 0xC0	; 192
    4caa:	f0 e0       	ldi	r31, 0x00	; 0
    4cac:	80 e2       	ldi	r24, 0x20	; 32
    4cae:	80 83       	st	Z, r24
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    4cb0:	88 b1       	in	r24, 0x08	; 8
    4cb2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    4cb4:	89 b1       	in	r24, 0x09	; 9
    4cb6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    4cb8:	8a b1       	in	r24, 0x0a	; 10
    4cba:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    4cbc:	8b b1       	in	r24, 0x0b	; 11
    4cbe:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    4cc0:	8c b1       	in	r24, 0x0c	; 12
    4cc2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    4cc4:	8d b1       	in	r24, 0x0d	; 13
    4cc6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_WAFNUM;
    4cc8:	80 b3       	in	r24, 0x10	; 16
    4cca:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDX0;
    4ccc:	82 b3       	in	r24, 0x12	; 18
    4cce:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_COORDX1;
    4cd0:	83 b3       	in	r24, 0x13	; 19
    4cd2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY0;
    4cd4:	84 b3       	in	r24, 0x14	; 20
    4cd6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY1;
    4cd8:	85 b3       	in	r24, 0x15	; 21
    4cda:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH0.RESL;
    4cdc:	a0 e0       	ldi	r26, 0x00	; 0
    4cde:	b2 e0       	ldi	r27, 0x02	; 2
    4ce0:	94 96       	adiw	r26, 0x24	; 36
    4ce2:	8c 91       	ld	r24, X
    4ce4:	94 97       	sbiw	r26, 0x24	; 36
    4ce6:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = ADCA.CH1.RESL;
    4ce8:	9c 96       	adiw	r26, 0x2c	; 44
    4cea:	8c 91       	ld	r24, X
    4cec:	9c 97       	sbiw	r26, 0x2c	; 44
    4cee:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH2.RESL;
    4cf0:	d4 96       	adiw	r26, 0x34	; 52
    4cf2:	8c 91       	ld	r24, X
    4cf4:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH0.RESL;
    4cf6:	a0 e4       	ldi	r26, 0x40	; 64
    4cf8:	b2 e0       	ldi	r27, 0x02	; 2
    4cfa:	94 96       	adiw	r26, 0x24	; 36
    4cfc:	8c 91       	ld	r24, X
    4cfe:	94 97       	sbiw	r26, 0x24	; 36
    4d00:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH1.RESL;
    4d02:	9c 96       	adiw	r26, 0x2c	; 44
    4d04:	8c 91       	ld	r24, X
    4d06:	83 83       	std	Z+3, r24	; 0x03

	r_round = 1;
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	80 93 1e 2d 	sts	0x2D1E, r24
    4d0e:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    4d10:	91 e0       	ldi	r25, 0x01	; 1
    4d12:	92 83       	std	Z+2, r25	; 0x02
    4d14:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    4d16:	e9 f7       	brne	.-6      	; 0x4d12 <random_init+0x6a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    4d18:	84 e8       	ldi	r24, 0x84	; 132
    4d1a:	80 93 c0 00 	sts	0x00C0, r24

	r_position = 0;
    4d1e:	10 92 1f 2d 	sts	0x2D1F, r1
    4d22:	08 95       	ret

00004d24 <rand_byte>:
}

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4d24:	90 91 1f 2d 	lds	r25, 0x2D1F
    4d28:	91 11       	cpse	r25, r1
    4d2a:	15 c0       	rjmp	.+42     	; 0x4d56 <rand_byte+0x32>
    4d2c:	e0 ec       	ldi	r30, 0xC0	; 192
    4d2e:	f0 e0       	ldi	r31, 0x00	; 0
    4d30:	81 81       	ldd	r24, Z+1	; 0x01
    4d32:	80 ff       	sbrs	r24, 0
    4d34:	fd cf       	rjmp	.-6      	; 0x4d30 <rand_byte+0xc>
    4d36:	09 c0       	rjmp	.+18     	; 0x4d4a <rand_byte+0x26>
	r = AES.STATE;
	r_position++;
	if (r_position > 15)
	{
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    4d38:	22 83       	std	Z+2, r18	; 0x02
    4d3a:	91 50       	subi	r25, 0x01	; 1
    4d3c:	e9 f7       	brne	.-6      	; 0x4d38 <rand_byte+0x14>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    4d3e:	94 e8       	ldi	r25, 0x84	; 132
    4d40:	90 93 c0 00 	sts	0x00C0, r25
		r_position = 0;
    4d44:	10 92 1f 2d 	sts	0x2D1F, r1
    4d48:	08 95       	ret

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
	r = AES.STATE;
    4d4a:	80 91 c2 00 	lds	r24, 0x00C2
	r_position++;
    4d4e:	91 e0       	ldi	r25, 0x01	; 1
    4d50:	90 93 1f 2d 	sts	0x2D1F, r25
    4d54:	08 95       	ret

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
	r = AES.STATE;
    4d56:	80 91 c2 00 	lds	r24, 0x00C2
	r_position++;
    4d5a:	9f 5f       	subi	r25, 0xFF	; 255
    4d5c:	90 93 1f 2d 	sts	0x2D1F, r25
	if (r_position > 15)
    4d60:	90 31       	cpi	r25, 0x10	; 16
    4d62:	30 f0       	brcs	.+12     	; 0x4d70 <rand_byte+0x4c>
	{
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    4d64:	20 91 1e 2d 	lds	r18, 0x2D1E
    4d68:	90 e1       	ldi	r25, 0x10	; 16
    4d6a:	e0 ec       	ldi	r30, 0xC0	; 192
    4d6c:	f0 e0       	ldi	r31, 0x00	; 0
    4d6e:	e4 cf       	rjmp	.-56     	; 0x4d38 <rand_byte+0x14>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    4d70:	08 95       	ret

00004d72 <rand_short>:

uint16_t rand_short()
{
    4d72:	cf 93       	push	r28
	return ((uint16_t)rand_byte()<<8)|((uint16_t)rand_byte());
    4d74:	0e 94 92 26 	call	0x4d24	; 0x4d24 <rand_byte>
    4d78:	c8 2f       	mov	r28, r24
    4d7a:	0e 94 92 26 	call	0x4d24	; 0x4d24 <rand_byte>
    4d7e:	2c 2f       	mov	r18, r28
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	32 2f       	mov	r19, r18
    4d84:	22 27       	eor	r18, r18
}
    4d86:	a9 01       	movw	r20, r18
    4d88:	48 2b       	or	r20, r24
    4d8a:	ca 01       	movw	r24, r20
    4d8c:	cf 91       	pop	r28
    4d8e:	08 95       	ret

00004d90 <range_algs_init>:
float amplitude_model(float r, uint8_t power){
	if(power==255)			return 15.91+(12985.5/powf(r+0.89,2.0));
	//else if(power ==250)	return (1100./((r-4.)*(r-4.)))+12.5;
	else					printf_P(PSTR("ERROR: Unexpected power: %hhu\r\n"),power);
	return 0;
}
    4d90:	10 92 9d 24 	sts	0x249D, r1
    4d94:	10 92 9e 24 	sts	0x249E, r1
    4d98:	10 92 9f 24 	sts	0x249F, r1
    4d9c:	10 92 a0 24 	sts	0x24A0, r1
    4da0:	e1 e6       	ldi	r30, 0x61	; 97
    4da2:	f6 e2       	ldi	r31, 0x26	; 38
    4da4:	89 ea       	ldi	r24, 0xA9	; 169
    4da6:	96 e2       	ldi	r25, 0x26	; 38
    4da8:	10 82       	st	Z, r1
    4daa:	11 82       	std	Z+1, r1	; 0x01
    4dac:	12 82       	std	Z+2, r1	; 0x02
    4dae:	13 82       	std	Z+3, r1	; 0x03
    4db0:	14 82       	std	Z+4, r1	; 0x04
    4db2:	15 82       	std	Z+5, r1	; 0x05
    4db4:	16 82       	std	Z+6, r1	; 0x06
    4db6:	17 82       	std	Z+7, r1	; 0x07
    4db8:	10 86       	std	Z+8, r1	; 0x08
    4dba:	11 86       	std	Z+9, r1	; 0x09
    4dbc:	12 86       	std	Z+10, r1	; 0x0a
    4dbe:	13 86       	std	Z+11, r1	; 0x0b
    4dc0:	3c 96       	adiw	r30, 0x0c	; 12
    4dc2:	e8 17       	cp	r30, r24
    4dc4:	f9 07       	cpc	r31, r25
    4dc6:	81 f7       	brne	.-32     	; 0x4da8 <range_algs_init+0x18>
    4dc8:	10 92 cc 28 	sts	0x28CC, r1
    4dcc:	10 92 cd 28 	sts	0x28CD, r1
    4dd0:	10 92 a9 26 	sts	0x26A9, r1
    4dd4:	08 95       	ret

00004dd6 <expected_bright_mat>:
    4dd6:	4f 92       	push	r4
    4dd8:	5f 92       	push	r5
    4dda:	6f 92       	push	r6
    4ddc:	7f 92       	push	r7
    4dde:	8f 92       	push	r8
    4de0:	9f 92       	push	r9
    4de2:	af 92       	push	r10
    4de4:	bf 92       	push	r11
    4de6:	cf 92       	push	r12
    4de8:	df 92       	push	r13
    4dea:	ef 92       	push	r14
    4dec:	ff 92       	push	r15
    4dee:	0f 93       	push	r16
    4df0:	1f 93       	push	r17
    4df2:	cf 93       	push	r28
    4df4:	df 93       	push	r29
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
    4dfa:	2c 97       	sbiw	r28, 0x0c	; 12
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	de bf       	out	0x3e, r29	; 62
    4e00:	69 83       	std	Y+1, r22	; 0x01
    4e02:	7a 83       	std	Y+2, r23	; 0x02
    4e04:	8b 83       	std	Y+3, r24	; 0x03
    4e06:	9c 83       	std	Y+4, r25	; 0x04
    4e08:	29 01       	movw	r4, r18
    4e0a:	3a 01       	movw	r6, r20
    4e0c:	c8 01       	movw	r24, r16
    4e0e:	b7 01       	movw	r22, r14
    4e10:	ec 2d       	mov	r30, r12
    4e12:	f0 e0       	ldi	r31, 0x00	; 0
    4e14:	ee 0f       	add	r30, r30
    4e16:	ff 1f       	adc	r31, r31
    4e18:	ee 0f       	add	r30, r30
    4e1a:	ff 1f       	adc	r31, r31
    4e1c:	e2 5c       	subi	r30, 0xC2	; 194
    4e1e:	ff 4d       	sbci	r31, 0xDF	; 223
    4e20:	20 81       	ld	r18, Z
    4e22:	31 81       	ldd	r19, Z+1	; 0x01
    4e24:	42 81       	ldd	r20, Z+2	; 0x02
    4e26:	53 81       	ldd	r21, Z+3	; 0x03
    4e28:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    4e2c:	6b 01       	movw	r12, r22
    4e2e:	7c 01       	movw	r14, r24
    4e30:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    4e34:	6d 83       	std	Y+5, r22	; 0x05
    4e36:	7e 83       	std	Y+6, r23	; 0x06
    4e38:	8f 83       	std	Y+7, r24	; 0x07
    4e3a:	98 87       	std	Y+8, r25	; 0x08
    4e3c:	c7 01       	movw	r24, r14
    4e3e:	b6 01       	movw	r22, r12
    4e40:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    4e44:	69 87       	std	Y+9, r22	; 0x09
    4e46:	7a 87       	std	Y+10, r23	; 0x0a
    4e48:	8b 87       	std	Y+11, r24	; 0x0b
    4e4a:	9c 87       	std	Y+12, r25	; 0x0c
    4e4c:	c3 01       	movw	r24, r6
    4e4e:	b2 01       	movw	r22, r4
    4e50:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    4e54:	b1 2c       	mov	r11, r1
    4e56:	95 01       	movw	r18, r10
    4e58:	22 0f       	add	r18, r18
    4e5a:	33 1f       	adc	r19, r19
    4e5c:	22 0f       	add	r18, r18
    4e5e:	33 1f       	adc	r19, r19
    4e60:	22 0f       	add	r18, r18
    4e62:	33 1f       	adc	r19, r19
    4e64:	89 01       	movw	r16, r18
    4e66:	04 56       	subi	r16, 0x64	; 100
    4e68:	1d 4d       	sbci	r17, 0xDD	; 221
    4e6a:	f8 01       	movw	r30, r16
    4e6c:	80 80       	ld	r8, Z
    4e6e:	91 80       	ldd	r9, Z+1	; 0x01
    4e70:	a2 80       	ldd	r10, Z+2	; 0x02
    4e72:	b3 80       	ldd	r11, Z+3	; 0x03
    4e74:	29 81       	ldd	r18, Y+1	; 0x01
    4e76:	3a 81       	ldd	r19, Y+2	; 0x02
    4e78:	4b 81       	ldd	r20, Y+3	; 0x03
    4e7a:	5c 81       	ldd	r21, Y+4	; 0x04
    4e7c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4e80:	6b 01       	movw	r12, r22
    4e82:	7c 01       	movw	r14, r24
    4e84:	a5 01       	movw	r20, r10
    4e86:	94 01       	movw	r18, r8
    4e88:	6d 81       	ldd	r22, Y+5	; 0x05
    4e8a:	7e 81       	ldd	r23, Y+6	; 0x06
    4e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    4e8e:	98 85       	ldd	r25, Y+8	; 0x08
    4e90:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    4e94:	28 e9       	ldi	r18, 0x98	; 152
    4e96:	3c e4       	ldi	r19, 0x4C	; 76
    4e98:	45 e0       	ldi	r20, 0x05	; 5
    4e9a:	50 e4       	ldi	r21, 0x40	; 64
    4e9c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4ea0:	9b 01       	movw	r18, r22
    4ea2:	ac 01       	movw	r20, r24
    4ea4:	c7 01       	movw	r24, r14
    4ea6:	b6 01       	movw	r22, r12
    4ea8:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    4eac:	6b 01       	movw	r12, r22
    4eae:	7c 01       	movw	r14, r24
    4eb0:	c3 01       	movw	r24, r6
    4eb2:	b2 01       	movw	r22, r4
    4eb4:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    4eb8:	f8 01       	movw	r30, r16
    4eba:	44 80       	ldd	r4, Z+4	; 0x04
    4ebc:	55 80       	ldd	r5, Z+5	; 0x05
    4ebe:	66 80       	ldd	r6, Z+6	; 0x06
    4ec0:	77 80       	ldd	r7, Z+7	; 0x07
    4ec2:	29 81       	ldd	r18, Y+1	; 0x01
    4ec4:	3a 81       	ldd	r19, Y+2	; 0x02
    4ec6:	4b 81       	ldd	r20, Y+3	; 0x03
    4ec8:	5c 81       	ldd	r21, Y+4	; 0x04
    4eca:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4ece:	69 83       	std	Y+1, r22	; 0x01
    4ed0:	7a 83       	std	Y+2, r23	; 0x02
    4ed2:	8b 83       	std	Y+3, r24	; 0x03
    4ed4:	9c 83       	std	Y+4, r25	; 0x04
    4ed6:	a3 01       	movw	r20, r6
    4ed8:	92 01       	movw	r18, r4
    4eda:	69 85       	ldd	r22, Y+9	; 0x09
    4edc:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ede:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ee0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ee2:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    4ee6:	28 e9       	ldi	r18, 0x98	; 152
    4ee8:	3c e4       	ldi	r19, 0x4C	; 76
    4eea:	45 e0       	ldi	r20, 0x05	; 5
    4eec:	50 e4       	ldi	r21, 0x40	; 64
    4eee:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4ef2:	9b 01       	movw	r18, r22
    4ef4:	ac 01       	movw	r20, r24
    4ef6:	69 81       	ldd	r22, Y+1	; 0x01
    4ef8:	7a 81       	ldd	r23, Y+2	; 0x02
    4efa:	8b 81       	ldd	r24, Y+3	; 0x03
    4efc:	9c 81       	ldd	r25, Y+4	; 0x04
    4efe:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    4f02:	69 83       	std	Y+1, r22	; 0x01
    4f04:	7a 83       	std	Y+2, r23	; 0x02
    4f06:	8b 83       	std	Y+3, r24	; 0x03
    4f08:	9c 83       	std	Y+4, r25	; 0x04
    4f0a:	a7 01       	movw	r20, r14
    4f0c:	96 01       	movw	r18, r12
    4f0e:	c5 01       	movw	r24, r10
    4f10:	b4 01       	movw	r22, r8
    4f12:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4f16:	4b 01       	movw	r8, r22
    4f18:	5c 01       	movw	r10, r24
    4f1a:	29 81       	ldd	r18, Y+1	; 0x01
    4f1c:	3a 81       	ldd	r19, Y+2	; 0x02
    4f1e:	4b 81       	ldd	r20, Y+3	; 0x03
    4f20:	5c 81       	ldd	r21, Y+4	; 0x04
    4f22:	c3 01       	movw	r24, r6
    4f24:	b2 01       	movw	r22, r4
    4f26:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4f2a:	9b 01       	movw	r18, r22
    4f2c:	ac 01       	movw	r20, r24
    4f2e:	c5 01       	movw	r24, r10
    4f30:	b4 01       	movw	r22, r8
    4f32:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    4f36:	4b 01       	movw	r8, r22
    4f38:	5c 01       	movw	r10, r24
    4f3a:	c7 01       	movw	r24, r14
    4f3c:	b6 01       	movw	r22, r12
    4f3e:	90 58       	subi	r25, 0x80	; 128
    4f40:	2d 81       	ldd	r18, Y+5	; 0x05
    4f42:	3e 81       	ldd	r19, Y+6	; 0x06
    4f44:	4f 81       	ldd	r20, Y+7	; 0x07
    4f46:	58 85       	ldd	r21, Y+8	; 0x08
    4f48:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4f4c:	2b 01       	movw	r4, r22
    4f4e:	3c 01       	movw	r6, r24
    4f50:	29 85       	ldd	r18, Y+9	; 0x09
    4f52:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f54:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f56:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f58:	69 81       	ldd	r22, Y+1	; 0x01
    4f5a:	7a 81       	ldd	r23, Y+2	; 0x02
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f60:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4f64:	9b 01       	movw	r18, r22
    4f66:	ac 01       	movw	r20, r24
    4f68:	c3 01       	movw	r24, r6
    4f6a:	b2 01       	movw	r22, r4
    4f6c:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    4f70:	2b 01       	movw	r4, r22
    4f72:	3c 01       	movw	r6, r24
    4f74:	29 81       	ldd	r18, Y+1	; 0x01
    4f76:	3a 81       	ldd	r19, Y+2	; 0x02
    4f78:	4b 81       	ldd	r20, Y+3	; 0x03
    4f7a:	5c 81       	ldd	r21, Y+4	; 0x04
    4f7c:	c7 01       	movw	r24, r14
    4f7e:	b6 01       	movw	r22, r12
    4f80:	0e 94 df 49 	call	0x93be	; 0x93be <hypot>
    4f84:	6b 01       	movw	r12, r22
    4f86:	7c 01       	movw	r14, r24
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	a9 01       	movw	r20, r18
    4f8e:	c5 01       	movw	r24, r10
    4f90:	b4 01       	movw	r22, r8
    4f92:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    4f96:	18 16       	cp	r1, r24
    4f98:	0c f0       	brlt	.+2      	; 0x4f9c <expected_bright_mat+0x1c6>
    4f9a:	49 c0       	rjmp	.+146    	; 0x502e <expected_bright_mat+0x258>
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	a9 01       	movw	r20, r18
    4fa2:	c3 01       	movw	r24, r6
    4fa4:	b2 01       	movw	r22, r4
    4fa6:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    4faa:	18 16       	cp	r1, r24
    4fac:	0c f0       	brlt	.+2      	; 0x4fb0 <expected_bright_mat+0x1da>
    4fae:	43 c0       	rjmp	.+134    	; 0x5036 <expected_bright_mat+0x260>
    4fb0:	2a e0       	ldi	r18, 0x0A	; 10
    4fb2:	37 ed       	ldi	r19, 0xD7	; 215
    4fb4:	43 e6       	ldi	r20, 0x63	; 99
    4fb6:	5f e3       	ldi	r21, 0x3F	; 63
    4fb8:	c7 01       	movw	r24, r14
    4fba:	b6 01       	movw	r22, r12
    4fbc:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    4fc0:	69 83       	std	Y+1, r22	; 0x01
    4fc2:	7a 83       	std	Y+2, r23	; 0x02
    4fc4:	8b 83       	std	Y+3, r24	; 0x03
    4fc6:	9c 83       	std	Y+4, r25	; 0x04
    4fc8:	a3 01       	movw	r20, r6
    4fca:	92 01       	movw	r18, r4
    4fcc:	c5 01       	movw	r24, r10
    4fce:	b4 01       	movw	r22, r8
    4fd0:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4fd4:	4b 01       	movw	r8, r22
    4fd6:	5c 01       	movw	r10, r24
    4fd8:	29 81       	ldd	r18, Y+1	; 0x01
    4fda:	3a 81       	ldd	r19, Y+2	; 0x02
    4fdc:	4b 81       	ldd	r20, Y+3	; 0x03
    4fde:	5c 81       	ldd	r21, Y+4	; 0x04
    4fe0:	ca 01       	movw	r24, r20
    4fe2:	b9 01       	movw	r22, r18
    4fe4:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    4fe8:	9b 01       	movw	r18, r22
    4fea:	ac 01       	movw	r20, r24
    4fec:	60 e0       	ldi	r22, 0x00	; 0
    4fee:	76 ee       	ldi	r23, 0xE6	; 230
    4ff0:	8a e4       	ldi	r24, 0x4A	; 74
    4ff2:	96 e4       	ldi	r25, 0x46	; 70
    4ff4:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    4ff8:	2c e5       	ldi	r18, 0x5C	; 92
    4ffa:	3f e8       	ldi	r19, 0x8F	; 143
    4ffc:	4e e7       	ldi	r20, 0x7E	; 126
    4ffe:	51 e4       	ldi	r21, 0x41	; 65
    5000:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5004:	9b 01       	movw	r18, r22
    5006:	ac 01       	movw	r20, r24
    5008:	c5 01       	movw	r24, r10
    500a:	b4 01       	movw	r22, r8
    500c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5010:	4b 01       	movw	r8, r22
    5012:	5c 01       	movw	r10, r24
    5014:	a7 01       	movw	r20, r14
    5016:	96 01       	movw	r18, r12
    5018:	c7 01       	movw	r24, r14
    501a:	b6 01       	movw	r22, r12
    501c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5020:	9b 01       	movw	r18, r22
    5022:	ac 01       	movw	r20, r24
    5024:	c5 01       	movw	r24, r10
    5026:	b4 01       	movw	r22, r8
    5028:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    502c:	07 c0       	rjmp	.+14     	; 0x503c <expected_bright_mat+0x266>
    502e:	60 e0       	ldi	r22, 0x00	; 0
    5030:	70 e0       	ldi	r23, 0x00	; 0
    5032:	cb 01       	movw	r24, r22
    5034:	03 c0       	rjmp	.+6      	; 0x503c <expected_bright_mat+0x266>
    5036:	60 e0       	ldi	r22, 0x00	; 0
    5038:	70 e0       	ldi	r23, 0x00	; 0
    503a:	cb 01       	movw	r24, r22
    503c:	2c 96       	adiw	r28, 0x0c	; 12
    503e:	cd bf       	out	0x3d, r28	; 61
    5040:	de bf       	out	0x3e, r29	; 62
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	cf 90       	pop	r12
    5052:	bf 90       	pop	r11
    5054:	af 90       	pop	r10
    5056:	9f 90       	pop	r9
    5058:	8f 90       	pop	r8
    505a:	7f 90       	pop	r7
    505c:	6f 90       	pop	r6
    505e:	5f 90       	pop	r5
    5060:	4f 90       	pop	r4
    5062:	08 95       	ret

00005064 <calculate_innovation>:
    5064:	2f 92       	push	r2
    5066:	3f 92       	push	r3
    5068:	4f 92       	push	r4
    506a:	5f 92       	push	r5
    506c:	6f 92       	push	r6
    506e:	7f 92       	push	r7
    5070:	8f 92       	push	r8
    5072:	9f 92       	push	r9
    5074:	af 92       	push	r10
    5076:	bf 92       	push	r11
    5078:	cf 92       	push	r12
    507a:	df 92       	push	r13
    507c:	ef 92       	push	r14
    507e:	ff 92       	push	r15
    5080:	0f 93       	push	r16
    5082:	1f 93       	push	r17
    5084:	cf 93       	push	r28
    5086:	df 93       	push	r29
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62
    508c:	ca 5a       	subi	r28, 0xAA	; 170
    508e:	d1 09       	sbc	r29, r1
    5090:	cd bf       	out	0x3d, r28	; 61
    5092:	de bf       	out	0x3e, r29	; 62
    5094:	c9 56       	subi	r28, 0x69	; 105
    5096:	df 4f       	sbci	r29, 0xFF	; 255
    5098:	68 83       	st	Y, r22
    509a:	79 83       	std	Y+1, r23	; 0x01
    509c:	8a 83       	std	Y+2, r24	; 0x02
    509e:	9b 83       	std	Y+3, r25	; 0x03
    50a0:	c7 59       	subi	r28, 0x97	; 151
    50a2:	d0 40       	sbci	r29, 0x00	; 0
    50a4:	c5 56       	subi	r28, 0x65	; 101
    50a6:	df 4f       	sbci	r29, 0xFF	; 255
    50a8:	28 83       	st	Y, r18
    50aa:	39 83       	std	Y+1, r19	; 0x01
    50ac:	4a 83       	std	Y+2, r20	; 0x02
    50ae:	5b 83       	std	Y+3, r21	; 0x03
    50b0:	cb 59       	subi	r28, 0x9B	; 155
    50b2:	d0 40       	sbci	r29, 0x00	; 0
    50b4:	c1 56       	subi	r28, 0x61	; 97
    50b6:	df 4f       	sbci	r29, 0xFF	; 255
    50b8:	e8 82       	st	Y, r14
    50ba:	f9 82       	std	Y+1, r15	; 0x01
    50bc:	0a 83       	std	Y+2, r16	; 0x02
    50be:	1b 83       	std	Y+3, r17	; 0x03
    50c0:	cf 59       	subi	r28, 0x9F	; 159
    50c2:	d0 40       	sbci	r29, 0x00	; 0
    50c4:	9e 01       	movw	r18, r28
    50c6:	2f 5f       	subi	r18, 0xFF	; 255
    50c8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ca:	c9 55       	subi	r28, 0x59	; 89
    50cc:	df 4f       	sbci	r29, 0xFF	; 255
    50ce:	28 83       	st	Y, r18
    50d0:	39 83       	std	Y+1, r19	; 0x01
    50d2:	c7 5a       	subi	r28, 0xA7	; 167
    50d4:	d0 40       	sbci	r29, 0x00	; 0
    50d6:	81 e6       	ldi	r24, 0x61	; 97
    50d8:	96 e2       	ldi	r25, 0x26	; 38
    50da:	c7 55       	subi	r28, 0x57	; 87
    50dc:	df 4f       	sbci	r29, 0xFF	; 255
    50de:	88 83       	st	Y, r24
    50e0:	99 83       	std	Y+1, r25	; 0x01
    50e2:	c9 5a       	subi	r28, 0xA9	; 169
    50e4:	d0 40       	sbci	r29, 0x00	; 0
    50e6:	b1 2c       	mov	r11, r1
    50e8:	61 2c       	mov	r6, r1
    50ea:	71 2c       	mov	r7, r1
    50ec:	43 01       	movw	r8, r6
    50ee:	cd 56       	subi	r28, 0x6D	; 109
    50f0:	df 4f       	sbci	r29, 0xFF	; 255
    50f2:	68 82       	st	Y, r6
    50f4:	79 82       	std	Y+1, r7	; 0x01
    50f6:	8a 82       	std	Y+2, r8	; 0x02
    50f8:	9b 82       	std	Y+3, r9	; 0x03
    50fa:	c3 59       	subi	r28, 0x93	; 147
    50fc:	d0 40       	sbci	r29, 0x00	; 0
    50fe:	cd 55       	subi	r28, 0x5D	; 93
    5100:	df 4f       	sbci	r29, 0xFF	; 255
    5102:	28 83       	st	Y, r18
    5104:	39 83       	std	Y+1, r19	; 0x01
    5106:	c3 5a       	subi	r28, 0xA3	; 163
    5108:	d0 40       	sbci	r29, 0x00	; 0
    510a:	cb 55       	subi	r28, 0x5B	; 91
    510c:	df 4f       	sbci	r29, 0xFF	; 255
    510e:	88 83       	st	Y, r24
    5110:	99 83       	std	Y+1, r25	; 0x01
    5112:	c5 5a       	subi	r28, 0xA5	; 165
    5114:	d0 40       	sbci	r29, 0x00	; 0
    5116:	23 01       	movw	r4, r6
    5118:	34 01       	movw	r6, r8
    511a:	6d c0       	rjmp	.+218    	; 0x51f6 <calculate_innovation+0x192>
    511c:	ad 2c       	mov	r10, r13
    511e:	cb 2c       	mov	r12, r11
    5120:	c1 56       	subi	r28, 0x61	; 97
    5122:	df 4f       	sbci	r29, 0xFF	; 255
    5124:	e8 80       	ld	r14, Y
    5126:	f9 80       	ldd	r15, Y+1	; 0x01
    5128:	0a 81       	ldd	r16, Y+2	; 0x02
    512a:	1b 81       	ldd	r17, Y+3	; 0x03
    512c:	cf 59       	subi	r28, 0x9F	; 159
    512e:	d0 40       	sbci	r29, 0x00	; 0
    5130:	c5 56       	subi	r28, 0x65	; 101
    5132:	df 4f       	sbci	r29, 0xFF	; 255
    5134:	28 81       	ld	r18, Y
    5136:	39 81       	ldd	r19, Y+1	; 0x01
    5138:	4a 81       	ldd	r20, Y+2	; 0x02
    513a:	5b 81       	ldd	r21, Y+3	; 0x03
    513c:	cb 59       	subi	r28, 0x9B	; 155
    513e:	d0 40       	sbci	r29, 0x00	; 0
    5140:	c9 56       	subi	r28, 0x69	; 105
    5142:	df 4f       	sbci	r29, 0xFF	; 255
    5144:	68 81       	ld	r22, Y
    5146:	79 81       	ldd	r23, Y+1	; 0x01
    5148:	8a 81       	ldd	r24, Y+2	; 0x02
    514a:	9b 81       	ldd	r25, Y+3	; 0x03
    514c:	c7 59       	subi	r28, 0x97	; 151
    514e:	d0 40       	sbci	r29, 0x00	; 0
    5150:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <expected_bright_mat>
    5154:	f4 01       	movw	r30, r8
    5156:	61 93       	st	Z+, r22
    5158:	71 93       	st	Z+, r23
    515a:	81 93       	st	Z+, r24
    515c:	91 93       	st	Z+, r25
    515e:	4f 01       	movw	r8, r30
    5160:	9b 01       	movw	r18, r22
    5162:	ac 01       	movw	r20, r24
    5164:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5168:	9b 01       	movw	r18, r22
    516a:	ac 01       	movw	r20, r24
    516c:	cd 56       	subi	r28, 0x6D	; 109
    516e:	df 4f       	sbci	r29, 0xFF	; 255
    5170:	68 81       	ld	r22, Y
    5172:	79 81       	ldd	r23, Y+1	; 0x01
    5174:	8a 81       	ldd	r24, Y+2	; 0x02
    5176:	9b 81       	ldd	r25, Y+3	; 0x03
    5178:	c3 59       	subi	r28, 0x93	; 147
    517a:	d0 40       	sbci	r29, 0x00	; 0
    517c:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5180:	cd 56       	subi	r28, 0x6D	; 109
    5182:	df 4f       	sbci	r29, 0xFF	; 255
    5184:	68 83       	st	Y, r22
    5186:	79 83       	std	Y+1, r23	; 0x01
    5188:	8a 83       	std	Y+2, r24	; 0x02
    518a:	9b 83       	std	Y+3, r25	; 0x03
    518c:	c3 59       	subi	r28, 0x93	; 147
    518e:	d0 40       	sbci	r29, 0x00	; 0
    5190:	f1 01       	movw	r30, r2
    5192:	a1 91       	ld	r26, Z+
    5194:	b1 91       	ld	r27, Z+
    5196:	1f 01       	movw	r2, r30
    5198:	9d 01       	movw	r18, r26
    519a:	0e 94 5e 50 	call	0xa0bc	; 0xa0bc <__mulhisi3>
    519e:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    51a2:	9b 01       	movw	r18, r22
    51a4:	ac 01       	movw	r20, r24
    51a6:	c3 01       	movw	r24, r6
    51a8:	b2 01       	movw	r22, r4
    51aa:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    51ae:	2b 01       	movw	r4, r22
    51b0:	3c 01       	movw	r6, r24
    51b2:	d3 94       	inc	r13
    51b4:	f6 e0       	ldi	r31, 0x06	; 6
    51b6:	df 12       	cpse	r13, r31
    51b8:	b1 cf       	rjmp	.-158    	; 0x511c <calculate_innovation+0xb8>
    51ba:	b3 94       	inc	r11
    51bc:	cd 55       	subi	r28, 0x5D	; 93
    51be:	df 4f       	sbci	r29, 0xFF	; 255
    51c0:	28 81       	ld	r18, Y
    51c2:	39 81       	ldd	r19, Y+1	; 0x01
    51c4:	c3 5a       	subi	r28, 0xA3	; 163
    51c6:	d0 40       	sbci	r29, 0x00	; 0
    51c8:	28 5e       	subi	r18, 0xE8	; 232
    51ca:	3f 4f       	sbci	r19, 0xFF	; 255
    51cc:	cd 55       	subi	r28, 0x5D	; 93
    51ce:	df 4f       	sbci	r29, 0xFF	; 255
    51d0:	28 83       	st	Y, r18
    51d2:	39 83       	std	Y+1, r19	; 0x01
    51d4:	c3 5a       	subi	r28, 0xA3	; 163
    51d6:	d0 40       	sbci	r29, 0x00	; 0
    51d8:	cb 55       	subi	r28, 0x5B	; 91
    51da:	df 4f       	sbci	r29, 0xFF	; 255
    51dc:	88 81       	ld	r24, Y
    51de:	99 81       	ldd	r25, Y+1	; 0x01
    51e0:	c5 5a       	subi	r28, 0xA5	; 165
    51e2:	d0 40       	sbci	r29, 0x00	; 0
    51e4:	0c 96       	adiw	r24, 0x0c	; 12
    51e6:	cb 55       	subi	r28, 0x5B	; 91
    51e8:	df 4f       	sbci	r29, 0xFF	; 255
    51ea:	88 83       	st	Y, r24
    51ec:	99 83       	std	Y+1, r25	; 0x01
    51ee:	c5 5a       	subi	r28, 0xA5	; 165
    51f0:	d0 40       	sbci	r29, 0x00	; 0
    51f2:	bf 16       	cp	r11, r31
    51f4:	71 f0       	breq	.+28     	; 0x5212 <calculate_innovation+0x1ae>
    51f6:	cb 55       	subi	r28, 0x5B	; 91
    51f8:	df 4f       	sbci	r29, 0xFF	; 255
    51fa:	28 80       	ld	r2, Y
    51fc:	39 80       	ldd	r3, Y+1	; 0x01
    51fe:	c5 5a       	subi	r28, 0xA5	; 165
    5200:	d0 40       	sbci	r29, 0x00	; 0
    5202:	cd 55       	subi	r28, 0x5D	; 93
    5204:	df 4f       	sbci	r29, 0xFF	; 255
    5206:	88 80       	ld	r8, Y
    5208:	99 80       	ldd	r9, Y+1	; 0x01
    520a:	c3 5a       	subi	r28, 0xA3	; 163
    520c:	d0 40       	sbci	r29, 0x00	; 0
    520e:	d1 2c       	mov	r13, r1
    5210:	85 cf       	rjmp	.-246    	; 0x511c <calculate_innovation+0xb8>
    5212:	43 01       	movw	r8, r6
    5214:	32 01       	movw	r6, r4
    5216:	20 e0       	ldi	r18, 0x00	; 0
    5218:	30 e0       	ldi	r19, 0x00	; 0
    521a:	40 e0       	ldi	r20, 0x00	; 0
    521c:	5f eb       	ldi	r21, 0xBF	; 191
    521e:	cd 56       	subi	r28, 0x6D	; 109
    5220:	df 4f       	sbci	r29, 0xFF	; 255
    5222:	68 81       	ld	r22, Y
    5224:	79 81       	ldd	r23, Y+1	; 0x01
    5226:	8a 81       	ldd	r24, Y+2	; 0x02
    5228:	9b 81       	ldd	r25, Y+3	; 0x03
    522a:	c3 59       	subi	r28, 0x93	; 147
    522c:	d0 40       	sbci	r29, 0x00	; 0
    522e:	0e 94 ed 4a 	call	0x95da	; 0x95da <pow>
    5232:	e6 2e       	mov	r14, r22
    5234:	37 2e       	mov	r3, r23
    5236:	28 2e       	mov	r2, r24
    5238:	c9 56       	subi	r28, 0x69	; 105
    523a:	df 4f       	sbci	r29, 0xFF	; 255
    523c:	98 83       	st	Y, r25
    523e:	c7 59       	subi	r28, 0x97	; 151
    5240:	d0 40       	sbci	r29, 0x00	; 0
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	5f eb       	ldi	r21, 0xBF	; 191
    524a:	c4 01       	movw	r24, r8
    524c:	b3 01       	movw	r22, r6
    524e:	0e 94 ed 4a 	call	0x95da	; 0x95da <pow>
    5252:	c5 56       	subi	r28, 0x65	; 101
    5254:	df 4f       	sbci	r29, 0xFF	; 255
    5256:	68 83       	st	Y, r22
    5258:	cb 59       	subi	r28, 0x9B	; 155
    525a:	d0 40       	sbci	r29, 0x00	; 0
    525c:	c1 56       	subi	r28, 0x61	; 97
    525e:	df 4f       	sbci	r29, 0xFF	; 255
    5260:	78 83       	st	Y, r23
    5262:	cf 59       	subi	r28, 0x9F	; 159
    5264:	d0 40       	sbci	r29, 0x00	; 0
    5266:	cd 55       	subi	r28, 0x5D	; 93
    5268:	df 4f       	sbci	r29, 0xFF	; 255
    526a:	88 83       	st	Y, r24
    526c:	c3 5a       	subi	r28, 0xA3	; 163
    526e:	d0 40       	sbci	r29, 0x00	; 0
    5270:	cb 55       	subi	r28, 0x5B	; 91
    5272:	df 4f       	sbci	r29, 0xFF	; 255
    5274:	98 83       	st	Y, r25
    5276:	c5 5a       	subi	r28, 0xA5	; 165
    5278:	d0 40       	sbci	r29, 0x00	; 0
    527a:	fe 01       	movw	r30, r28
    527c:	ef 56       	subi	r30, 0x6F	; 111
    527e:	ff 4f       	sbci	r31, 0xFF	; 255
    5280:	cf 56       	subi	r28, 0x6F	; 111
    5282:	df 4f       	sbci	r29, 0xFF	; 255
    5284:	e8 83       	st	Y, r30
    5286:	f9 83       	std	Y+1, r31	; 0x01
    5288:	c1 59       	subi	r28, 0x91	; 145
    528a:	d0 40       	sbci	r29, 0x00	; 0
    528c:	41 2c       	mov	r4, r1
    528e:	51 2c       	mov	r5, r1
    5290:	32 01       	movw	r6, r4
    5292:	0e 2d       	mov	r16, r14
    5294:	76 c0       	rjmp	.+236    	; 0x5382 <calculate_innovation+0x31e>
    5296:	f6 01       	movw	r30, r12
    5298:	61 91       	ld	r22, Z+
    529a:	71 91       	ld	r23, Z+
    529c:	6f 01       	movw	r12, r30
    529e:	f7 01       	movw	r30, r14
    52a0:	81 90       	ld	r8, Z+
    52a2:	91 90       	ld	r9, Z+
    52a4:	a1 90       	ld	r10, Z+
    52a6:	b1 90       	ld	r11, Z+
    52a8:	7f 01       	movw	r14, r30
    52aa:	07 2e       	mov	r0, r23
    52ac:	00 0c       	add	r0, r0
    52ae:	88 0b       	sbc	r24, r24
    52b0:	99 0b       	sbc	r25, r25
    52b2:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    52b6:	c5 56       	subi	r28, 0x65	; 101
    52b8:	df 4f       	sbci	r29, 0xFF	; 255
    52ba:	28 81       	ld	r18, Y
    52bc:	cb 59       	subi	r28, 0x9B	; 155
    52be:	d0 40       	sbci	r29, 0x00	; 0
    52c0:	c1 56       	subi	r28, 0x61	; 97
    52c2:	df 4f       	sbci	r29, 0xFF	; 255
    52c4:	38 81       	ld	r19, Y
    52c6:	cf 59       	subi	r28, 0x9F	; 159
    52c8:	d0 40       	sbci	r29, 0x00	; 0
    52ca:	cd 55       	subi	r28, 0x5D	; 93
    52cc:	df 4f       	sbci	r29, 0xFF	; 255
    52ce:	48 81       	ld	r20, Y
    52d0:	c3 5a       	subi	r28, 0xA3	; 163
    52d2:	d0 40       	sbci	r29, 0x00	; 0
    52d4:	cb 55       	subi	r28, 0x5B	; 91
    52d6:	df 4f       	sbci	r29, 0xFF	; 255
    52d8:	58 81       	ld	r21, Y
    52da:	c5 5a       	subi	r28, 0xA5	; 165
    52dc:	d0 40       	sbci	r29, 0x00	; 0
    52de:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    52e2:	cd 56       	subi	r28, 0x6D	; 109
    52e4:	df 4f       	sbci	r29, 0xFF	; 255
    52e6:	68 83       	st	Y, r22
    52e8:	79 83       	std	Y+1, r23	; 0x01
    52ea:	8a 83       	std	Y+2, r24	; 0x02
    52ec:	9b 83       	std	Y+3, r25	; 0x03
    52ee:	c3 59       	subi	r28, 0x93	; 147
    52f0:	d0 40       	sbci	r29, 0x00	; 0
    52f2:	20 2f       	mov	r18, r16
    52f4:	33 2d       	mov	r19, r3
    52f6:	42 2d       	mov	r20, r2
    52f8:	c9 56       	subi	r28, 0x69	; 105
    52fa:	df 4f       	sbci	r29, 0xFF	; 255
    52fc:	58 81       	ld	r21, Y
    52fe:	c7 59       	subi	r28, 0x97	; 151
    5300:	d0 40       	sbci	r29, 0x00	; 0
    5302:	c5 01       	movw	r24, r10
    5304:	b4 01       	movw	r22, r8
    5306:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    530a:	9b 01       	movw	r18, r22
    530c:	ac 01       	movw	r20, r24
    530e:	cd 56       	subi	r28, 0x6D	; 109
    5310:	df 4f       	sbci	r29, 0xFF	; 255
    5312:	68 81       	ld	r22, Y
    5314:	79 81       	ldd	r23, Y+1	; 0x01
    5316:	8a 81       	ldd	r24, Y+2	; 0x02
    5318:	9b 81       	ldd	r25, Y+3	; 0x03
    531a:	c3 59       	subi	r28, 0x93	; 147
    531c:	d0 40       	sbci	r29, 0x00	; 0
    531e:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5322:	9b 01       	movw	r18, r22
    5324:	ac 01       	movw	r20, r24
    5326:	5f 77       	andi	r21, 0x7F	; 127
    5328:	c3 01       	movw	r24, r6
    532a:	b2 01       	movw	r22, r4
    532c:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5330:	2b 01       	movw	r4, r22
    5332:	3c 01       	movw	r6, r24
    5334:	11 50       	subi	r17, 0x01	; 1
    5336:	09 f0       	breq	.+2      	; 0x533a <calculate_innovation+0x2d6>
    5338:	ae cf       	rjmp	.-164    	; 0x5296 <calculate_innovation+0x232>
    533a:	c7 55       	subi	r28, 0x57	; 87
    533c:	df 4f       	sbci	r29, 0xFF	; 255
    533e:	28 81       	ld	r18, Y
    5340:	39 81       	ldd	r19, Y+1	; 0x01
    5342:	c9 5a       	subi	r28, 0xA9	; 169
    5344:	d0 40       	sbci	r29, 0x00	; 0
    5346:	24 5f       	subi	r18, 0xF4	; 244
    5348:	3f 4f       	sbci	r19, 0xFF	; 255
    534a:	c7 55       	subi	r28, 0x57	; 87
    534c:	df 4f       	sbci	r29, 0xFF	; 255
    534e:	28 83       	st	Y, r18
    5350:	39 83       	std	Y+1, r19	; 0x01
    5352:	c9 5a       	subi	r28, 0xA9	; 169
    5354:	d0 40       	sbci	r29, 0x00	; 0
    5356:	c9 55       	subi	r28, 0x59	; 89
    5358:	df 4f       	sbci	r29, 0xFF	; 255
    535a:	88 81       	ld	r24, Y
    535c:	99 81       	ldd	r25, Y+1	; 0x01
    535e:	c7 5a       	subi	r28, 0xA7	; 167
    5360:	d0 40       	sbci	r29, 0x00	; 0
    5362:	48 96       	adiw	r24, 0x18	; 24
    5364:	c9 55       	subi	r28, 0x59	; 89
    5366:	df 4f       	sbci	r29, 0xFF	; 255
    5368:	88 83       	st	Y, r24
    536a:	99 83       	std	Y+1, r25	; 0x01
    536c:	c7 5a       	subi	r28, 0xA7	; 167
    536e:	d0 40       	sbci	r29, 0x00	; 0
    5370:	cf 56       	subi	r28, 0x6F	; 111
    5372:	df 4f       	sbci	r29, 0xFF	; 255
    5374:	e8 81       	ld	r30, Y
    5376:	f9 81       	ldd	r31, Y+1	; 0x01
    5378:	c1 59       	subi	r28, 0x91	; 145
    537a:	d0 40       	sbci	r29, 0x00	; 0
    537c:	8e 17       	cp	r24, r30
    537e:	9f 07       	cpc	r25, r31
    5380:	89 f0       	breq	.+34     	; 0x53a4 <calculate_innovation+0x340>
    5382:	c9 55       	subi	r28, 0x59	; 89
    5384:	df 4f       	sbci	r29, 0xFF	; 255
    5386:	c8 80       	ld	r12, Y
    5388:	d9 80       	ldd	r13, Y+1	; 0x01
    538a:	c7 5a       	subi	r28, 0xA7	; 167
    538c:	d0 40       	sbci	r29, 0x00	; 0
    538e:	c7 55       	subi	r28, 0x57	; 87
    5390:	df 4f       	sbci	r29, 0xFF	; 255
    5392:	e8 80       	ld	r14, Y
    5394:	f9 80       	ldd	r15, Y+1	; 0x01
    5396:	c9 5a       	subi	r28, 0xA9	; 169
    5398:	d0 40       	sbci	r29, 0x00	; 0
    539a:	16 e0       	ldi	r17, 0x06	; 6
    539c:	c7 01       	movw	r24, r14
    539e:	76 01       	movw	r14, r12
    53a0:	6c 01       	movw	r12, r24
    53a2:	79 cf       	rjmp	.-270    	; 0x5296 <calculate_innovation+0x232>
    53a4:	c3 01       	movw	r24, r6
    53a6:	b2 01       	movw	r22, r4
    53a8:	c6 55       	subi	r28, 0x56	; 86
    53aa:	df 4f       	sbci	r29, 0xFF	; 255
    53ac:	cd bf       	out	0x3d, r28	; 61
    53ae:	de bf       	out	0x3e, r29	; 62
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	1f 91       	pop	r17
    53b6:	0f 91       	pop	r16
    53b8:	ff 90       	pop	r15
    53ba:	ef 90       	pop	r14
    53bc:	df 90       	pop	r13
    53be:	cf 90       	pop	r12
    53c0:	bf 90       	pop	r11
    53c2:	af 90       	pop	r10
    53c4:	9f 90       	pop	r9
    53c6:	8f 90       	pop	r8
    53c8:	7f 90       	pop	r7
    53ca:	6f 90       	pop	r6
    53cc:	5f 90       	pop	r5
    53ce:	4f 90       	pop	r4
    53d0:	3f 90       	pop	r3
    53d2:	2f 90       	pop	r2
    53d4:	08 95       	ret

000053d6 <calculate_bearing_and_heading>:
    53d6:	2f 92       	push	r2
    53d8:	3f 92       	push	r3
    53da:	4f 92       	push	r4
    53dc:	5f 92       	push	r5
    53de:	6f 92       	push	r6
    53e0:	7f 92       	push	r7
    53e2:	8f 92       	push	r8
    53e4:	9f 92       	push	r9
    53e6:	af 92       	push	r10
    53e8:	bf 92       	push	r11
    53ea:	cf 92       	push	r12
    53ec:	df 92       	push	r13
    53ee:	ef 92       	push	r14
    53f0:	ff 92       	push	r15
    53f2:	0f 93       	push	r16
    53f4:	1f 93       	push	r17
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62
    53fe:	62 97       	sbiw	r28, 0x12	; 18
    5400:	cd bf       	out	0x3d, r28	; 61
    5402:	de bf       	out	0x3e, r29	; 62
    5404:	8d 87       	std	Y+13, r24	; 0x0d
    5406:	9e 87       	std	Y+14, r25	; 0x0e
    5408:	6f 87       	std	Y+15, r22	; 0x0f
    540a:	78 8b       	std	Y+16, r23	; 0x10
    540c:	0f 2e       	mov	r0, r31
    540e:	f1 e6       	ldi	r31, 0x61	; 97
    5410:	8f 2e       	mov	r8, r31
    5412:	f6 e2       	ldi	r31, 0x26	; 38
    5414:	9f 2e       	mov	r9, r31
    5416:	f0 2d       	mov	r31, r0
    5418:	21 2c       	mov	r2, r1
    541a:	41 2c       	mov	r4, r1
    541c:	51 2c       	mov	r5, r1
    541e:	32 01       	movw	r6, r4
    5420:	49 86       	std	Y+9, r4	; 0x09
    5422:	5a 86       	std	Y+10, r5	; 0x0a
    5424:	6b 86       	std	Y+11, r6	; 0x0b
    5426:	7c 86       	std	Y+12, r7	; 0x0c
    5428:	4d 82       	std	Y+5, r4	; 0x05
    542a:	5e 82       	std	Y+6, r5	; 0x06
    542c:	6f 82       	std	Y+7, r6	; 0x07
    542e:	78 86       	std	Y+8, r7	; 0x08
    5430:	49 82       	std	Y+1, r4	; 0x01
    5432:	5a 82       	std	Y+2, r5	; 0x02
    5434:	6b 82       	std	Y+3, r6	; 0x03
    5436:	7c 82       	std	Y+4, r7	; 0x04
    5438:	0f 2e       	mov	r0, r31
    543a:	f6 e0       	ldi	r31, 0x06	; 6
    543c:	af 2e       	mov	r10, r31
    543e:	b1 2c       	mov	r11, r1
    5440:	f0 2d       	mov	r31, r0
    5442:	73 01       	movw	r14, r6
    5444:	62 01       	movw	r12, r4
    5446:	12 2d       	mov	r17, r2
    5448:	14 01       	movw	r2, r8
    544a:	f1 01       	movw	r30, r2
    544c:	61 91       	ld	r22, Z+
    544e:	71 91       	ld	r23, Z+
    5450:	1f 01       	movw	r2, r30
    5452:	07 2e       	mov	r0, r23
    5454:	00 0c       	add	r0, r0
    5456:	88 0b       	sbc	r24, r24
    5458:	99 0b       	sbc	r25, r25
    545a:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    545e:	2b 01       	movw	r4, r22
    5460:	3c 01       	movw	r6, r24
    5462:	fb ea       	ldi	r31, 0xAB	; 171
    5464:	1f 9f       	mul	r17, r31
    5466:	01 2d       	mov	r16, r1
    5468:	11 24       	eor	r1, r1
    546a:	06 95       	lsr	r16
    546c:	06 95       	lsr	r16
    546e:	80 2f       	mov	r24, r16
    5470:	88 0f       	add	r24, r24
    5472:	80 0f       	add	r24, r16
    5474:	88 0f       	add	r24, r24
    5476:	81 2e       	mov	r8, r17
    5478:	88 1a       	sub	r8, r24
    547a:	91 2c       	mov	r9, r1
    547c:	c4 01       	movw	r24, r8
    547e:	88 0f       	add	r24, r24
    5480:	99 1f       	adc	r25, r25
    5482:	88 0f       	add	r24, r24
    5484:	99 1f       	adc	r25, r25
    5486:	88 0f       	add	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	9c 01       	movw	r18, r24
    548c:	24 56       	subi	r18, 0x64	; 100
    548e:	3d 4d       	sbci	r19, 0xDD	; 221
    5490:	29 8b       	std	Y+17, r18	; 0x11
    5492:	3a 8b       	std	Y+18, r19	; 0x12
    5494:	f9 01       	movw	r30, r18
    5496:	20 81       	ld	r18, Z
    5498:	31 81       	ldd	r19, Z+1	; 0x01
    549a:	42 81       	ldd	r20, Z+2	; 0x02
    549c:	53 81       	ldd	r21, Z+3	; 0x03
    549e:	c3 01       	movw	r24, r6
    54a0:	b2 01       	movw	r22, r4
    54a2:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    54a6:	9b 01       	movw	r18, r22
    54a8:	ac 01       	movw	r20, r24
    54aa:	69 81       	ldd	r22, Y+1	; 0x01
    54ac:	7a 81       	ldd	r23, Y+2	; 0x02
    54ae:	8b 81       	ldd	r24, Y+3	; 0x03
    54b0:	9c 81       	ldd	r25, Y+4	; 0x04
    54b2:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    54b6:	69 83       	std	Y+1, r22	; 0x01
    54b8:	7a 83       	std	Y+2, r23	; 0x02
    54ba:	8b 83       	std	Y+3, r24	; 0x03
    54bc:	9c 83       	std	Y+4, r25	; 0x04
    54be:	e9 89       	ldd	r30, Y+17	; 0x11
    54c0:	fa 89       	ldd	r31, Y+18	; 0x12
    54c2:	24 81       	ldd	r18, Z+4	; 0x04
    54c4:	35 81       	ldd	r19, Z+5	; 0x05
    54c6:	46 81       	ldd	r20, Z+6	; 0x06
    54c8:	57 81       	ldd	r21, Z+7	; 0x07
    54ca:	c3 01       	movw	r24, r6
    54cc:	b2 01       	movw	r22, r4
    54ce:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    54d2:	9b 01       	movw	r18, r22
    54d4:	ac 01       	movw	r20, r24
    54d6:	6d 81       	ldd	r22, Y+5	; 0x05
    54d8:	7e 81       	ldd	r23, Y+6	; 0x06
    54da:	8f 81       	ldd	r24, Y+7	; 0x07
    54dc:	98 85       	ldd	r25, Y+8	; 0x08
    54de:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    54e2:	6d 83       	std	Y+5, r22	; 0x05
    54e4:	7e 83       	std	Y+6, r23	; 0x06
    54e6:	8f 83       	std	Y+7, r24	; 0x07
    54e8:	98 87       	std	Y+8, r25	; 0x08
    54ea:	c5 01       	movw	r24, r10
    54ec:	80 1b       	sub	r24, r16
    54ee:	91 09       	sbc	r25, r1
    54f0:	88 0d       	add	r24, r8
    54f2:	99 1d       	adc	r25, r9
    54f4:	b5 01       	movw	r22, r10
    54f6:	0e 94 20 50 	call	0xa040	; 0xa040 <__divmodhi4>
    54fa:	88 0f       	add	r24, r24
    54fc:	99 1f       	adc	r25, r25
    54fe:	88 0f       	add	r24, r24
    5500:	99 1f       	adc	r25, r25
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	9c 01       	movw	r18, r24
    5508:	24 59       	subi	r18, 0x94	; 148
    550a:	3d 4d       	sbci	r19, 0xDD	; 221
    550c:	49 01       	movw	r8, r18
    550e:	f9 01       	movw	r30, r18
    5510:	20 81       	ld	r18, Z
    5512:	31 81       	ldd	r19, Z+1	; 0x01
    5514:	42 81       	ldd	r20, Z+2	; 0x02
    5516:	53 81       	ldd	r21, Z+3	; 0x03
    5518:	c3 01       	movw	r24, r6
    551a:	b2 01       	movw	r22, r4
    551c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5520:	9b 01       	movw	r18, r22
    5522:	ac 01       	movw	r20, r24
    5524:	69 85       	ldd	r22, Y+9	; 0x09
    5526:	7a 85       	ldd	r23, Y+10	; 0x0a
    5528:	8b 85       	ldd	r24, Y+11	; 0x0b
    552a:	9c 85       	ldd	r25, Y+12	; 0x0c
    552c:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5530:	69 87       	std	Y+9, r22	; 0x09
    5532:	7a 87       	std	Y+10, r23	; 0x0a
    5534:	8b 87       	std	Y+11, r24	; 0x0b
    5536:	9c 87       	std	Y+12, r25	; 0x0c
    5538:	f4 01       	movw	r30, r8
    553a:	24 81       	ldd	r18, Z+4	; 0x04
    553c:	35 81       	ldd	r19, Z+5	; 0x05
    553e:	46 81       	ldd	r20, Z+6	; 0x06
    5540:	57 81       	ldd	r21, Z+7	; 0x07
    5542:	c3 01       	movw	r24, r6
    5544:	b2 01       	movw	r22, r4
    5546:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    554a:	9b 01       	movw	r18, r22
    554c:	ac 01       	movw	r20, r24
    554e:	c7 01       	movw	r24, r14
    5550:	b6 01       	movw	r22, r12
    5552:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5556:	6b 01       	movw	r12, r22
    5558:	7c 01       	movw	r14, r24
    555a:	1f 5f       	subi	r17, 0xFF	; 255
    555c:	14 32       	cpi	r17, 0x24	; 36
    555e:	09 f0       	breq	.+2      	; 0x5562 <calculate_bearing_and_heading+0x18c>
    5560:	74 cf       	rjmp	.-280    	; 0x544a <calculate_bearing_and_heading+0x74>
    5562:	29 81       	ldd	r18, Y+1	; 0x01
    5564:	3a 81       	ldd	r19, Y+2	; 0x02
    5566:	4b 81       	ldd	r20, Y+3	; 0x03
    5568:	5c 81       	ldd	r21, Y+4	; 0x04
    556a:	6d 81       	ldd	r22, Y+5	; 0x05
    556c:	7e 81       	ldd	r23, Y+6	; 0x06
    556e:	8f 81       	ldd	r24, Y+7	; 0x07
    5570:	98 85       	ldd	r25, Y+8	; 0x08
    5572:	0e 94 f7 46 	call	0x8dee	; 0x8dee <atan2>
    5576:	ed 85       	ldd	r30, Y+13	; 0x0d
    5578:	fe 85       	ldd	r31, Y+14	; 0x0e
    557a:	60 83       	st	Z, r22
    557c:	71 83       	std	Z+1, r23	; 0x01
    557e:	82 83       	std	Z+2, r24	; 0x02
    5580:	93 83       	std	Z+3, r25	; 0x03
    5582:	29 85       	ldd	r18, Y+9	; 0x09
    5584:	3a 85       	ldd	r19, Y+10	; 0x0a
    5586:	4b 85       	ldd	r20, Y+11	; 0x0b
    5588:	5c 85       	ldd	r21, Y+12	; 0x0c
    558a:	c7 01       	movw	r24, r14
    558c:	b6 01       	movw	r22, r12
    558e:	0e 94 f7 46 	call	0x8dee	; 0x8dee <atan2>
    5592:	ef 85       	ldd	r30, Y+15	; 0x0f
    5594:	f8 89       	ldd	r31, Y+16	; 0x10
    5596:	60 83       	st	Z, r22
    5598:	71 83       	std	Z+1, r23	; 0x01
    559a:	82 83       	std	Z+2, r24	; 0x02
    559c:	93 83       	std	Z+3, r25	; 0x03
    559e:	62 96       	adiw	r28, 0x12	; 18
    55a0:	cd bf       	out	0x3d, r28	; 61
    55a2:	de bf       	out	0x3e, r29	; 62
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	ff 90       	pop	r15
    55ae:	ef 90       	pop	r14
    55b0:	df 90       	pop	r13
    55b2:	cf 90       	pop	r12
    55b4:	bf 90       	pop	r11
    55b6:	af 90       	pop	r10
    55b8:	9f 90       	pop	r9
    55ba:	8f 90       	pop	r8
    55bc:	7f 90       	pop	r7
    55be:	6f 90       	pop	r6
    55c0:	5f 90       	pop	r5
    55c2:	4f 90       	pop	r4
    55c4:	3f 90       	pop	r3
    55c6:	2f 90       	pop	r2
    55c8:	08 95       	ret

000055ca <processBrightMeas>:
    55ca:	6f 92       	push	r6
    55cc:	7f 92       	push	r7
    55ce:	8f 92       	push	r8
    55d0:	9f 92       	push	r9
    55d2:	af 92       	push	r10
    55d4:	bf 92       	push	r11
    55d6:	cf 92       	push	r12
    55d8:	df 92       	push	r13
    55da:	ef 92       	push	r14
    55dc:	ff 92       	push	r15
    55de:	0f 93       	push	r16
    55e0:	1f 93       	push	r17
    55e2:	cf 93       	push	r28
    55e4:	df 93       	push	r29
    55e6:	61 e6       	ldi	r22, 0x61	; 97
    55e8:	76 e2       	ldi	r23, 0x26	; 38
    55ea:	0f 2e       	mov	r0, r31
    55ec:	f9 ea       	ldi	r31, 0xA9	; 169
    55ee:	ef 2e       	mov	r14, r31
    55f0:	f6 e2       	ldi	r31, 0x26	; 38
    55f2:	ff 2e       	mov	r15, r31
    55f4:	f0 2d       	mov	r31, r0
    55f6:	0f 2e       	mov	r0, r31
    55f8:	ff e3       	ldi	r31, 0x3F	; 63
    55fa:	bf 2e       	mov	r11, r31
    55fc:	f0 2d       	mov	r31, r0
    55fe:	00 e0       	ldi	r16, 0x00	; 0
    5600:	10 e0       	ldi	r17, 0x00	; 0
    5602:	2f c0       	rjmp	.+94     	; 0x5662 <processBrightMeas+0x98>
    5604:	df 01       	movw	r26, r30
    5606:	40 81       	ld	r20, Z
    5608:	51 81       	ldd	r21, Z+1	; 0x01
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	41 15       	cp	r20, r1
    5610:	51 05       	cpc	r21, r1
    5612:	11 f4       	brne	.+4      	; 0x5618 <processBrightMeas+0x4e>
    5614:	80 e0       	ldi	r24, 0x00	; 0
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	02 2e       	mov	r0, r18
    561a:	02 c0       	rjmp	.+4      	; 0x5620 <processBrightMeas+0x56>
    561c:	88 0f       	add	r24, r24
    561e:	99 1f       	adc	r25, r25
    5620:	0a 94       	dec	r0
    5622:	e2 f7       	brpl	.-8      	; 0x561c <processBrightMeas+0x52>
    5624:	80 95       	com	r24
    5626:	b8 22       	and	r11, r24
    5628:	c1 e0       	ldi	r28, 0x01	; 1
    562a:	d0 e0       	ldi	r29, 0x00	; 0
    562c:	14 16       	cp	r1, r20
    562e:	15 06       	cpc	r1, r21
    5630:	14 f0       	brlt	.+4      	; 0x5636 <processBrightMeas+0x6c>
    5632:	c0 e0       	ldi	r28, 0x00	; 0
    5634:	d0 e0       	ldi	r29, 0x00	; 0
    5636:	c4 9f       	mul	r28, r20
    5638:	c0 01       	movw	r24, r0
    563a:	c5 9f       	mul	r28, r21
    563c:	90 0d       	add	r25, r0
    563e:	d4 9f       	mul	r29, r20
    5640:	90 0d       	add	r25, r0
    5642:	11 24       	eor	r1, r1
    5644:	8d 93       	st	X+, r24
    5646:	9c 93       	st	X, r25
    5648:	32 96       	adiw	r30, 0x02	; 2
    564a:	08 0f       	add	r16, r24
    564c:	19 1f       	adc	r17, r25
    564e:	2f 5f       	subi	r18, 0xFF	; 255
    5650:	3f 4f       	sbci	r19, 0xFF	; 255
    5652:	26 30       	cpi	r18, 0x06	; 6
    5654:	31 05       	cpc	r19, r1
    5656:	b1 f6       	brne	.-84     	; 0x5604 <processBrightMeas+0x3a>
    5658:	64 5f       	subi	r22, 0xF4	; 244
    565a:	7f 4f       	sbci	r23, 0xFF	; 255
    565c:	6e 15       	cp	r22, r14
    565e:	7f 05       	cpc	r23, r15
    5660:	21 f0       	breq	.+8      	; 0x566a <processBrightMeas+0xa0>
    5662:	fb 01       	movw	r30, r22
    5664:	20 e0       	ldi	r18, 0x00	; 0
    5666:	30 e0       	ldi	r19, 0x00	; 0
    5668:	cd cf       	rjmp	.-102    	; 0x5604 <processBrightMeas+0x3a>
    566a:	c1 2c       	mov	r12, r1
    566c:	d1 2c       	mov	r13, r1
    566e:	e1 2c       	mov	r14, r1
    5670:	f1 2c       	mov	r15, r1
    5672:	e0 e0       	ldi	r30, 0x00	; 0
    5674:	cb 2d       	mov	r28, r11
    5676:	d0 e0       	ldi	r29, 0x00	; 0
    5678:	0f 2e       	mov	r0, r31
    567a:	ff e0       	ldi	r31, 0x0F	; 15
    567c:	af 2e       	mov	r10, r31
    567e:	b1 2c       	mov	r11, r1
    5680:	f0 2d       	mov	r31, r0
    5682:	88 24       	eor	r8, r8
    5684:	83 94       	inc	r8
    5686:	91 2c       	mov	r9, r1
    5688:	0f 2e       	mov	r0, r31
    568a:	f9 e8       	ldi	r31, 0x89	; 137
    568c:	6f 2e       	mov	r6, r31
    568e:	f6 e0       	ldi	r31, 0x06	; 6
    5690:	7f 2e       	mov	r7, r31
    5692:	f0 2d       	mov	r31, r0
    5694:	2e 2d       	mov	r18, r14
    5696:	3f 2d       	mov	r19, r15
    5698:	ce 01       	movw	r24, r28
    569a:	0e 2c       	mov	r0, r14
    569c:	02 c0       	rjmp	.+4      	; 0x56a2 <processBrightMeas+0xd8>
    569e:	95 95       	asr	r25
    56a0:	87 95       	ror	r24
    56a2:	0a 94       	dec	r0
    56a4:	e2 f7       	brpl	.-8      	; 0x569e <processBrightMeas+0xd4>
    56a6:	80 ff       	sbrs	r24, 0
    56a8:	20 c0       	rjmp	.+64     	; 0x56ea <processBrightMeas+0x120>
    56aa:	c4 01       	movw	r24, r8
    56ac:	0c 2c       	mov	r0, r12
    56ae:	02 c0       	rjmp	.+4      	; 0x56b4 <processBrightMeas+0xea>
    56b0:	88 0f       	add	r24, r24
    56b2:	99 1f       	adc	r25, r25
    56b4:	0a 94       	dec	r0
    56b6:	e2 f7       	brpl	.-8      	; 0x56b0 <processBrightMeas+0xe6>
    56b8:	09 2e       	mov	r0, r25
    56ba:	00 0c       	add	r0, r0
    56bc:	aa 0b       	sbc	r26, r26
    56be:	bb 0b       	sbc	r27, r27
    56c0:	40 91 9d 24 	lds	r20, 0x249D
    56c4:	50 91 9e 24 	lds	r21, 0x249E
    56c8:	60 91 9f 24 	lds	r22, 0x249F
    56cc:	70 91 a0 24 	lds	r23, 0x24A0
    56d0:	84 0f       	add	r24, r20
    56d2:	95 1f       	adc	r25, r21
    56d4:	a6 1f       	adc	r26, r22
    56d6:	b7 1f       	adc	r27, r23
    56d8:	80 93 9d 24 	sts	0x249D, r24
    56dc:	90 93 9e 24 	sts	0x249E, r25
    56e0:	a0 93 9f 24 	sts	0x249F, r26
    56e4:	b0 93 a0 24 	sts	0x24A0, r27
    56e8:	21 c0       	rjmp	.+66     	; 0x572c <processBrightMeas+0x162>
    56ea:	c5 01       	movw	r24, r10
    56ec:	0c 2c       	mov	r0, r12
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <processBrightMeas+0x12a>
    56f0:	88 0f       	add	r24, r24
    56f2:	99 1f       	adc	r25, r25
    56f4:	0a 94       	dec	r0
    56f6:	e2 f7       	brpl	.-8      	; 0x56f0 <processBrightMeas+0x126>
    56f8:	80 95       	com	r24
    56fa:	90 95       	com	r25
    56fc:	09 2e       	mov	r0, r25
    56fe:	00 0c       	add	r0, r0
    5700:	aa 0b       	sbc	r26, r26
    5702:	bb 0b       	sbc	r27, r27
    5704:	40 91 9d 24 	lds	r20, 0x249D
    5708:	50 91 9e 24 	lds	r21, 0x249E
    570c:	60 91 9f 24 	lds	r22, 0x249F
    5710:	70 91 a0 24 	lds	r23, 0x24A0
    5714:	84 23       	and	r24, r20
    5716:	95 23       	and	r25, r21
    5718:	a6 23       	and	r26, r22
    571a:	b7 23       	and	r27, r23
    571c:	80 93 9d 24 	sts	0x249D, r24
    5720:	90 93 9e 24 	sts	0x249E, r25
    5724:	a0 93 9f 24 	sts	0x249F, r26
    5728:	b0 93 a0 24 	sts	0x24A0, r27
    572c:	80 91 9d 24 	lds	r24, 0x249D
    5730:	90 91 9e 24 	lds	r25, 0x249E
    5734:	a0 91 9f 24 	lds	r26, 0x249F
    5738:	b0 91 a0 24 	lds	r27, 0x24A0
    573c:	0c 2c       	mov	r0, r12
    573e:	04 c0       	rjmp	.+8      	; 0x5748 <processBrightMeas+0x17e>
    5740:	b6 95       	lsr	r27
    5742:	a7 95       	ror	r26
    5744:	97 95       	ror	r25
    5746:	87 95       	ror	r24
    5748:	0a 94       	dec	r0
    574a:	d2 f7       	brpl	.-12     	; 0x5740 <processBrightMeas+0x176>
    574c:	8f 70       	andi	r24, 0x0F	; 15
    574e:	99 27       	eor	r25, r25
    5750:	aa 27       	eor	r26, r26
    5752:	bb 27       	eor	r27, r27
    5754:	0f 97       	sbiw	r24, 0x0f	; 15
    5756:	a1 05       	cpc	r26, r1
    5758:	b1 05       	cpc	r27, r1
    575a:	61 f5       	brne	.+88     	; 0x57b4 <processBrightMeas+0x1ea>
    575c:	3f 93       	push	r19
    575e:	2f 93       	push	r18
    5760:	7f 92       	push	r7
    5762:	6f 92       	push	r6
    5764:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    5768:	c5 01       	movw	r24, r10
    576a:	0c 2c       	mov	r0, r12
    576c:	02 c0       	rjmp	.+4      	; 0x5772 <processBrightMeas+0x1a8>
    576e:	88 0f       	add	r24, r24
    5770:	99 1f       	adc	r25, r25
    5772:	0a 94       	dec	r0
    5774:	e2 f7       	brpl	.-8      	; 0x576e <processBrightMeas+0x1a4>
    5776:	80 95       	com	r24
    5778:	90 95       	com	r25
    577a:	09 2e       	mov	r0, r25
    577c:	00 0c       	add	r0, r0
    577e:	aa 0b       	sbc	r26, r26
    5780:	bb 0b       	sbc	r27, r27
    5782:	40 91 9d 24 	lds	r20, 0x249D
    5786:	50 91 9e 24 	lds	r21, 0x249E
    578a:	60 91 9f 24 	lds	r22, 0x249F
    578e:	70 91 a0 24 	lds	r23, 0x24A0
    5792:	84 23       	and	r24, r20
    5794:	95 23       	and	r25, r21
    5796:	a6 23       	and	r26, r22
    5798:	b7 23       	and	r27, r23
    579a:	80 93 9d 24 	sts	0x249D, r24
    579e:	90 93 9e 24 	sts	0x249E, r25
    57a2:	a0 93 9f 24 	sts	0x249F, r26
    57a6:	b0 93 a0 24 	sts	0x24A0, r27
    57aa:	0f 90       	pop	r0
    57ac:	0f 90       	pop	r0
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	e1 e0       	ldi	r30, 0x01	; 1
    57b4:	8f ef       	ldi	r24, 0xFF	; 255
    57b6:	e8 1a       	sub	r14, r24
    57b8:	f8 0a       	sbc	r15, r24
    57ba:	84 e0       	ldi	r24, 0x04	; 4
    57bc:	c8 0e       	add	r12, r24
    57be:	d1 1c       	adc	r13, r1
    57c0:	86 e0       	ldi	r24, 0x06	; 6
    57c2:	e8 16       	cp	r14, r24
    57c4:	f1 04       	cpc	r15, r1
    57c6:	09 f0       	breq	.+2      	; 0x57ca <processBrightMeas+0x200>
    57c8:	65 cf       	rjmp	.-310    	; 0x5694 <processBrightMeas+0xca>
    57ca:	e1 11       	cpse	r30, r1
    57cc:	0e 94 a5 09 	call	0x134a	; 0x134a <startup_light_sequence>
    57d0:	c8 01       	movw	r24, r16
    57d2:	df 91       	pop	r29
    57d4:	cf 91       	pop	r28
    57d6:	1f 91       	pop	r17
    57d8:	0f 91       	pop	r16
    57da:	ff 90       	pop	r15
    57dc:	ef 90       	pop	r14
    57de:	df 90       	pop	r13
    57e0:	cf 90       	pop	r12
    57e2:	bf 90       	pop	r11
    57e4:	af 90       	pop	r10
    57e6:	9f 90       	pop	r9
    57e8:	8f 90       	pop	r8
    57ea:	7f 90       	pop	r7
    57ec:	6f 90       	pop	r6
    57ee:	08 95       	ret

000057f0 <ir_range_meas>:
    57f0:	8f 92       	push	r8
    57f2:	9f 92       	push	r9
    57f4:	af 92       	push	r10
    57f6:	bf 92       	push	r11
    57f8:	cf 92       	push	r12
    57fa:	df 92       	push	r13
    57fc:	ef 92       	push	r14
    57fe:	ff 92       	push	r15
    5800:	0f 93       	push	r16
    5802:	1f 93       	push	r17
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	80 91 51 24 	lds	r24, 0x2451
    580c:	80 91 9a 24 	lds	r24, 0x249A
    5810:	c1 2c       	mov	r12, r1
    5812:	d1 2c       	mov	r13, r1
    5814:	76 01       	movw	r14, r12
    5816:	68 94       	set
    5818:	c3 f8       	bld	r12, 3
    581a:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    581e:	00 91 2b 27 	lds	r16, 0x272B
    5822:	10 91 2c 27 	lds	r17, 0x272C
    5826:	20 91 2d 27 	lds	r18, 0x272D
    582a:	30 91 2e 27 	lds	r19, 0x272E
    582e:	46 01       	movw	r8, r12
    5830:	57 01       	movw	r10, r14
    5832:	80 1a       	sub	r8, r16
    5834:	91 0a       	sbc	r9, r17
    5836:	a2 0a       	sbc	r10, r18
    5838:	b3 0a       	sbc	r11, r19
    583a:	dc 01       	movw	r26, r24
    583c:	cb 01       	movw	r24, r22
    583e:	88 0d       	add	r24, r8
    5840:	99 1d       	adc	r25, r9
    5842:	aa 1d       	adc	r26, r10
    5844:	bb 1d       	adc	r27, r11
    5846:	4e 97       	sbiw	r24, 0x1e	; 30
    5848:	a1 05       	cpc	r26, r1
    584a:	b1 05       	cpc	r27, r1
    584c:	30 f3       	brcs	.-52     	; 0x581a <ir_range_meas+0x2a>
    584e:	bf b6       	in	r11, 0x3f	; 63
    5850:	f8 94       	cli
    5852:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    5856:	6b 01       	movw	r12, r22
    5858:	7c 01       	movw	r14, r24
    585a:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	8c 19       	sub	r24, r12
    5864:	9d 09       	sbc	r25, r13
    5866:	ae 09       	sbc	r26, r14
    5868:	bf 09       	sbc	r27, r15
    586a:	02 97       	sbiw	r24, 0x02	; 2
    586c:	a1 05       	cpc	r26, r1
    586e:	b1 05       	cpc	r27, r1
    5870:	a0 f3       	brcs	.-24     	; 0x585a <ir_range_meas+0x6a>
    5872:	c1 e6       	ldi	r28, 0x61	; 97
    5874:	d6 e2       	ldi	r29, 0x26	; 38
    5876:	09 ea       	ldi	r16, 0xA9	; 169
    5878:	16 e2       	ldi	r17, 0x26	; 38
    587a:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    587e:	6b 01       	movw	r12, r22
    5880:	7c 01       	movw	r14, r24
    5882:	69 e0       	ldi	r22, 0x09	; 9
    5884:	ce 01       	movw	r24, r28
    5886:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_ir_sensors>
    588a:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    588e:	dc 01       	movw	r26, r24
    5890:	cb 01       	movw	r24, r22
    5892:	8c 19       	sub	r24, r12
    5894:	9d 09       	sbc	r25, r13
    5896:	ae 09       	sbc	r26, r14
    5898:	bf 09       	sbc	r27, r15
    589a:	08 97       	sbiw	r24, 0x08	; 8
    589c:	a1 05       	cpc	r26, r1
    589e:	b1 05       	cpc	r27, r1
    58a0:	a0 f3       	brcs	.-24     	; 0x588a <ir_range_meas+0x9a>
    58a2:	88 e0       	ldi	r24, 0x08	; 8
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    58aa:	2c 96       	adiw	r28, 0x0c	; 12
    58ac:	c0 17       	cp	r28, r16
    58ae:	d1 07       	cpc	r29, r17
    58b0:	21 f7       	brne	.-56     	; 0x587a <ir_range_meas+0x8a>
    58b2:	bf be       	out	0x3f, r11	; 63
    58b4:	df 91       	pop	r29
    58b6:	cf 91       	pop	r28
    58b8:	1f 91       	pop	r17
    58ba:	0f 91       	pop	r16
    58bc:	ff 90       	pop	r15
    58be:	ef 90       	pop	r14
    58c0:	df 90       	pop	r13
    58c2:	cf 90       	pop	r12
    58c4:	bf 90       	pop	r11
    58c6:	af 90       	pop	r10
    58c8:	9f 90       	pop	r9
    58ca:	8f 90       	pop	r8
    58cc:	08 95       	ret

000058ce <ir_range_blast>:
    58ce:	cf 92       	push	r12
    58d0:	df 92       	push	r13
    58d2:	ef 92       	push	r14
    58d4:	ff 92       	push	r15
    58d6:	cf 93       	push	r28
    58d8:	df 93       	push	r29
    58da:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    58de:	c0 90 2b 27 	lds	r12, 0x272B
    58e2:	d0 90 2c 27 	lds	r13, 0x272C
    58e6:	e0 90 2d 27 	lds	r14, 0x272D
    58ea:	f0 90 2e 27 	lds	r15, 0x272E
    58ee:	dc 01       	movw	r26, r24
    58f0:	cb 01       	movw	r24, r22
    58f2:	8c 19       	sub	r24, r12
    58f4:	9d 09       	sbc	r25, r13
    58f6:	ae 09       	sbc	r26, r14
    58f8:	bf 09       	sbc	r27, r15
    58fa:	4e 97       	sbiw	r24, 0x1e	; 30
    58fc:	a1 05       	cpc	r26, r1
    58fe:	b1 05       	cpc	r27, r1
    5900:	60 f3       	brcs	.-40     	; 0x58da <ir_range_blast+0xc>
    5902:	df b7       	in	r29, 0x3f	; 63
    5904:	f8 94       	cli
    5906:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    590a:	6b 01       	movw	r12, r22
    590c:	7c 01       	movw	r14, r24
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	91 e0       	ldi	r25, 0x01	; 1
    5912:	0e 94 44 1c 	call	0x3888	; 0x3888 <set_all_ir_powers>
    5916:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    591a:	dc 01       	movw	r26, r24
    591c:	cb 01       	movw	r24, r22
    591e:	8c 19       	sub	r24, r12
    5920:	9d 09       	sbc	r25, r13
    5922:	ae 09       	sbc	r26, r14
    5924:	bf 09       	sbc	r27, r15
    5926:	02 97       	sbiw	r24, 0x02	; 2
    5928:	a1 05       	cpc	r26, r1
    592a:	b1 05       	cpc	r27, r1
    592c:	a0 f3       	brcs	.-24     	; 0x5916 <ir_range_blast+0x48>
    592e:	c0 e0       	ldi	r28, 0x00	; 0
    5930:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    5934:	6b 01       	movw	r12, r22
    5936:	7c 01       	movw	r14, r24
    5938:	8c 2f       	mov	r24, r28
    593a:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <ir_led_on>
    593e:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    5942:	dc 01       	movw	r26, r24
    5944:	cb 01       	movw	r24, r22
    5946:	8c 19       	sub	r24, r12
    5948:	9d 09       	sbc	r25, r13
    594a:	ae 09       	sbc	r26, r14
    594c:	bf 09       	sbc	r27, r15
    594e:	08 97       	sbiw	r24, 0x08	; 8
    5950:	a1 05       	cpc	r26, r1
    5952:	b1 05       	cpc	r27, r1
    5954:	a0 f3       	brcs	.-24     	; 0x593e <ir_range_blast+0x70>
    5956:	8c 2f       	mov	r24, r28
    5958:	0e 94 11 1c 	call	0x3822	; 0x3822 <ir_led_off>
    595c:	88 e0       	ldi	r24, 0x08	; 8
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    5964:	cf 5f       	subi	r28, 0xFF	; 255
    5966:	c6 30       	cpi	r28, 0x06	; 6
    5968:	19 f7       	brne	.-58     	; 0x5930 <ir_range_blast+0x62>
    596a:	df bf       	out	0x3f, r29	; 63
    596c:	df 91       	pop	r29
    596e:	cf 91       	pop	r28
    5970:	ff 90       	pop	r15
    5972:	ef 90       	pop	r14
    5974:	df 90       	pop	r13
    5976:	cf 90       	pop	r12
    5978:	08 95       	ret

0000597a <broadcast_rnb_data>:
    597a:	cf 93       	push	r28
    597c:	df 93       	push	r29
    597e:	1f 92       	push	r1
    5980:	cd b7       	in	r28, 0x3d	; 61
    5982:	de b7       	in	r29, 0x3e	; 62
    5984:	9f b7       	in	r25, 0x3f	; 63
    5986:	f8 94       	cli
    5988:	80 91 a9 26 	lds	r24, 0x26A9
    598c:	81 11       	cpse	r24, r1
    598e:	04 c0       	rjmp	.+8      	; 0x5998 <broadcast_rnb_data+0x1e>
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	80 93 a9 26 	sts	0x26A9, r24
    5996:	01 c0       	rjmp	.+2      	; 0x599a <broadcast_rnb_data+0x20>
    5998:	80 e0       	ldi	r24, 0x00	; 0
    599a:	9f bf       	out	0x3f, r25	; 63
    599c:	88 23       	and	r24, r24
    599e:	59 f1       	breq	.+86     	; 0x59f6 <broadcast_rnb_data+0x7c>
    59a0:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    59a4:	60 93 2b 27 	sts	0x272B, r22
    59a8:	70 93 2c 27 	sts	0x272C, r23
    59ac:	80 93 2d 27 	sts	0x272D, r24
    59b0:	90 93 2e 27 	sts	0x272E, r25
    59b4:	82 e7       	ldi	r24, 0x72	; 114
    59b6:	89 83       	std	Y+1, r24	; 0x01
    59b8:	20 91 2b 27 	lds	r18, 0x272B
    59bc:	30 91 2c 27 	lds	r19, 0x272C
    59c0:	40 91 2d 27 	lds	r20, 0x272D
    59c4:	50 91 2e 27 	lds	r21, 0x272E
    59c8:	41 e4       	ldi	r20, 0x41	; 65
    59ca:	be 01       	movw	r22, r28
    59cc:	6f 5f       	subi	r22, 0xFF	; 255
    59ce:	7f 4f       	sbci	r23, 0xFF	; 255
    59d0:	8f e3       	ldi	r24, 0x3F	; 63
    59d2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <hp_ir_targeted_cmd>
    59d6:	88 23       	and	r24, r24
    59d8:	71 f0       	breq	.+28     	; 0x59f6 <broadcast_rnb_data+0x7c>
    59da:	8f b7       	in	r24, 0x3f	; 63
    59dc:	f8 94       	cli
    59de:	9f ef       	ldi	r25, 0xFF	; 255
    59e0:	90 93 ca 28 	sts	0x28CA, r25
    59e4:	8f bf       	out	0x3f, r24	; 63
    59e6:	8f ef       	ldi	r24, 0xFF	; 255
    59e8:	0e 94 67 2c 	call	0x58ce	; 0x58ce <ir_range_blast>
    59ec:	8f b7       	in	r24, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	10 92 ca 28 	sts	0x28CA, r1
    59f4:	8f bf       	out	0x3f, r24	; 63
    59f6:	8f b7       	in	r24, 0x3f	; 63
    59f8:	f8 94       	cli
    59fa:	10 92 a9 26 	sts	0x26A9, r1
    59fe:	8f bf       	out	0x3f, r24	; 63
    5a00:	0f 90       	pop	r0
    5a02:	df 91       	pop	r29
    5a04:	cf 91       	pop	r28
    5a06:	08 95       	ret

00005a08 <pretty_angle>:
    5a08:	cf 92       	push	r12
    5a0a:	df 92       	push	r13
    5a0c:	ef 92       	push	r14
    5a0e:	ff 92       	push	r15
    5a10:	6b 01       	movw	r12, r22
    5a12:	7c 01       	movw	r14, r24
    5a14:	20 e0       	ldi	r18, 0x00	; 0
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	a9 01       	movw	r20, r18
    5a1a:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    5a1e:	88 23       	and	r24, r24
    5a20:	ac f0       	brlt	.+42     	; 0x5a4c <pretty_angle+0x44>
    5a22:	2b ed       	ldi	r18, 0xDB	; 219
    5a24:	3f e0       	ldi	r19, 0x0F	; 15
    5a26:	49 e4       	ldi	r20, 0x49	; 73
    5a28:	50 e4       	ldi	r21, 0x40	; 64
    5a2a:	c7 01       	movw	r24, r14
    5a2c:	b6 01       	movw	r22, r12
    5a2e:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5a32:	2b ed       	ldi	r18, 0xDB	; 219
    5a34:	3f e0       	ldi	r19, 0x0F	; 15
    5a36:	49 ec       	ldi	r20, 0xC9	; 201
    5a38:	50 e4       	ldi	r21, 0x40	; 64
    5a3a:	0e 94 67 48 	call	0x90ce	; 0x90ce <fmod>
    5a3e:	2b ed       	ldi	r18, 0xDB	; 219
    5a40:	3f e0       	ldi	r19, 0x0F	; 15
    5a42:	49 e4       	ldi	r20, 0x49	; 73
    5a44:	50 e4       	ldi	r21, 0x40	; 64
    5a46:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5a4a:	14 c0       	rjmp	.+40     	; 0x5a74 <pretty_angle+0x6c>
    5a4c:	2b ed       	ldi	r18, 0xDB	; 219
    5a4e:	3f e0       	ldi	r19, 0x0F	; 15
    5a50:	49 e4       	ldi	r20, 0x49	; 73
    5a52:	50 e4       	ldi	r21, 0x40	; 64
    5a54:	c7 01       	movw	r24, r14
    5a56:	b6 01       	movw	r22, r12
    5a58:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5a5c:	2b ed       	ldi	r18, 0xDB	; 219
    5a5e:	3f e0       	ldi	r19, 0x0F	; 15
    5a60:	49 ec       	ldi	r20, 0xC9	; 201
    5a62:	50 e4       	ldi	r21, 0x40	; 64
    5a64:	0e 94 67 48 	call	0x90ce	; 0x90ce <fmod>
    5a68:	2b ed       	ldi	r18, 0xDB	; 219
    5a6a:	3f e0       	ldi	r19, 0x0F	; 15
    5a6c:	49 e4       	ldi	r20, 0x49	; 73
    5a6e:	50 e4       	ldi	r21, 0x40	; 64
    5a70:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5a74:	ff 90       	pop	r15
    5a76:	ef 90       	pop	r14
    5a78:	df 90       	pop	r13
    5a7a:	cf 90       	pop	r12
    5a7c:	08 95       	ret

00005a7e <rad_to_deg>:
    5a7e:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <pretty_angle>
    5a82:	2b ed       	ldi	r18, 0xDB	; 219
    5a84:	3f e0       	ldi	r19, 0x0F	; 15
    5a86:	49 e4       	ldi	r20, 0x49	; 73
    5a88:	50 e4       	ldi	r21, 0x40	; 64
    5a8a:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    5a8e:	20 e0       	ldi	r18, 0x00	; 0
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	44 e3       	ldi	r20, 0x34	; 52
    5a94:	53 e4       	ldi	r21, 0x43	; 67
    5a96:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5a9a:	08 95       	ret

00005a9c <sensor_model>:
    5a9c:	8f 92       	push	r8
    5a9e:	9f 92       	push	r9
    5aa0:	af 92       	push	r10
    5aa2:	bf 92       	push	r11
    5aa4:	cf 92       	push	r12
    5aa6:	df 92       	push	r13
    5aa8:	ef 92       	push	r14
    5aaa:	ff 92       	push	r15
    5aac:	4b 01       	movw	r8, r22
    5aae:	5c 01       	movw	r10, r24
    5ab0:	6b 01       	movw	r12, r22
    5ab2:	7c 01       	movw	r14, r24
    5ab4:	e8 94       	clt
    5ab6:	f7 f8       	bld	r15, 7
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	40 ec       	ldi	r20, 0xC0	; 192
    5abe:	5f e3       	ldi	r21, 0x3F	; 63
    5ac0:	c7 01       	movw	r24, r14
    5ac2:	b6 01       	movw	r22, r12
    5ac4:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    5ac8:	88 23       	and	r24, r24
    5aca:	64 f5       	brge	.+88     	; 0x5b24 <sensor_model+0x88>
    5acc:	22 e5       	ldi	r18, 0x52	; 82
    5ace:	38 eb       	ldi	r19, 0xB8	; 184
    5ad0:	4e e1       	ldi	r20, 0x1E	; 30
    5ad2:	5f e3       	ldi	r21, 0x3F	; 63
    5ad4:	c7 01       	movw	r24, r14
    5ad6:	b6 01       	movw	r22, r12
    5ad8:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    5adc:	18 16       	cp	r1, r24
    5ade:	8c f0       	brlt	.+34     	; 0x5b02 <sensor_model+0x66>
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	40 e8       	ldi	r20, 0x80	; 128
    5ae6:	50 e4       	ldi	r21, 0x40	; 64
    5ae8:	c5 01       	movw	r24, r10
    5aea:	b4 01       	movw	r22, r8
    5aec:	0e 94 ed 4a 	call	0x95da	; 0x95da <pow>
    5af0:	9b 01       	movw	r18, r22
    5af2:	ac 01       	movw	r20, r24
    5af4:	60 e0       	ldi	r22, 0x00	; 0
    5af6:	70 e0       	ldi	r23, 0x00	; 0
    5af8:	80 e8       	ldi	r24, 0x80	; 128
    5afa:	9f e3       	ldi	r25, 0x3F	; 63
    5afc:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5b00:	14 c0       	rjmp	.+40     	; 0x5b2a <sensor_model+0x8e>
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	40 e8       	ldi	r20, 0x80	; 128
    5b08:	50 e4       	ldi	r21, 0x40	; 64
    5b0a:	c5 01       	movw	r24, r10
    5b0c:	b4 01       	movw	r22, r8
    5b0e:	0e 94 ed 4a 	call	0x95da	; 0x95da <pow>
    5b12:	9b 01       	movw	r18, r22
    5b14:	ac 01       	movw	r20, r24
    5b16:	60 e0       	ldi	r22, 0x00	; 0
    5b18:	70 e0       	ldi	r23, 0x00	; 0
    5b1a:	80 e0       	ldi	r24, 0x00	; 0
    5b1c:	9e e3       	ldi	r25, 0x3E	; 62
    5b1e:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    5b22:	03 c0       	rjmp	.+6      	; 0x5b2a <sensor_model+0x8e>
    5b24:	60 e0       	ldi	r22, 0x00	; 0
    5b26:	70 e0       	ldi	r23, 0x00	; 0
    5b28:	cb 01       	movw	r24, r22
    5b2a:	ff 90       	pop	r15
    5b2c:	ef 90       	pop	r14
    5b2e:	df 90       	pop	r13
    5b30:	cf 90       	pop	r12
    5b32:	bf 90       	pop	r11
    5b34:	af 90       	pop	r10
    5b36:	9f 90       	pop	r9
    5b38:	8f 90       	pop	r8
    5b3a:	08 95       	ret

00005b3c <emitter_model>:
    5b3c:	8f 92       	push	r8
    5b3e:	9f 92       	push	r9
    5b40:	af 92       	push	r10
    5b42:	bf 92       	push	r11
    5b44:	cf 92       	push	r12
    5b46:	df 92       	push	r13
    5b48:	ef 92       	push	r14
    5b4a:	ff 92       	push	r15
    5b4c:	6b 01       	movw	r12, r22
    5b4e:	7c 01       	movw	r14, r24
    5b50:	4b 01       	movw	r8, r22
    5b52:	5c 01       	movw	r10, r24
    5b54:	e8 94       	clt
    5b56:	b7 f8       	bld	r11, 7
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	40 ec       	ldi	r20, 0xC0	; 192
    5b5e:	5f e3       	ldi	r21, 0x3F	; 63
    5b60:	c5 01       	movw	r24, r10
    5b62:	b4 01       	movw	r22, r8
    5b64:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    5b68:	88 23       	and	r24, r24
    5b6a:	e4 f5       	brge	.+120    	; 0x5be4 <emitter_model+0xa8>
    5b6c:	2c ee       	ldi	r18, 0xEC	; 236
    5b6e:	31 e5       	ldi	r19, 0x51	; 81
    5b70:	48 e3       	ldi	r20, 0x38	; 56
    5b72:	5f e3       	ldi	r21, 0x3F	; 63
    5b74:	c5 01       	movw	r24, r10
    5b76:	b4 01       	movw	r22, r8
    5b78:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    5b7c:	18 16       	cp	r1, r24
    5b7e:	0c f1       	brlt	.+66     	; 0x5bc2 <emitter_model+0x86>
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	40 e8       	ldi	r20, 0x80	; 128
    5b86:	50 e4       	ldi	r21, 0x40	; 64
    5b88:	c7 01       	movw	r24, r14
    5b8a:	b6 01       	movw	r22, r12
    5b8c:	0e 94 ed 4a 	call	0x95da	; 0x95da <pow>
    5b90:	4b 01       	movw	r8, r22
    5b92:	5c 01       	movw	r10, r24
    5b94:	a7 01       	movw	r20, r14
    5b96:	96 01       	movw	r18, r12
    5b98:	c7 01       	movw	r24, r14
    5b9a:	b6 01       	movw	r22, r12
    5b9c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5ba0:	20 e0       	ldi	r18, 0x00	; 0
    5ba2:	30 e0       	ldi	r19, 0x00	; 0
    5ba4:	40 e0       	ldi	r20, 0x00	; 0
    5ba6:	5f e3       	ldi	r21, 0x3F	; 63
    5ba8:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5bac:	27 ed       	ldi	r18, 0xD7	; 215
    5bae:	33 ea       	ldi	r19, 0xA3	; 163
    5bb0:	40 e7       	ldi	r20, 0x70	; 112
    5bb2:	5f e3       	ldi	r21, 0x3F	; 63
    5bb4:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5bb8:	a5 01       	movw	r20, r10
    5bba:	94 01       	movw	r18, r8
    5bbc:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5bc0:	14 c0       	rjmp	.+40     	; 0x5bea <emitter_model+0xae>
    5bc2:	20 e0       	ldi	r18, 0x00	; 0
    5bc4:	30 e0       	ldi	r19, 0x00	; 0
    5bc6:	40 e8       	ldi	r20, 0x80	; 128
    5bc8:	50 e4       	ldi	r21, 0x40	; 64
    5bca:	c7 01       	movw	r24, r14
    5bcc:	b6 01       	movw	r22, r12
    5bce:	0e 94 ed 4a 	call	0x95da	; 0x95da <pow>
    5bd2:	9b 01       	movw	r18, r22
    5bd4:	ac 01       	movw	r20, r24
    5bd6:	60 e0       	ldi	r22, 0x00	; 0
    5bd8:	70 e0       	ldi	r23, 0x00	; 0
    5bda:	80 e8       	ldi	r24, 0x80	; 128
    5bdc:	9e e3       	ldi	r25, 0x3E	; 62
    5bde:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    5be2:	03 c0       	rjmp	.+6      	; 0x5bea <emitter_model+0xae>
    5be4:	60 e0       	ldi	r22, 0x00	; 0
    5be6:	70 e0       	ldi	r23, 0x00	; 0
    5be8:	cb 01       	movw	r24, r22
    5bea:	ff 90       	pop	r15
    5bec:	ef 90       	pop	r14
    5bee:	df 90       	pop	r13
    5bf0:	cf 90       	pop	r12
    5bf2:	bf 90       	pop	r11
    5bf4:	af 90       	pop	r10
    5bf6:	9f 90       	pop	r9
    5bf8:	8f 90       	pop	r8
    5bfa:	08 95       	ret

00005bfc <inverse_amplitude_model>:

float inverse_amplitude_model(float ADC_val, uint8_t power){
    5bfc:	cf 92       	push	r12
    5bfe:	df 92       	push	r13
    5c00:	ef 92       	push	r14
    5c02:	ff 92       	push	r15
    5c04:	6b 01       	movw	r12, r22
    5c06:	7c 01       	movw	r14, r24
	if(power == 255)		return 2*(-1.5+(131.5/sqrtf(ADC_val-3.85)));
    5c08:	4f 3f       	cpi	r20, 0xFF	; 255
    5c0a:	e9 f4       	brne	.+58     	; 0x5c46 <inverse_amplitude_model+0x4a>
    5c0c:	26 e6       	ldi	r18, 0x66	; 102
    5c0e:	36 e6       	ldi	r19, 0x66	; 102
    5c10:	46 e7       	ldi	r20, 0x76	; 118
    5c12:	50 e4       	ldi	r21, 0x40	; 64
    5c14:	c7 01       	movw	r24, r14
    5c16:	b6 01       	movw	r22, r12
    5c18:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5c1c:	0e 94 4b 4b 	call	0x9696	; 0x9696 <sqrt>
    5c20:	9b 01       	movw	r18, r22
    5c22:	ac 01       	movw	r20, r24
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	70 e8       	ldi	r23, 0x80	; 128
    5c28:	83 e0       	ldi	r24, 0x03	; 3
    5c2a:	93 e4       	ldi	r25, 0x43	; 67
    5c2c:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    5c30:	20 e0       	ldi	r18, 0x00	; 0
    5c32:	30 e0       	ldi	r19, 0x00	; 0
    5c34:	40 ec       	ldi	r20, 0xC0	; 192
    5c36:	5f e3       	ldi	r21, 0x3F	; 63
    5c38:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5c3c:	9b 01       	movw	r18, r22
    5c3e:	ac 01       	movw	r20, r24
    5c40:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5c44:	0f c0       	rjmp	.+30     	; 0x5c64 <inverse_amplitude_model+0x68>
	//else if(power == 250) return (33.166/sqrtf(ADC_val - 12.5)) + 4;
	else					printf_P(PSTR("ERROR: Unexpected power: %hhu\r\n"),power);
    5c46:	1f 92       	push	r1
    5c48:	4f 93       	push	r20
    5c4a:	89 e6       	ldi	r24, 0x69	; 105
    5c4c:	96 e0       	ldi	r25, 0x06	; 6
    5c4e:	9f 93       	push	r25
    5c50:	8f 93       	push	r24
    5c52:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
	return 0;
    5c56:	0f 90       	pop	r0
    5c58:	0f 90       	pop	r0
    5c5a:	0f 90       	pop	r0
    5c5c:	0f 90       	pop	r0
    5c5e:	60 e0       	ldi	r22, 0x00	; 0
    5c60:	70 e0       	ldi	r23, 0x00	; 0
    5c62:	cb 01       	movw	r24, r22
}
    5c64:	ff 90       	pop	r15
    5c66:	ef 90       	pop	r14
    5c68:	df 90       	pop	r13
    5c6a:	cf 90       	pop	r12
    5c6c:	08 95       	ret

00005c6e <get_initial_range_guess>:
	*bearing = atan2f(bearingY, bearingX);	
	*heading = atan2f(headingY, headingX);
	
}

float get_initial_range_guess(float bearing, float heading, uint8_t power){
    5c6e:	3f 92       	push	r3
    5c70:	4f 92       	push	r4
    5c72:	5f 92       	push	r5
    5c74:	6f 92       	push	r6
    5c76:	7f 92       	push	r7
    5c78:	8f 92       	push	r8
    5c7a:	9f 92       	push	r9
    5c7c:	af 92       	push	r10
    5c7e:	bf 92       	push	r11
    5c80:	cf 92       	push	r12
    5c82:	df 92       	push	r13
    5c84:	ef 92       	push	r14
    5c86:	ff 92       	push	r15
    5c88:	0f 93       	push	r16
    5c8a:	1f 93       	push	r17
    5c8c:	cf 93       	push	r28
    5c8e:	df 93       	push	r29
    5c90:	6b 01       	movw	r12, r22
    5c92:	7c 01       	movw	r14, r24
    5c94:	29 01       	movw	r4, r18
    5c96:	3a 01       	movw	r6, r20
    5c98:	30 2e       	mov	r3, r16
	int8_t bestS = (6-((int8_t)ceilf((3.0*bearing)/M_PI)))%6;
    5c9a:	20 e0       	ldi	r18, 0x00	; 0
    5c9c:	30 e0       	ldi	r19, 0x00	; 0
    5c9e:	40 e4       	ldi	r20, 0x40	; 64
    5ca0:	50 e4       	ldi	r21, 0x40	; 64
    5ca2:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5ca6:	2b ed       	ldi	r18, 0xDB	; 219
    5ca8:	3f e0       	ldi	r19, 0x0F	; 15
    5caa:	49 e4       	ldi	r20, 0x49	; 73
    5cac:	50 e4       	ldi	r21, 0x40	; 64
    5cae:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    5cb2:	0e 94 56 47 	call	0x8eac	; 0x8eac <ceil>
    5cb6:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__fixsfsi>
    5cba:	c6 e0       	ldi	r28, 0x06	; 6
    5cbc:	d0 e0       	ldi	r29, 0x00	; 0
    5cbe:	ce 01       	movw	r24, r28
    5cc0:	86 1b       	sub	r24, r22
    5cc2:	91 09       	sbc	r25, r1
    5cc4:	67 fd       	sbrc	r22, 7
    5cc6:	93 95       	inc	r25
    5cc8:	be 01       	movw	r22, r28
    5cca:	0e 94 20 50 	call	0xa040	; 0xa040 <__divmodhi4>
	float alpha = pretty_angle(bearing - basis_angle[bestS]);				  //alpha using infinite approximation
    5cce:	08 2f       	mov	r16, r24
    5cd0:	88 0f       	add	r24, r24
    5cd2:	11 0b       	sbc	r17, r17
    5cd4:	f8 01       	movw	r30, r16
    5cd6:	ee 0f       	add	r30, r30
    5cd8:	ff 1f       	adc	r31, r31
    5cda:	ee 0f       	add	r30, r30
    5cdc:	ff 1f       	adc	r31, r31
    5cde:	e2 5c       	subi	r30, 0xC2	; 194
    5ce0:	ff 4d       	sbci	r31, 0xDF	; 223
    5ce2:	20 81       	ld	r18, Z
    5ce4:	31 81       	ldd	r19, Z+1	; 0x01
    5ce6:	42 81       	ldd	r20, Z+2	; 0x02
    5ce8:	53 81       	ldd	r21, Z+3	; 0x03
    5cea:	c7 01       	movw	r24, r14
    5cec:	b6 01       	movw	r22, r12
    5cee:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5cf2:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <pretty_angle>
    5cf6:	4b 01       	movw	r8, r22
    5cf8:	5c 01       	movw	r10, r24
	int8_t bestE = (6-((int8_t)ceilf((3.0*(bearing-heading-M_PI))/M_PI)))%6;					
    5cfa:	a3 01       	movw	r20, r6
    5cfc:	92 01       	movw	r18, r4
    5cfe:	c7 01       	movw	r24, r14
    5d00:	b6 01       	movw	r22, r12
    5d02:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5d06:	2b 01       	movw	r4, r22
    5d08:	3c 01       	movw	r6, r24
    5d0a:	2b ed       	ldi	r18, 0xDB	; 219
    5d0c:	3f e0       	ldi	r19, 0x0F	; 15
    5d0e:	49 e4       	ldi	r20, 0x49	; 73
    5d10:	50 e4       	ldi	r21, 0x40	; 64
    5d12:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5d16:	20 e0       	ldi	r18, 0x00	; 0
    5d18:	30 e0       	ldi	r19, 0x00	; 0
    5d1a:	40 e4       	ldi	r20, 0x40	; 64
    5d1c:	50 e4       	ldi	r21, 0x40	; 64
    5d1e:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5d22:	2b ed       	ldi	r18, 0xDB	; 219
    5d24:	3f e0       	ldi	r19, 0x0F	; 15
    5d26:	49 e4       	ldi	r20, 0x49	; 73
    5d28:	50 e4       	ldi	r21, 0x40	; 64
    5d2a:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    5d2e:	0e 94 56 47 	call	0x8eac	; 0x8eac <ceil>
    5d32:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__fixsfsi>
    5d36:	ce 01       	movw	r24, r28
    5d38:	86 1b       	sub	r24, r22
    5d3a:	91 09       	sbc	r25, r1
    5d3c:	67 fd       	sbrc	r22, 7
    5d3e:	93 95       	inc	r25
    5d40:	be 01       	movw	r22, r28
    5d42:	0e 94 20 50 	call	0xa040	; 0xa040 <__divmodhi4>
	float  beta = pretty_angle(bearing - heading - basis_angle[bestE] - M_PI); //beta using infinite approximation	
    5d46:	c8 2f       	mov	r28, r24
    5d48:	88 0f       	add	r24, r24
    5d4a:	dd 0b       	sbc	r29, r29
    5d4c:	fe 01       	movw	r30, r28
    5d4e:	ee 0f       	add	r30, r30
    5d50:	ff 1f       	adc	r31, r31
    5d52:	ee 0f       	add	r30, r30
    5d54:	ff 1f       	adc	r31, r31
    5d56:	e2 5c       	subi	r30, 0xC2	; 194
    5d58:	ff 4d       	sbci	r31, 0xDF	; 223
    5d5a:	20 81       	ld	r18, Z
    5d5c:	31 81       	ldd	r19, Z+1	; 0x01
    5d5e:	42 81       	ldd	r20, Z+2	; 0x02
    5d60:	53 81       	ldd	r21, Z+3	; 0x03
    5d62:	c3 01       	movw	r24, r6
    5d64:	b2 01       	movw	r22, r4
    5d66:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5d6a:	2b ed       	ldi	r18, 0xDB	; 219
    5d6c:	3f e0       	ldi	r19, 0x0F	; 15
    5d6e:	49 e4       	ldi	r20, 0x49	; 73
    5d70:	50 e4       	ldi	r21, 0x40	; 64
    5d72:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5d76:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <pretty_angle>
    5d7a:	76 2e       	mov	r7, r22
    5d7c:	67 2e       	mov	r6, r23
    5d7e:	58 2e       	mov	r5, r24
    5d80:	49 2e       	mov	r4, r25
	
	//printf("(alpha: %f, sensor %u)\r\n", rad_to_deg(alpha), bestS); 	
	if((alpha > M_PI_2) || (alpha < -M_PI_2)){
    5d82:	2b ed       	ldi	r18, 0xDB	; 219
    5d84:	3f e0       	ldi	r19, 0x0F	; 15
    5d86:	49 ec       	ldi	r20, 0xC9	; 201
    5d88:	5f e3       	ldi	r21, 0x3F	; 63
    5d8a:	c5 01       	movw	r24, r10
    5d8c:	b4 01       	movw	r22, r8
    5d8e:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    5d92:	18 16       	cp	r1, r24
    5d94:	54 f0       	brlt	.+20     	; 0x5daa <get_initial_range_guess+0x13c>
    5d96:	2b ed       	ldi	r18, 0xDB	; 219
    5d98:	3f e0       	ldi	r19, 0x0F	; 15
    5d9a:	49 ec       	ldi	r20, 0xC9	; 201
    5d9c:	5f eb       	ldi	r21, 0xBF	; 191
    5d9e:	c5 01       	movw	r24, r10
    5da0:	b4 01       	movw	r22, r8
    5da2:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    5da6:	88 23       	and	r24, r24
    5da8:	cc f4       	brge	.+50     	; 0x5ddc <get_initial_range_guess+0x16e>
		printf("ERROR: alpha out of range (alpha: %f, sensor %u)\r\n", rad_to_deg(alpha), bestS); 
    5daa:	c5 01       	movw	r24, r10
    5dac:	b4 01       	movw	r22, r8
    5dae:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <rad_to_deg>
    5db2:	1f 93       	push	r17
    5db4:	0f 93       	push	r16
    5db6:	9f 93       	push	r25
    5db8:	8f 93       	push	r24
    5dba:	7f 93       	push	r23
    5dbc:	6f 93       	push	r22
    5dbe:	86 ec       	ldi	r24, 0xC6	; 198
    5dc0:	91 e2       	ldi	r25, 0x21	; 33
    5dc2:	9f 93       	push	r25
    5dc4:	8f 93       	push	r24
    5dc6:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		return 0;
    5dca:	8d b7       	in	r24, 0x3d	; 61
    5dcc:	9e b7       	in	r25, 0x3e	; 62
    5dce:	08 96       	adiw	r24, 0x08	; 8
    5dd0:	8d bf       	out	0x3d, r24	; 61
    5dd2:	9e bf       	out	0x3e, r25	; 62
    5dd4:	60 e0       	ldi	r22, 0x00	; 0
    5dd6:	70 e0       	ldi	r23, 0x00	; 0
    5dd8:	cb 01       	movw	r24, r22
    5dda:	db c0       	rjmp	.+438    	; 0x5f92 <get_initial_range_guess+0x324>
	}
	if((beta > M_PI_2)  || (beta < -M_PI_2)){
    5ddc:	2b ed       	ldi	r18, 0xDB	; 219
    5dde:	3f e0       	ldi	r19, 0x0F	; 15
    5de0:	49 ec       	ldi	r20, 0xC9	; 201
    5de2:	5f e3       	ldi	r21, 0x3F	; 63
    5de4:	67 2d       	mov	r22, r7
    5de6:	76 2d       	mov	r23, r6
    5de8:	85 2d       	mov	r24, r5
    5dea:	94 2d       	mov	r25, r4
    5dec:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    5df0:	18 16       	cp	r1, r24
    5df2:	64 f0       	brlt	.+24     	; 0x5e0c <get_initial_range_guess+0x19e>
    5df4:	2b ed       	ldi	r18, 0xDB	; 219
    5df6:	3f e0       	ldi	r19, 0x0F	; 15
    5df8:	49 ec       	ldi	r20, 0xC9	; 201
    5dfa:	5f eb       	ldi	r21, 0xBF	; 191
    5dfc:	67 2d       	mov	r22, r7
    5dfe:	76 2d       	mov	r23, r6
    5e00:	85 2d       	mov	r24, r5
    5e02:	94 2d       	mov	r25, r4
    5e04:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    5e08:	88 23       	and	r24, r24
    5e0a:	ac f4       	brge	.+42     	; 0x5e36 <get_initial_range_guess+0x1c8>
		printf("ERROR: beta out of range (beta: %f, emitter %u)\r\n",  beta, bestE); 
    5e0c:	df 93       	push	r29
    5e0e:	cf 93       	push	r28
    5e10:	4f 92       	push	r4
    5e12:	5f 92       	push	r5
    5e14:	6f 92       	push	r6
    5e16:	7f 92       	push	r7
    5e18:	89 ef       	ldi	r24, 0xF9	; 249
    5e1a:	91 e2       	ldi	r25, 0x21	; 33
    5e1c:	9f 93       	push	r25
    5e1e:	8f 93       	push	r24
    5e20:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		return 0;
    5e24:	8d b7       	in	r24, 0x3d	; 61
    5e26:	9e b7       	in	r25, 0x3e	; 62
    5e28:	08 96       	adiw	r24, 0x08	; 8
    5e2a:	8d bf       	out	0x3d, r24	; 61
    5e2c:	9e bf       	out	0x3e, r25	; 62
    5e2e:	60 e0       	ldi	r22, 0x00	; 0
    5e30:	70 e0       	ldi	r23, 0x00	; 0
    5e32:	cb 01       	movw	r24, r22
    5e34:	ae c0       	rjmp	.+348    	; 0x5f92 <get_initial_range_guess+0x324>
	}
	//printf("(beta: %f, emitter %u)\r\n",  rad_to_deg(beta), bestE); 	
	// expected contribution (using infinite distance approximation)
	float amplitude;
	float exp_con = sensor_model(alpha)*emitter_model(beta);
    5e36:	c5 01       	movw	r24, r10
    5e38:	b4 01       	movw	r22, r8
    5e3a:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <sensor_model>
    5e3e:	4b 01       	movw	r8, r22
    5e40:	5c 01       	movw	r10, r24
    5e42:	67 2d       	mov	r22, r7
    5e44:	76 2d       	mov	r23, r6
    5e46:	85 2d       	mov	r24, r5
    5e48:	94 2d       	mov	r25, r4
    5e4a:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <emitter_model>
    5e4e:	9b 01       	movw	r18, r22
    5e50:	ac 01       	movw	r20, r24
    5e52:	c5 01       	movw	r24, r10
    5e54:	b4 01       	movw	r22, r8
    5e56:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5e5a:	b6 2e       	mov	r11, r22
    5e5c:	a7 2e       	mov	r10, r23
    5e5e:	98 2e       	mov	r9, r24
    5e60:	89 2e       	mov	r8, r25
	
	if(exp_con > 0)	amplitude = brightMeas[bestE][bestS]/exp_con;	
    5e62:	20 e0       	ldi	r18, 0x00	; 0
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	a9 01       	movw	r20, r18
    5e68:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    5e6c:	18 16       	cp	r1, r24
    5e6e:	0c f0       	brlt	.+2      	; 0x5e72 <get_initial_range_guess+0x204>
    5e70:	7d c0       	rjmp	.+250    	; 0x5f6c <get_initial_range_guess+0x2fe>
    5e72:	fe 01       	movw	r30, r28
    5e74:	ee 0f       	add	r30, r30
    5e76:	ff 1f       	adc	r31, r31
    5e78:	ec 0f       	add	r30, r28
    5e7a:	fd 1f       	adc	r31, r29
    5e7c:	ee 0f       	add	r30, r30
    5e7e:	ff 1f       	adc	r31, r31
    5e80:	e0 0f       	add	r30, r16
    5e82:	f1 1f       	adc	r31, r17
    5e84:	ee 0f       	add	r30, r30
    5e86:	ff 1f       	adc	r31, r31
    5e88:	ef 59       	subi	r30, 0x9F	; 159
    5e8a:	f9 4d       	sbci	r31, 0xD9	; 217
    5e8c:	60 81       	ld	r22, Z
    5e8e:	71 81       	ldd	r23, Z+1	; 0x01
    5e90:	07 2e       	mov	r0, r23
    5e92:	00 0c       	add	r0, r0
    5e94:	88 0b       	sbc	r24, r24
    5e96:	99 0b       	sbc	r25, r25
    5e98:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    5e9c:	2b 2d       	mov	r18, r11
    5e9e:	3a 2d       	mov	r19, r10
    5ea0:	49 2d       	mov	r20, r9
    5ea2:	58 2d       	mov	r21, r8
    5ea4:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
	else{
		printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
		return 0;
	}
	//printf("amp_for_inv: %f\t",amplitude);
	float rMagEst = inverse_amplitude_model(amplitude, power);
    5ea8:	43 2d       	mov	r20, r3
    5eaa:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <inverse_amplitude_model>
    5eae:	4b 01       	movw	r8, r22
    5eb0:	5c 01       	movw	r10, r24
	
	float RX = rMagEst*cos(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][0]-headingBasis[bestE][0]);
    5eb2:	c7 01       	movw	r24, r14
    5eb4:	b6 01       	movw	r22, r12
    5eb6:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    5eba:	2b 01       	movw	r4, r22
    5ebc:	3c 01       	movw	r6, r24
	float RY = rMagEst*sin(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][1]-headingBasis[bestE][1]);
    5ebe:	c7 01       	movw	r24, r14
    5ec0:	b6 01       	movw	r22, r12
    5ec2:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    5ec6:	a5 01       	movw	r20, r10
    5ec8:	94 01       	movw	r18, r8
    5eca:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5ece:	6b 01       	movw	r12, r22
    5ed0:	7c 01       	movw	r14, r24
    5ed2:	00 0f       	add	r16, r16
    5ed4:	11 1f       	adc	r17, r17
    5ed6:	00 0f       	add	r16, r16
    5ed8:	11 1f       	adc	r17, r17
    5eda:	00 0f       	add	r16, r16
    5edc:	11 1f       	adc	r17, r17
    5ede:	04 56       	subi	r16, 0x64	; 100
    5ee0:	1d 4d       	sbci	r17, 0xDD	; 221
    5ee2:	cc 0f       	add	r28, r28
    5ee4:	dd 1f       	adc	r29, r29
    5ee6:	cc 0f       	add	r28, r28
    5ee8:	dd 1f       	adc	r29, r29
    5eea:	cc 0f       	add	r28, r28
    5eec:	dd 1f       	adc	r29, r29
    5eee:	c4 59       	subi	r28, 0x94	; 148
    5ef0:	dd 4d       	sbci	r29, 0xDD	; 221
    5ef2:	2c 81       	ldd	r18, Y+4	; 0x04
    5ef4:	3d 81       	ldd	r19, Y+5	; 0x05
    5ef6:	4e 81       	ldd	r20, Y+6	; 0x06
    5ef8:	5f 81       	ldd	r21, Y+7	; 0x07
    5efa:	f8 01       	movw	r30, r16
    5efc:	64 81       	ldd	r22, Z+4	; 0x04
    5efe:	75 81       	ldd	r23, Z+5	; 0x05
    5f00:	86 81       	ldd	r24, Z+6	; 0x06
    5f02:	97 81       	ldd	r25, Z+7	; 0x07
    5f04:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5f08:	28 e9       	ldi	r18, 0x98	; 152
    5f0a:	3c e4       	ldi	r19, 0x4C	; 76
    5f0c:	45 e0       	ldi	r20, 0x05	; 5
    5f0e:	50 e4       	ldi	r21, 0x40	; 64
    5f10:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5f14:	9b 01       	movw	r18, r22
    5f16:	ac 01       	movw	r20, r24
    5f18:	c7 01       	movw	r24, r14
    5f1a:	b6 01       	movw	r22, r12
    5f1c:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    5f20:	6b 01       	movw	r12, r22
    5f22:	7c 01       	movw	r14, r24
		return 0;
	}
	//printf("amp_for_inv: %f\t",amplitude);
	float rMagEst = inverse_amplitude_model(amplitude, power);
	
	float RX = rMagEst*cos(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][0]-headingBasis[bestE][0]);
    5f24:	a5 01       	movw	r20, r10
    5f26:	94 01       	movw	r18, r8
    5f28:	c3 01       	movw	r24, r6
    5f2a:	b2 01       	movw	r22, r4
    5f2c:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5f30:	4b 01       	movw	r8, r22
    5f32:	5c 01       	movw	r10, r24
    5f34:	28 81       	ld	r18, Y
    5f36:	39 81       	ldd	r19, Y+1	; 0x01
    5f38:	4a 81       	ldd	r20, Y+2	; 0x02
    5f3a:	5b 81       	ldd	r21, Y+3	; 0x03
    5f3c:	f8 01       	movw	r30, r16
    5f3e:	60 81       	ld	r22, Z
    5f40:	71 81       	ldd	r23, Z+1	; 0x01
    5f42:	82 81       	ldd	r24, Z+2	; 0x02
    5f44:	93 81       	ldd	r25, Z+3	; 0x03
    5f46:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    5f4a:	28 e9       	ldi	r18, 0x98	; 152
    5f4c:	3c e4       	ldi	r19, 0x4C	; 76
    5f4e:	45 e0       	ldi	r20, 0x05	; 5
    5f50:	50 e4       	ldi	r21, 0x40	; 64
    5f52:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    5f56:	9b 01       	movw	r18, r22
    5f58:	ac 01       	movw	r20, r24
    5f5a:	c5 01       	movw	r24, r10
    5f5c:	b4 01       	movw	r22, r8
    5f5e:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
	float RY = rMagEst*sin(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][1]-headingBasis[bestE][1]);
	
	float rangeEst = hypotf(RX,RY);
    5f62:	a7 01       	movw	r20, r14
    5f64:	96 01       	movw	r18, r12
    5f66:	0e 94 df 49 	call	0x93be	; 0x93be <hypot>
	
	return rangeEst;
    5f6a:	13 c0       	rjmp	.+38     	; 0x5f92 <get_initial_range_guess+0x324>
	float amplitude;
	float exp_con = sensor_model(alpha)*emitter_model(beta);
	
	if(exp_con > 0)	amplitude = brightMeas[bestE][bestS]/exp_con;	
	else{
		printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
    5f6c:	8f 92       	push	r8
    5f6e:	9f 92       	push	r9
    5f70:	af 92       	push	r10
    5f72:	bf 92       	push	r11
    5f74:	8b e2       	ldi	r24, 0x2B	; 43
    5f76:	92 e2       	ldi	r25, 0x22	; 34
    5f78:	9f 93       	push	r25
    5f7a:	8f 93       	push	r24
    5f7c:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
		return 0;
    5f80:	0f 90       	pop	r0
    5f82:	0f 90       	pop	r0
    5f84:	0f 90       	pop	r0
    5f86:	0f 90       	pop	r0
    5f88:	0f 90       	pop	r0
    5f8a:	0f 90       	pop	r0
    5f8c:	60 e0       	ldi	r22, 0x00	; 0
    5f8e:	70 e0       	ldi	r23, 0x00	; 0
    5f90:	cb 01       	movw	r24, r22
	float RY = rMagEst*sin(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][1]-headingBasis[bestE][1]);
	
	float rangeEst = hypotf(RX,RY);
	
	return rangeEst;
}
    5f92:	df 91       	pop	r29
    5f94:	cf 91       	pop	r28
    5f96:	1f 91       	pop	r17
    5f98:	0f 91       	pop	r16
    5f9a:	ff 90       	pop	r15
    5f9c:	ef 90       	pop	r14
    5f9e:	df 90       	pop	r13
    5fa0:	cf 90       	pop	r12
    5fa2:	bf 90       	pop	r11
    5fa4:	af 90       	pop	r10
    5fa6:	9f 90       	pop	r9
    5fa8:	8f 90       	pop	r8
    5faa:	7f 90       	pop	r7
    5fac:	6f 90       	pop	r6
    5fae:	5f 90       	pop	r5
    5fb0:	4f 90       	pop	r4
    5fb2:	3f 90       	pop	r3
    5fb4:	08 95       	ret

00005fb6 <range_estimate>:

float range_estimate(float init_range, float bearing, float heading, uint8_t power){
    5fb6:	2f 92       	push	r2
    5fb8:	3f 92       	push	r3
    5fba:	4f 92       	push	r4
    5fbc:	5f 92       	push	r5
    5fbe:	6f 92       	push	r6
    5fc0:	7f 92       	push	r7
    5fc2:	8f 92       	push	r8
    5fc4:	9f 92       	push	r9
    5fc6:	af 92       	push	r10
    5fc8:	bf 92       	push	r11
    5fca:	cf 92       	push	r12
    5fcc:	df 92       	push	r13
    5fce:	ef 92       	push	r14
    5fd0:	ff 92       	push	r15
    5fd2:	0f 93       	push	r16
    5fd4:	1f 93       	push	r17
    5fd6:	cf 93       	push	r28
    5fd8:	df 93       	push	r29
    5fda:	cd b7       	in	r28, 0x3d	; 61
    5fdc:	de b7       	in	r29, 0x3e	; 62
    5fde:	cd 50       	subi	r28, 0x0D	; 13
    5fe0:	d1 40       	sbci	r29, 0x01	; 1
    5fe2:	cd bf       	out	0x3d, r28	; 61
    5fe4:	de bf       	out	0x3e, r29	; 62
    5fe6:	cb 50       	subi	r28, 0x0B	; 11
    5fe8:	df 4f       	sbci	r29, 0xFF	; 255
    5fea:	68 83       	st	Y, r22
    5fec:	79 83       	std	Y+1, r23	; 0x01
    5fee:	8a 83       	std	Y+2, r24	; 0x02
    5ff0:	9b 83       	std	Y+3, r25	; 0x03
    5ff2:	c5 5f       	subi	r28, 0xF5	; 245
    5ff4:	d0 40       	sbci	r29, 0x00	; 0
    5ff6:	c7 50       	subi	r28, 0x07	; 7
    5ff8:	df 4f       	sbci	r29, 0xFF	; 255
    5ffa:	28 83       	st	Y, r18
    5ffc:	39 83       	std	Y+1, r19	; 0x01
    5ffe:	4a 83       	std	Y+2, r20	; 0x02
    6000:	5b 83       	std	Y+3, r21	; 0x03
    6002:	c9 5f       	subi	r28, 0xF9	; 249
    6004:	d0 40       	sbci	r29, 0x00	; 0
    6006:	c3 51       	subi	r28, 0x13	; 19
    6008:	df 4f       	sbci	r29, 0xFF	; 255
    600a:	e8 82       	st	Y, r14
    600c:	f9 82       	std	Y+1, r15	; 0x01
    600e:	0a 83       	std	Y+2, r16	; 0x02
    6010:	1b 83       	std	Y+3, r17	; 0x03
    6012:	cd 5e       	subi	r28, 0xED	; 237
    6014:	d0 40       	sbci	r29, 0x00	; 0
    6016:	c3 5f       	subi	r28, 0xF3	; 243
    6018:	de 4f       	sbci	r29, 0xFE	; 254
    601a:	c8 82       	st	Y, r12
    601c:	cd 50       	subi	r28, 0x0D	; 13
    601e:	d1 40       	sbci	r29, 0x01	; 1
    6020:	21 e6       	ldi	r18, 0x61	; 97
    6022:	36 e2       	ldi	r19, 0x26	; 38
    6024:	c7 5f       	subi	r28, 0xF7	; 247
    6026:	de 4f       	sbci	r29, 0xFE	; 254
    6028:	28 83       	st	Y, r18
    602a:	39 83       	std	Y+1, r19	; 0x01
    602c:	c9 50       	subi	r28, 0x09	; 9
    602e:	d1 40       	sbci	r29, 0x01	; 1
    6030:	ce 01       	movw	r24, r28
    6032:	01 96       	adiw	r24, 0x01	; 1
    6034:	c5 5f       	subi	r28, 0xF5	; 245
    6036:	de 4f       	sbci	r29, 0xFE	; 254
    6038:	88 83       	st	Y, r24
    603a:	99 83       	std	Y+1, r25	; 0x01
    603c:	cb 50       	subi	r28, 0x0B	; 11
    603e:	d1 40       	sbci	r29, 0x01	; 1
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
				//printf("sense_emit_contr: %f\r\n",sense_emit_contr);
				if(sense_emit_contr>0){
					calcRIJmag = inverse_amplitude_model(brightMeas[e][s]/sense_emit_contr, power);
				}else{
					calcRIJmag = 0;
    6040:	ee e3       	ldi	r30, 0x3E	; 62
    6042:	f0 e2       	ldi	r31, 0x20	; 32
    6044:	cf 5f       	subi	r28, 0xFF	; 255
    6046:	de 4f       	sbci	r29, 0xFE	; 254
    6048:	e8 83       	st	Y, r30
    604a:	f9 83       	std	Y+1, r31	; 0x01
    604c:	c1 50       	subi	r28, 0x01	; 1
    604e:	d1 40       	sbci	r29, 0x01	; 1
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    6050:	ca 5f       	subi	r28, 0xFA	; 250
    6052:	de 4f       	sbci	r29, 0xFE	; 254
    6054:	18 82       	st	Y, r1
    6056:	c6 50       	subi	r28, 0x06	; 6
    6058:	d1 40       	sbci	r29, 0x01	; 1
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
    605a:	c8 5f       	subi	r28, 0xF8	; 248
    605c:	de 4f       	sbci	r29, 0xFE	; 254
    605e:	18 82       	st	Y, r1
    6060:	c8 50       	subi	r28, 0x08	; 8
    6062:	d1 40       	sbci	r29, 0x01	; 1
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
    6064:	c9 5f       	subi	r28, 0xF9	; 249
    6066:	de 4f       	sbci	r29, 0xFE	; 254
    6068:	18 82       	st	Y, r1
    606a:	c7 50       	subi	r28, 0x07	; 7
    606c:	d1 40       	sbci	r29, 0x01	; 1
	
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
    606e:	20 e0       	ldi	r18, 0x00	; 0
    6070:	30 e8       	ldi	r19, 0x80	; 128
    6072:	cd 50       	subi	r28, 0x0D	; 13
    6074:	df 4f       	sbci	r29, 0xFF	; 255
    6076:	28 83       	st	Y, r18
    6078:	39 83       	std	Y+1, r19	; 0x01
    607a:	c3 5f       	subi	r28, 0xF3	; 243
    607c:	d0 40       	sbci	r29, 0x00	; 0
    607e:	d1 c2       	rjmp	.+1442   	; 0x6622 <range_estimate+0x66c>
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			if(brightMeas[e][s]>maxBright){
    6080:	cf 50       	subi	r28, 0x0F	; 15
    6082:	df 4f       	sbci	r29, 0xFF	; 255
    6084:	e8 81       	ld	r30, Y
    6086:	f9 81       	ldd	r31, Y+1	; 0x01
    6088:	c1 5f       	subi	r28, 0xF1	; 241
    608a:	d0 40       	sbci	r29, 0x00	; 0
    608c:	01 91       	ld	r16, Z+
    608e:	11 91       	ld	r17, Z+
    6090:	cf 50       	subi	r28, 0x0F	; 15
    6092:	df 4f       	sbci	r29, 0xFF	; 255
    6094:	e8 83       	st	Y, r30
    6096:	f9 83       	std	Y+1, r31	; 0x01
    6098:	c1 5f       	subi	r28, 0xF1	; 241
    609a:	d0 40       	sbci	r29, 0x00	; 0
    609c:	cd 50       	subi	r28, 0x0D	; 13
    609e:	df 4f       	sbci	r29, 0xFF	; 255
    60a0:	28 81       	ld	r18, Y
    60a2:	39 81       	ldd	r19, Y+1	; 0x01
    60a4:	c3 5f       	subi	r28, 0xF3	; 243
    60a6:	d0 40       	sbci	r29, 0x00	; 0
    60a8:	20 17       	cp	r18, r16
    60aa:	31 07       	cpc	r19, r17
    60ac:	d4 f4       	brge	.+52     	; 0x60e2 <range_estimate+0x12c>
    60ae:	cf 51       	subi	r28, 0x1F	; 31
    60b0:	df 4f       	sbci	r29, 0xFF	; 255
    60b2:	38 81       	ld	r19, Y
    60b4:	c1 5e       	subi	r28, 0xE1	; 225
    60b6:	d0 40       	sbci	r29, 0x00	; 0
    60b8:	c8 5f       	subi	r28, 0xF8	; 248
    60ba:	de 4f       	sbci	r29, 0xFE	; 254
    60bc:	38 83       	st	Y, r19
    60be:	c8 50       	subi	r28, 0x08	; 8
    60c0:	d1 40       	sbci	r29, 0x01	; 1
    60c2:	cb 5f       	subi	r28, 0xFB	; 251
    60c4:	de 4f       	sbci	r29, 0xFE	; 254
    60c6:	88 81       	ld	r24, Y
    60c8:	c5 50       	subi	r28, 0x05	; 5
    60ca:	d1 40       	sbci	r29, 0x01	; 1
    60cc:	c9 5f       	subi	r28, 0xF9	; 249
    60ce:	de 4f       	sbci	r29, 0xFE	; 254
    60d0:	88 83       	st	Y, r24
    60d2:	c7 50       	subi	r28, 0x07	; 7
    60d4:	d1 40       	sbci	r29, 0x01	; 1
				maxBright = brightMeas[e][s];
    60d6:	cd 50       	subi	r28, 0x0D	; 13
    60d8:	df 4f       	sbci	r29, 0xFF	; 255
    60da:	08 83       	st	Y, r16
    60dc:	19 83       	std	Y+1, r17	; 0x01
    60de:	c3 5f       	subi	r28, 0xF3	; 243
    60e0:	d0 40       	sbci	r29, 0x00	; 0
				maxE = e;
				maxS = s;
			}
			
			if(brightMeas[e][s] > 0){												
    60e2:	10 16       	cp	r1, r16
    60e4:	11 06       	cpc	r1, r17
    60e6:	0c f0       	brlt	.+2      	; 0x60ea <range_estimate+0x134>
    60e8:	46 c2       	rjmp	.+1164   	; 0x6576 <range_estimate+0x5c0>
				sensorRXx = DROPLET_RADIUS*getCosBearingBasis(0,s);
    60ea:	28 e9       	ldi	r18, 0x98	; 152
    60ec:	3c e4       	ldi	r19, 0x4C	; 76
    60ee:	45 e0       	ldi	r20, 0x05	; 5
    60f0:	50 e4       	ldi	r21, 0x40	; 64
    60f2:	f2 01       	movw	r30, r4
    60f4:	60 81       	ld	r22, Z
    60f6:	71 81       	ldd	r23, Z+1	; 0x01
    60f8:	82 81       	ldd	r24, Z+2	; 0x02
    60fa:	93 81       	ldd	r25, Z+3	; 0x03
    60fc:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6100:	cb 51       	subi	r28, 0x1B	; 27
    6102:	df 4f       	sbci	r29, 0xFF	; 255
    6104:	68 83       	st	Y, r22
    6106:	79 83       	std	Y+1, r23	; 0x01
    6108:	8a 83       	std	Y+2, r24	; 0x02
    610a:	9b 83       	std	Y+3, r25	; 0x03
    610c:	c5 5e       	subi	r28, 0xE5	; 229
    610e:	d0 40       	sbci	r29, 0x00	; 0
				sensorRXy = DROPLET_RADIUS*getSinBearingBasis(0,s);
    6110:	28 e9       	ldi	r18, 0x98	; 152
    6112:	3c e4       	ldi	r19, 0x4C	; 76
    6114:	45 e0       	ldi	r20, 0x05	; 5
    6116:	50 e4       	ldi	r21, 0x40	; 64
    6118:	f2 01       	movw	r30, r4
    611a:	64 81       	ldd	r22, Z+4	; 0x04
    611c:	75 81       	ldd	r23, Z+5	; 0x05
    611e:	86 81       	ldd	r24, Z+6	; 0x06
    6120:	97 81       	ldd	r25, Z+7	; 0x07
    6122:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6126:	c7 51       	subi	r28, 0x17	; 23
    6128:	df 4f       	sbci	r29, 0xFF	; 255
    612a:	68 83       	st	Y, r22
    612c:	79 83       	std	Y+1, r23	; 0x01
    612e:	8a 83       	std	Y+2, r24	; 0x02
    6130:	9b 83       	std	Y+3, r25	; 0x03
    6132:	c9 5e       	subi	r28, 0xE9	; 233
    6134:	d0 40       	sbci	r29, 0x00	; 0
				sensorTXx = DROPLET_RADIUS*cosf(basis_angle[e]+heading) + init_range*cosf(bearing);
    6136:	cf 5f       	subi	r28, 0xFF	; 255
    6138:	de 4f       	sbci	r29, 0xFE	; 254
    613a:	e8 81       	ld	r30, Y
    613c:	f9 81       	ldd	r31, Y+1	; 0x01
    613e:	c1 50       	subi	r28, 0x01	; 1
    6140:	d1 40       	sbci	r29, 0x01	; 1
    6142:	80 80       	ld	r8, Z
    6144:	91 80       	ldd	r9, Z+1	; 0x01
    6146:	a2 80       	ldd	r10, Z+2	; 0x02
    6148:	b3 80       	ldd	r11, Z+3	; 0x03
    614a:	c3 51       	subi	r28, 0x13	; 19
    614c:	df 4f       	sbci	r29, 0xFF	; 255
    614e:	28 81       	ld	r18, Y
    6150:	39 81       	ldd	r19, Y+1	; 0x01
    6152:	4a 81       	ldd	r20, Y+2	; 0x02
    6154:	5b 81       	ldd	r21, Y+3	; 0x03
    6156:	cd 5e       	subi	r28, 0xED	; 237
    6158:	d0 40       	sbci	r29, 0x00	; 0
    615a:	c5 01       	movw	r24, r10
    615c:	b4 01       	movw	r22, r8
    615e:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    6162:	6b 01       	movw	r12, r22
    6164:	7c 01       	movw	r14, r24
    6166:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    616a:	c7 52       	subi	r28, 0x27	; 39
    616c:	df 4f       	sbci	r29, 0xFF	; 255
    616e:	68 83       	st	Y, r22
    6170:	79 83       	std	Y+1, r23	; 0x01
    6172:	8a 83       	std	Y+2, r24	; 0x02
    6174:	9b 83       	std	Y+3, r25	; 0x03
    6176:	c9 5d       	subi	r28, 0xD9	; 217
    6178:	d0 40       	sbci	r29, 0x00	; 0
    617a:	c7 50       	subi	r28, 0x07	; 7
    617c:	df 4f       	sbci	r29, 0xFF	; 255
    617e:	68 81       	ld	r22, Y
    6180:	79 81       	ldd	r23, Y+1	; 0x01
    6182:	8a 81       	ldd	r24, Y+2	; 0x02
    6184:	9b 81       	ldd	r25, Y+3	; 0x03
    6186:	c9 5f       	subi	r28, 0xF9	; 249
    6188:	d0 40       	sbci	r29, 0x00	; 0
    618a:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    618e:	c3 52       	subi	r28, 0x23	; 35
    6190:	df 4f       	sbci	r29, 0xFF	; 255
    6192:	68 83       	st	Y, r22
    6194:	79 83       	std	Y+1, r23	; 0x01
    6196:	8a 83       	std	Y+2, r24	; 0x02
    6198:	9b 83       	std	Y+3, r25	; 0x03
    619a:	cd 5d       	subi	r28, 0xDD	; 221
    619c:	d0 40       	sbci	r29, 0x00	; 0
    619e:	28 e9       	ldi	r18, 0x98	; 152
    61a0:	3c e4       	ldi	r19, 0x4C	; 76
    61a2:	45 e0       	ldi	r20, 0x05	; 5
    61a4:	50 e4       	ldi	r21, 0x40	; 64
    61a6:	c7 52       	subi	r28, 0x27	; 39
    61a8:	df 4f       	sbci	r29, 0xFF	; 255
    61aa:	68 81       	ld	r22, Y
    61ac:	79 81       	ldd	r23, Y+1	; 0x01
    61ae:	8a 81       	ldd	r24, Y+2	; 0x02
    61b0:	9b 81       	ldd	r25, Y+3	; 0x03
    61b2:	c9 5d       	subi	r28, 0xD9	; 217
    61b4:	d0 40       	sbci	r29, 0x00	; 0
    61b6:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    61ba:	c7 52       	subi	r28, 0x27	; 39
    61bc:	df 4f       	sbci	r29, 0xFF	; 255
    61be:	68 83       	st	Y, r22
    61c0:	79 83       	std	Y+1, r23	; 0x01
    61c2:	8a 83       	std	Y+2, r24	; 0x02
    61c4:	9b 83       	std	Y+3, r25	; 0x03
    61c6:	c9 5d       	subi	r28, 0xD9	; 217
    61c8:	d0 40       	sbci	r29, 0x00	; 0
    61ca:	cb 50       	subi	r28, 0x0B	; 11
    61cc:	df 4f       	sbci	r29, 0xFF	; 255
    61ce:	28 81       	ld	r18, Y
    61d0:	39 81       	ldd	r19, Y+1	; 0x01
    61d2:	4a 81       	ldd	r20, Y+2	; 0x02
    61d4:	5b 81       	ldd	r21, Y+3	; 0x03
    61d6:	c5 5f       	subi	r28, 0xF5	; 245
    61d8:	d0 40       	sbci	r29, 0x00	; 0
    61da:	c3 52       	subi	r28, 0x23	; 35
    61dc:	df 4f       	sbci	r29, 0xFF	; 255
    61de:	68 81       	ld	r22, Y
    61e0:	79 81       	ldd	r23, Y+1	; 0x01
    61e2:	8a 81       	ldd	r24, Y+2	; 0x02
    61e4:	9b 81       	ldd	r25, Y+3	; 0x03
    61e6:	cd 5d       	subi	r28, 0xDD	; 221
    61e8:	d0 40       	sbci	r29, 0x00	; 0
    61ea:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    61ee:	9b 01       	movw	r18, r22
    61f0:	ac 01       	movw	r20, r24
    61f2:	c7 52       	subi	r28, 0x27	; 39
    61f4:	df 4f       	sbci	r29, 0xFF	; 255
    61f6:	68 81       	ld	r22, Y
    61f8:	79 81       	ldd	r23, Y+1	; 0x01
    61fa:	8a 81       	ldd	r24, Y+2	; 0x02
    61fc:	9b 81       	ldd	r25, Y+3	; 0x03
    61fe:	c9 5d       	subi	r28, 0xD9	; 217
    6200:	d0 40       	sbci	r29, 0x00	; 0
    6202:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    6206:	c7 52       	subi	r28, 0x27	; 39
    6208:	df 4f       	sbci	r29, 0xFF	; 255
    620a:	68 83       	st	Y, r22
    620c:	79 83       	std	Y+1, r23	; 0x01
    620e:	8a 83       	std	Y+2, r24	; 0x02
    6210:	9b 83       	std	Y+3, r25	; 0x03
    6212:	c9 5d       	subi	r28, 0xD9	; 217
    6214:	d0 40       	sbci	r29, 0x00	; 0
				sensorTXy = DROPLET_RADIUS*sinf(basis_angle[e]+heading) + init_range*sinf(bearing);
    6216:	c7 01       	movw	r24, r14
    6218:	b6 01       	movw	r22, r12
    621a:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    621e:	6b 01       	movw	r12, r22
    6220:	7c 01       	movw	r14, r24
    6222:	c7 50       	subi	r28, 0x07	; 7
    6224:	df 4f       	sbci	r29, 0xFF	; 255
    6226:	68 81       	ld	r22, Y
    6228:	79 81       	ldd	r23, Y+1	; 0x01
    622a:	8a 81       	ldd	r24, Y+2	; 0x02
    622c:	9b 81       	ldd	r25, Y+3	; 0x03
    622e:	c9 5f       	subi	r28, 0xF9	; 249
    6230:	d0 40       	sbci	r29, 0x00	; 0
    6232:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    6236:	c3 52       	subi	r28, 0x23	; 35
    6238:	df 4f       	sbci	r29, 0xFF	; 255
    623a:	68 83       	st	Y, r22
    623c:	79 83       	std	Y+1, r23	; 0x01
    623e:	8a 83       	std	Y+2, r24	; 0x02
    6240:	9b 83       	std	Y+3, r25	; 0x03
    6242:	cd 5d       	subi	r28, 0xDD	; 221
    6244:	d0 40       	sbci	r29, 0x00	; 0
    6246:	28 e9       	ldi	r18, 0x98	; 152
    6248:	3c e4       	ldi	r19, 0x4C	; 76
    624a:	45 e0       	ldi	r20, 0x05	; 5
    624c:	50 e4       	ldi	r21, 0x40	; 64
    624e:	c7 01       	movw	r24, r14
    6250:	b6 01       	movw	r22, r12
    6252:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6256:	6b 01       	movw	r12, r22
    6258:	7c 01       	movw	r14, r24
    625a:	cb 50       	subi	r28, 0x0B	; 11
    625c:	df 4f       	sbci	r29, 0xFF	; 255
    625e:	28 81       	ld	r18, Y
    6260:	39 81       	ldd	r19, Y+1	; 0x01
    6262:	4a 81       	ldd	r20, Y+2	; 0x02
    6264:	5b 81       	ldd	r21, Y+3	; 0x03
    6266:	c5 5f       	subi	r28, 0xF5	; 245
    6268:	d0 40       	sbci	r29, 0x00	; 0
    626a:	c3 52       	subi	r28, 0x23	; 35
    626c:	df 4f       	sbci	r29, 0xFF	; 255
    626e:	68 81       	ld	r22, Y
    6270:	79 81       	ldd	r23, Y+1	; 0x01
    6272:	8a 81       	ldd	r24, Y+2	; 0x02
    6274:	9b 81       	ldd	r25, Y+3	; 0x03
    6276:	cd 5d       	subi	r28, 0xDD	; 221
    6278:	d0 40       	sbci	r29, 0x00	; 0
    627a:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    627e:	9b 01       	movw	r18, r22
    6280:	ac 01       	movw	r20, r24
    6282:	c7 01       	movw	r24, r14
    6284:	b6 01       	movw	r22, r12
    6286:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    628a:	6b 01       	movw	r12, r22
    628c:	7c 01       	movw	r14, r24

				alpha = atan2f(sensorTXy-sensorRXy,sensorTXx-sensorRXx) - basis_angle[s];
    628e:	cb 51       	subi	r28, 0x1B	; 27
    6290:	df 4f       	sbci	r29, 0xFF	; 255
    6292:	28 81       	ld	r18, Y
    6294:	39 81       	ldd	r19, Y+1	; 0x01
    6296:	4a 81       	ldd	r20, Y+2	; 0x02
    6298:	5b 81       	ldd	r21, Y+3	; 0x03
    629a:	c5 5e       	subi	r28, 0xE5	; 229
    629c:	d0 40       	sbci	r29, 0x00	; 0
    629e:	c7 52       	subi	r28, 0x27	; 39
    62a0:	df 4f       	sbci	r29, 0xFF	; 255
    62a2:	68 81       	ld	r22, Y
    62a4:	79 81       	ldd	r23, Y+1	; 0x01
    62a6:	8a 81       	ldd	r24, Y+2	; 0x02
    62a8:	9b 81       	ldd	r25, Y+3	; 0x03
    62aa:	c9 5d       	subi	r28, 0xD9	; 217
    62ac:	d0 40       	sbci	r29, 0x00	; 0
    62ae:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    62b2:	c3 52       	subi	r28, 0x23	; 35
    62b4:	df 4f       	sbci	r29, 0xFF	; 255
    62b6:	68 83       	st	Y, r22
    62b8:	79 83       	std	Y+1, r23	; 0x01
    62ba:	8a 83       	std	Y+2, r24	; 0x02
    62bc:	9b 83       	std	Y+3, r25	; 0x03
    62be:	cd 5d       	subi	r28, 0xDD	; 221
    62c0:	d0 40       	sbci	r29, 0x00	; 0
    62c2:	c7 51       	subi	r28, 0x17	; 23
    62c4:	df 4f       	sbci	r29, 0xFF	; 255
    62c6:	28 81       	ld	r18, Y
    62c8:	39 81       	ldd	r19, Y+1	; 0x01
    62ca:	4a 81       	ldd	r20, Y+2	; 0x02
    62cc:	5b 81       	ldd	r21, Y+3	; 0x03
    62ce:	c9 5e       	subi	r28, 0xE9	; 233
    62d0:	d0 40       	sbci	r29, 0x00	; 0
    62d2:	c7 01       	movw	r24, r14
    62d4:	b6 01       	movw	r22, r12
    62d6:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    62da:	c3 52       	subi	r28, 0x23	; 35
    62dc:	df 4f       	sbci	r29, 0xFF	; 255
    62de:	28 81       	ld	r18, Y
    62e0:	39 81       	ldd	r19, Y+1	; 0x01
    62e2:	4a 81       	ldd	r20, Y+2	; 0x02
    62e4:	5b 81       	ldd	r21, Y+3	; 0x03
    62e6:	cd 5d       	subi	r28, 0xDD	; 221
    62e8:	d0 40       	sbci	r29, 0x00	; 0
    62ea:	0e 94 f7 46 	call	0x8dee	; 0x8dee <atan2>
    62ee:	f3 01       	movw	r30, r6
    62f0:	20 81       	ld	r18, Z
    62f2:	31 81       	ldd	r19, Z+1	; 0x01
    62f4:	42 81       	ldd	r20, Z+2	; 0x02
    62f6:	53 81       	ldd	r21, Z+3	; 0x03
    62f8:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    62fc:	c3 52       	subi	r28, 0x23	; 35
    62fe:	df 4f       	sbci	r29, 0xFF	; 255
    6300:	68 83       	st	Y, r22
    6302:	79 83       	std	Y+1, r23	; 0x01
    6304:	8a 83       	std	Y+2, r24	; 0x02
    6306:	9b 83       	std	Y+3, r25	; 0x03
    6308:	cd 5d       	subi	r28, 0xDD	; 221
    630a:	d0 40       	sbci	r29, 0x00	; 0
				beta = atan2f(sensorRXy-sensorTXy,sensorRXx-sensorTXx) - basis_angle[e] - heading;
    630c:	c7 52       	subi	r28, 0x27	; 39
    630e:	df 4f       	sbci	r29, 0xFF	; 255
    6310:	28 81       	ld	r18, Y
    6312:	39 81       	ldd	r19, Y+1	; 0x01
    6314:	4a 81       	ldd	r20, Y+2	; 0x02
    6316:	5b 81       	ldd	r21, Y+3	; 0x03
    6318:	c9 5d       	subi	r28, 0xD9	; 217
    631a:	d0 40       	sbci	r29, 0x00	; 0
    631c:	cb 51       	subi	r28, 0x1B	; 27
    631e:	df 4f       	sbci	r29, 0xFF	; 255
    6320:	68 81       	ld	r22, Y
    6322:	79 81       	ldd	r23, Y+1	; 0x01
    6324:	8a 81       	ldd	r24, Y+2	; 0x02
    6326:	9b 81       	ldd	r25, Y+3	; 0x03
    6328:	c5 5e       	subi	r28, 0xE5	; 229
    632a:	d0 40       	sbci	r29, 0x00	; 0
    632c:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6330:	c7 52       	subi	r28, 0x27	; 39
    6332:	df 4f       	sbci	r29, 0xFF	; 255
    6334:	68 83       	st	Y, r22
    6336:	79 83       	std	Y+1, r23	; 0x01
    6338:	8a 83       	std	Y+2, r24	; 0x02
    633a:	9b 83       	std	Y+3, r25	; 0x03
    633c:	c9 5d       	subi	r28, 0xD9	; 217
    633e:	d0 40       	sbci	r29, 0x00	; 0
    6340:	a7 01       	movw	r20, r14
    6342:	96 01       	movw	r18, r12
    6344:	c7 51       	subi	r28, 0x17	; 23
    6346:	df 4f       	sbci	r29, 0xFF	; 255
    6348:	68 81       	ld	r22, Y
    634a:	79 81       	ldd	r23, Y+1	; 0x01
    634c:	8a 81       	ldd	r24, Y+2	; 0x02
    634e:	9b 81       	ldd	r25, Y+3	; 0x03
    6350:	c9 5e       	subi	r28, 0xE9	; 233
    6352:	d0 40       	sbci	r29, 0x00	; 0
    6354:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6358:	c7 52       	subi	r28, 0x27	; 39
    635a:	df 4f       	sbci	r29, 0xFF	; 255
    635c:	28 81       	ld	r18, Y
    635e:	39 81       	ldd	r19, Y+1	; 0x01
    6360:	4a 81       	ldd	r20, Y+2	; 0x02
    6362:	5b 81       	ldd	r21, Y+3	; 0x03
    6364:	c9 5d       	subi	r28, 0xD9	; 217
    6366:	d0 40       	sbci	r29, 0x00	; 0
    6368:	0e 94 f7 46 	call	0x8dee	; 0x8dee <atan2>
    636c:	a5 01       	movw	r20, r10
    636e:	94 01       	movw	r18, r8
    6370:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6374:	c3 51       	subi	r28, 0x13	; 19
    6376:	df 4f       	sbci	r29, 0xFF	; 255
    6378:	28 81       	ld	r18, Y
    637a:	39 81       	ldd	r19, Y+1	; 0x01
    637c:	4a 81       	ldd	r20, Y+2	; 0x02
    637e:	5b 81       	ldd	r21, Y+3	; 0x03
    6380:	cd 5e       	subi	r28, 0xED	; 237
    6382:	d0 40       	sbci	r29, 0x00	; 0
    6384:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6388:	4b 01       	movw	r8, r22
    638a:	5c 01       	movw	r10, r24

				alpha = pretty_angle(alpha);
    638c:	c3 52       	subi	r28, 0x23	; 35
    638e:	df 4f       	sbci	r29, 0xFF	; 255
    6390:	68 81       	ld	r22, Y
    6392:	79 81       	ldd	r23, Y+1	; 0x01
    6394:	8a 81       	ldd	r24, Y+2	; 0x02
    6396:	9b 81       	ldd	r25, Y+3	; 0x03
    6398:	cd 5d       	subi	r28, 0xDD	; 221
    639a:	d0 40       	sbci	r29, 0x00	; 0
    639c:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <pretty_angle>
    63a0:	6b 01       	movw	r12, r22
    63a2:	7c 01       	movw	r14, r24
				beta = pretty_angle(beta);
    63a4:	c5 01       	movw	r24, r10
    63a6:	b4 01       	movw	r22, r8
    63a8:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <pretty_angle>
    63ac:	c7 52       	subi	r28, 0x27	; 39
    63ae:	df 4f       	sbci	r29, 0xFF	; 255
    63b0:	68 83       	st	Y, r22
    63b2:	79 83       	std	Y+1, r23	; 0x01
    63b4:	8a 83       	std	Y+2, r24	; 0x02
    63b6:	9b 83       	std	Y+3, r25	; 0x03
    63b8:	c9 5d       	subi	r28, 0xD9	; 217
    63ba:	d0 40       	sbci	r29, 0x00	; 0
				
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
    63bc:	c7 01       	movw	r24, r14
    63be:	b6 01       	movw	r22, r12
    63c0:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <sensor_model>
    63c4:	4b 01       	movw	r8, r22
    63c6:	5c 01       	movw	r10, r24
    63c8:	c7 52       	subi	r28, 0x27	; 39
    63ca:	df 4f       	sbci	r29, 0xFF	; 255
    63cc:	68 81       	ld	r22, Y
    63ce:	79 81       	ldd	r23, Y+1	; 0x01
    63d0:	8a 81       	ldd	r24, Y+2	; 0x02
    63d2:	9b 81       	ldd	r25, Y+3	; 0x03
    63d4:	c9 5d       	subi	r28, 0xD9	; 217
    63d6:	d0 40       	sbci	r29, 0x00	; 0
    63d8:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <emitter_model>
    63dc:	9b 01       	movw	r18, r22
    63de:	ac 01       	movw	r20, r24
    63e0:	c5 01       	movw	r24, r10
    63e2:	b4 01       	movw	r22, r8
    63e4:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    63e8:	4b 01       	movw	r8, r22
    63ea:	5c 01       	movw	r10, r24
				//printf("sense_emit_contr: %f\r\n",sense_emit_contr);
				if(sense_emit_contr>0){
    63ec:	20 e0       	ldi	r18, 0x00	; 0
    63ee:	30 e0       	ldi	r19, 0x00	; 0
    63f0:	a9 01       	movw	r20, r18
    63f2:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    63f6:	18 16       	cp	r1, r24
    63f8:	d4 f4       	brge	.+52     	; 0x642e <range_estimate+0x478>
					calcRIJmag = inverse_amplitude_model(brightMeas[e][s]/sense_emit_contr, power);
    63fa:	b8 01       	movw	r22, r16
    63fc:	11 0f       	add	r17, r17
    63fe:	88 0b       	sbc	r24, r24
    6400:	99 0b       	sbc	r25, r25
    6402:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    6406:	a5 01       	movw	r20, r10
    6408:	94 01       	movw	r18, r8
    640a:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    640e:	c3 5f       	subi	r28, 0xF3	; 243
    6410:	de 4f       	sbci	r29, 0xFE	; 254
    6412:	48 81       	ld	r20, Y
    6414:	cd 50       	subi	r28, 0x0D	; 13
    6416:	d1 40       	sbci	r29, 0x01	; 1
    6418:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <inverse_amplitude_model>
    641c:	c7 52       	subi	r28, 0x27	; 39
    641e:	df 4f       	sbci	r29, 0xFF	; 255
    6420:	68 83       	st	Y, r22
    6422:	79 83       	std	Y+1, r23	; 0x01
    6424:	8a 83       	std	Y+2, r24	; 0x02
    6426:	9b 83       	std	Y+3, r25	; 0x03
    6428:	c9 5d       	subi	r28, 0xD9	; 217
    642a:	d0 40       	sbci	r29, 0x00	; 0
    642c:	08 c0       	rjmp	.+16     	; 0x643e <range_estimate+0x488>
				}else{
					calcRIJmag = 0;
    642e:	c7 52       	subi	r28, 0x27	; 39
    6430:	df 4f       	sbci	r29, 0xFF	; 255
    6432:	18 82       	st	Y, r1
    6434:	19 82       	std	Y+1, r1	; 0x01
    6436:	1a 82       	std	Y+2, r1	; 0x02
    6438:	1b 82       	std	Y+3, r1	; 0x03
    643a:	c9 5d       	subi	r28, 0xD9	; 217
    643c:	d0 40       	sbci	r29, 0x00	; 0
				}
				calcRx = calcRIJmag*cosf(alpha) + sensorRXx - DROPLET_RADIUS*cosf(basis_angle[e]+heading);
    643e:	c7 01       	movw	r24, r14
    6440:	b6 01       	movw	r22, r12
    6442:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    6446:	c3 52       	subi	r28, 0x23	; 35
    6448:	df 4f       	sbci	r29, 0xFF	; 255
    644a:	68 83       	st	Y, r22
    644c:	79 83       	std	Y+1, r23	; 0x01
    644e:	8a 83       	std	Y+2, r24	; 0x02
    6450:	9b 83       	std	Y+3, r25	; 0x03
    6452:	cd 5d       	subi	r28, 0xDD	; 221
    6454:	d0 40       	sbci	r29, 0x00	; 0
    6456:	cd 5f       	subi	r28, 0xFD	; 253
    6458:	de 4f       	sbci	r29, 0xFE	; 254
    645a:	e8 81       	ld	r30, Y
    645c:	f9 81       	ldd	r31, Y+1	; 0x01
    645e:	c3 50       	subi	r28, 0x03	; 3
    6460:	d1 40       	sbci	r29, 0x01	; 1
    6462:	20 81       	ld	r18, Z
    6464:	31 81       	ldd	r19, Z+1	; 0x01
    6466:	42 81       	ldd	r20, Z+2	; 0x02
    6468:	53 81       	ldd	r21, Z+3	; 0x03
    646a:	c3 51       	subi	r28, 0x13	; 19
    646c:	df 4f       	sbci	r29, 0xFF	; 255
    646e:	68 81       	ld	r22, Y
    6470:	79 81       	ldd	r23, Y+1	; 0x01
    6472:	8a 81       	ldd	r24, Y+2	; 0x02
    6474:	9b 81       	ldd	r25, Y+3	; 0x03
    6476:	cd 5e       	subi	r28, 0xED	; 237
    6478:	d0 40       	sbci	r29, 0x00	; 0
    647a:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    647e:	4b 01       	movw	r8, r22
    6480:	5c 01       	movw	r10, r24
    6482:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <cos>
    6486:	c3 50       	subi	r28, 0x03	; 3
    6488:	df 4f       	sbci	r29, 0xFF	; 255
    648a:	68 83       	st	Y, r22
    648c:	79 83       	std	Y+1, r23	; 0x01
    648e:	8a 83       	std	Y+2, r24	; 0x02
    6490:	9b 83       	std	Y+3, r25	; 0x03
    6492:	cd 5f       	subi	r28, 0xFD	; 253
    6494:	d0 40       	sbci	r29, 0x00	; 0
				calcRy = calcRIJmag*sinf(alpha) + sensorRXy - DROPLET_RADIUS*sinf(basis_angle[e]+heading);
    6496:	c7 01       	movw	r24, r14
    6498:	b6 01       	movw	r22, r12
    649a:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    649e:	6b 01       	movw	r12, r22
    64a0:	7c 01       	movw	r14, r24
    64a2:	c5 01       	movw	r24, r10
    64a4:	b4 01       	movw	r22, r8
    64a6:	0e 94 3d 4b 	call	0x967a	; 0x967a <sin>
    64aa:	4b 01       	movw	r8, r22
    64ac:	5c 01       	movw	r10, r24
    64ae:	c7 52       	subi	r28, 0x27	; 39
    64b0:	df 4f       	sbci	r29, 0xFF	; 255
    64b2:	28 81       	ld	r18, Y
    64b4:	39 81       	ldd	r19, Y+1	; 0x01
    64b6:	4a 81       	ldd	r20, Y+2	; 0x02
    64b8:	5b 81       	ldd	r21, Y+3	; 0x03
    64ba:	c9 5d       	subi	r28, 0xD9	; 217
    64bc:	d0 40       	sbci	r29, 0x00	; 0
    64be:	c7 01       	movw	r24, r14
    64c0:	b6 01       	movw	r22, r12
    64c2:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    64c6:	c7 51       	subi	r28, 0x17	; 23
    64c8:	df 4f       	sbci	r29, 0xFF	; 255
    64ca:	28 81       	ld	r18, Y
    64cc:	39 81       	ldd	r19, Y+1	; 0x01
    64ce:	4a 81       	ldd	r20, Y+2	; 0x02
    64d0:	5b 81       	ldd	r21, Y+3	; 0x03
    64d2:	c9 5e       	subi	r28, 0xE9	; 233
    64d4:	d0 40       	sbci	r29, 0x00	; 0
    64d6:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    64da:	6b 01       	movw	r12, r22
    64dc:	7c 01       	movw	r14, r24
    64de:	28 e9       	ldi	r18, 0x98	; 152
    64e0:	3c e4       	ldi	r19, 0x4C	; 76
    64e2:	45 e0       	ldi	r20, 0x05	; 5
    64e4:	50 e4       	ldi	r21, 0x40	; 64
    64e6:	c5 01       	movw	r24, r10
    64e8:	b4 01       	movw	r22, r8
    64ea:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    64ee:	9b 01       	movw	r18, r22
    64f0:	ac 01       	movw	r20, r24
    64f2:	c7 01       	movw	r24, r14
    64f4:	b6 01       	movw	r22, r12
    64f6:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    64fa:	6b 01       	movw	r12, r22
    64fc:	7c 01       	movw	r14, r24
				if(sense_emit_contr>0){
					calcRIJmag = inverse_amplitude_model(brightMeas[e][s]/sense_emit_contr, power);
				}else{
					calcRIJmag = 0;
				}
				calcRx = calcRIJmag*cosf(alpha) + sensorRXx - DROPLET_RADIUS*cosf(basis_angle[e]+heading);
    64fe:	c7 52       	subi	r28, 0x27	; 39
    6500:	df 4f       	sbci	r29, 0xFF	; 255
    6502:	28 81       	ld	r18, Y
    6504:	39 81       	ldd	r19, Y+1	; 0x01
    6506:	4a 81       	ldd	r20, Y+2	; 0x02
    6508:	5b 81       	ldd	r21, Y+3	; 0x03
    650a:	c9 5d       	subi	r28, 0xD9	; 217
    650c:	d0 40       	sbci	r29, 0x00	; 0
    650e:	c3 52       	subi	r28, 0x23	; 35
    6510:	df 4f       	sbci	r29, 0xFF	; 255
    6512:	68 81       	ld	r22, Y
    6514:	79 81       	ldd	r23, Y+1	; 0x01
    6516:	8a 81       	ldd	r24, Y+2	; 0x02
    6518:	9b 81       	ldd	r25, Y+3	; 0x03
    651a:	cd 5d       	subi	r28, 0xDD	; 221
    651c:	d0 40       	sbci	r29, 0x00	; 0
    651e:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6522:	cb 51       	subi	r28, 0x1B	; 27
    6524:	df 4f       	sbci	r29, 0xFF	; 255
    6526:	28 81       	ld	r18, Y
    6528:	39 81       	ldd	r19, Y+1	; 0x01
    652a:	4a 81       	ldd	r20, Y+2	; 0x02
    652c:	5b 81       	ldd	r21, Y+3	; 0x03
    652e:	c5 5e       	subi	r28, 0xE5	; 229
    6530:	d0 40       	sbci	r29, 0x00	; 0
    6532:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    6536:	4b 01       	movw	r8, r22
    6538:	5c 01       	movw	r10, r24
    653a:	28 e9       	ldi	r18, 0x98	; 152
    653c:	3c e4       	ldi	r19, 0x4C	; 76
    653e:	45 e0       	ldi	r20, 0x05	; 5
    6540:	50 e4       	ldi	r21, 0x40	; 64
    6542:	c3 50       	subi	r28, 0x03	; 3
    6544:	df 4f       	sbci	r29, 0xFF	; 255
    6546:	68 81       	ld	r22, Y
    6548:	79 81       	ldd	r23, Y+1	; 0x01
    654a:	8a 81       	ldd	r24, Y+2	; 0x02
    654c:	9b 81       	ldd	r25, Y+3	; 0x03
    654e:	cd 5f       	subi	r28, 0xFD	; 253
    6550:	d0 40       	sbci	r29, 0x00	; 0
    6552:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6556:	9b 01       	movw	r18, r22
    6558:	ac 01       	movw	r20, r24
    655a:	c5 01       	movw	r24, r10
    655c:	b4 01       	movw	r22, r8
    655e:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
				calcRy = calcRIJmag*sinf(alpha) + sensorRXy - DROPLET_RADIUS*sinf(basis_angle[e]+heading);
				range_matrix[e][s] = hypotf(calcRx, calcRy);
    6562:	a7 01       	movw	r20, r14
    6564:	96 01       	movw	r18, r12
    6566:	0e 94 df 49 	call	0x93be	; 0x93be <hypot>
    656a:	f1 01       	movw	r30, r2
    656c:	60 83       	st	Z, r22
    656e:	71 83       	std	Z+1, r23	; 0x01
    6570:	82 83       	std	Z+2, r24	; 0x02
    6572:	93 83       	std	Z+3, r25	; 0x03
				continue;
    6574:	05 c0       	rjmp	.+10     	; 0x6580 <range_estimate+0x5ca>
			}
			range_matrix[e][s]=0;
    6576:	f1 01       	movw	r30, r2
    6578:	10 82       	st	Z, r1
    657a:	11 82       	std	Z+1, r1	; 0x01
    657c:	12 82       	std	Z+2, r1	; 0x02
    657e:	13 82       	std	Z+3, r1	; 0x03

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    6580:	cf 51       	subi	r28, 0x1F	; 31
    6582:	df 4f       	sbci	r29, 0xFF	; 255
    6584:	f8 81       	ld	r31, Y
    6586:	c1 5e       	subi	r28, 0xE1	; 225
    6588:	d0 40       	sbci	r29, 0x00	; 0
    658a:	ff 5f       	subi	r31, 0xFF	; 255
    658c:	cf 51       	subi	r28, 0x1F	; 31
    658e:	df 4f       	sbci	r29, 0xFF	; 255
    6590:	f8 83       	st	Y, r31
    6592:	c1 5e       	subi	r28, 0xE1	; 225
    6594:	d0 40       	sbci	r29, 0x00	; 0
    6596:	24 e0       	ldi	r18, 0x04	; 4
    6598:	22 0e       	add	r2, r18
    659a:	31 1c       	adc	r3, r1
    659c:	38 e0       	ldi	r19, 0x08	; 8
    659e:	43 0e       	add	r4, r19
    65a0:	51 1c       	adc	r5, r1
    65a2:	84 e0       	ldi	r24, 0x04	; 4
    65a4:	68 0e       	add	r6, r24
    65a6:	71 1c       	adc	r7, r1
    65a8:	f6 30       	cpi	r31, 0x06	; 6
    65aa:	09 f0       	breq	.+2      	; 0x65ae <range_estimate+0x5f8>
    65ac:	69 cd       	rjmp	.-1326   	; 0x6080 <range_estimate+0xca>
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    65ae:	ca 5f       	subi	r28, 0xFA	; 250
    65b0:	de 4f       	sbci	r29, 0xFE	; 254
    65b2:	98 81       	ld	r25, Y
    65b4:	c6 50       	subi	r28, 0x06	; 6
    65b6:	d1 40       	sbci	r29, 0x01	; 1
    65b8:	9f 5f       	subi	r25, 0xFF	; 255
    65ba:	ca 5f       	subi	r28, 0xFA	; 250
    65bc:	de 4f       	sbci	r29, 0xFE	; 254
    65be:	98 83       	st	Y, r25
    65c0:	c6 50       	subi	r28, 0x06	; 6
    65c2:	d1 40       	sbci	r29, 0x01	; 1
    65c4:	cf 5f       	subi	r28, 0xFF	; 255
    65c6:	de 4f       	sbci	r29, 0xFE	; 254
    65c8:	e8 81       	ld	r30, Y
    65ca:	f9 81       	ldd	r31, Y+1	; 0x01
    65cc:	c1 50       	subi	r28, 0x01	; 1
    65ce:	d1 40       	sbci	r29, 0x01	; 1
    65d0:	34 96       	adiw	r30, 0x04	; 4
    65d2:	cf 5f       	subi	r28, 0xFF	; 255
    65d4:	de 4f       	sbci	r29, 0xFE	; 254
    65d6:	e8 83       	st	Y, r30
    65d8:	f9 83       	std	Y+1, r31	; 0x01
    65da:	c1 50       	subi	r28, 0x01	; 1
    65dc:	d1 40       	sbci	r29, 0x01	; 1
    65de:	c7 5f       	subi	r28, 0xF7	; 247
    65e0:	de 4f       	sbci	r29, 0xFE	; 254
    65e2:	28 81       	ld	r18, Y
    65e4:	39 81       	ldd	r19, Y+1	; 0x01
    65e6:	c9 50       	subi	r28, 0x09	; 9
    65e8:	d1 40       	sbci	r29, 0x01	; 1
    65ea:	24 5f       	subi	r18, 0xF4	; 244
    65ec:	3f 4f       	sbci	r19, 0xFF	; 255
    65ee:	c7 5f       	subi	r28, 0xF7	; 247
    65f0:	de 4f       	sbci	r29, 0xFE	; 254
    65f2:	28 83       	st	Y, r18
    65f4:	39 83       	std	Y+1, r19	; 0x01
    65f6:	c9 50       	subi	r28, 0x09	; 9
    65f8:	d1 40       	sbci	r29, 0x01	; 1
    65fa:	c5 5f       	subi	r28, 0xF5	; 245
    65fc:	de 4f       	sbci	r29, 0xFE	; 254
    65fe:	88 81       	ld	r24, Y
    6600:	99 81       	ldd	r25, Y+1	; 0x01
    6602:	cb 50       	subi	r28, 0x0B	; 11
    6604:	d1 40       	sbci	r29, 0x01	; 1
    6606:	48 96       	adiw	r24, 0x18	; 24
    6608:	c5 5f       	subi	r28, 0xF5	; 245
    660a:	de 4f       	sbci	r29, 0xFE	; 254
    660c:	88 83       	st	Y, r24
    660e:	99 83       	std	Y+1, r25	; 0x01
    6610:	cb 50       	subi	r28, 0x0B	; 11
    6612:	d1 40       	sbci	r29, 0x01	; 1
    6614:	ca 5f       	subi	r28, 0xFA	; 250
    6616:	de 4f       	sbci	r29, 0xFE	; 254
    6618:	98 81       	ld	r25, Y
    661a:	c6 50       	subi	r28, 0x06	; 6
    661c:	d1 40       	sbci	r29, 0x01	; 1
    661e:	96 30       	cpi	r25, 0x06	; 6
    6620:	d1 f1       	breq	.+116    	; 0x6696 <range_estimate+0x6e0>
    6622:	0f 2e       	mov	r0, r31
    6624:	fc e9       	ldi	r31, 0x9C	; 156
    6626:	4f 2e       	mov	r4, r31
    6628:	f2 e2       	ldi	r31, 0x22	; 34
    662a:	5f 2e       	mov	r5, r31
    662c:	f0 2d       	mov	r31, r0
	float rangeEst = hypotf(RX,RY);
	
	return rangeEst;
}

float range_estimate(float init_range, float bearing, float heading, uint8_t power){
    662e:	0f 2e       	mov	r0, r31
    6630:	fe e3       	ldi	r31, 0x3E	; 62
    6632:	6f 2e       	mov	r6, r31
    6634:	f0 e2       	ldi	r31, 0x20	; 32
    6636:	7f 2e       	mov	r7, r31
    6638:	f0 2d       	mov	r31, r0
    663a:	c5 5f       	subi	r28, 0xF5	; 245
    663c:	de 4f       	sbci	r29, 0xFE	; 254
    663e:	28 80       	ld	r2, Y
    6640:	39 80       	ldd	r3, Y+1	; 0x01
    6642:	cb 50       	subi	r28, 0x0B	; 11
    6644:	d1 40       	sbci	r29, 0x01	; 1
    6646:	c7 5f       	subi	r28, 0xF7	; 247
    6648:	de 4f       	sbci	r29, 0xFE	; 254
    664a:	e8 81       	ld	r30, Y
    664c:	f9 81       	ldd	r31, Y+1	; 0x01
    664e:	c9 50       	subi	r28, 0x09	; 9
    6650:	d1 40       	sbci	r29, 0x01	; 1
    6652:	cf 50       	subi	r28, 0x0F	; 15
    6654:	df 4f       	sbci	r29, 0xFF	; 255
    6656:	e8 83       	st	Y, r30
    6658:	f9 83       	std	Y+1, r31	; 0x01
    665a:	c1 5f       	subi	r28, 0xF1	; 241
    665c:	d0 40       	sbci	r29, 0x00	; 0
    665e:	cf 51       	subi	r28, 0x1F	; 31
    6660:	df 4f       	sbci	r29, 0xFF	; 255
    6662:	18 82       	st	Y, r1
    6664:	c1 5e       	subi	r28, 0xE1	; 225
    6666:	d0 40       	sbci	r29, 0x00	; 0
	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			if(brightMeas[e][s]>maxBright){
    6668:	ca 5f       	subi	r28, 0xFA	; 250
    666a:	de 4f       	sbci	r29, 0xFE	; 254
    666c:	f8 81       	ld	r31, Y
    666e:	c6 50       	subi	r28, 0x06	; 6
    6670:	d1 40       	sbci	r29, 0x01	; 1
    6672:	cb 5f       	subi	r28, 0xFB	; 251
    6674:	de 4f       	sbci	r29, 0xFE	; 254
    6676:	f8 83       	st	Y, r31
    6678:	c5 50       	subi	r28, 0x05	; 5
    667a:	d1 40       	sbci	r29, 0x01	; 1
    667c:	cf 5f       	subi	r28, 0xFF	; 255
    667e:	de 4f       	sbci	r29, 0xFE	; 254
    6680:	28 81       	ld	r18, Y
    6682:	39 81       	ldd	r19, Y+1	; 0x01
    6684:	c1 50       	subi	r28, 0x01	; 1
    6686:	d1 40       	sbci	r29, 0x01	; 1
    6688:	cd 5f       	subi	r28, 0xFD	; 253
    668a:	de 4f       	sbci	r29, 0xFE	; 254
    668c:	28 83       	st	Y, r18
    668e:	39 83       	std	Y+1, r19	; 0x01
    6690:	c3 50       	subi	r28, 0x03	; 3
    6692:	d1 40       	sbci	r29, 0x01	; 1
    6694:	f5 cc       	rjmp	.-1558   	; 0x6080 <range_estimate+0xca>
    6696:	c9 5f       	subi	r28, 0xF9	; 249
    6698:	de 4f       	sbci	r29, 0xFE	; 254
    669a:	38 81       	ld	r19, Y
    669c:	c7 50       	subi	r28, 0x07	; 7
    669e:	d1 40       	sbci	r29, 0x01	; 1
    66a0:	83 2f       	mov	r24, r19
    66a2:	90 e0       	ldi	r25, 0x00	; 0
    66a4:	3c 01       	movw	r6, r24
    66a6:	e5 e0       	ldi	r30, 0x05	; 5
    66a8:	6e 0e       	add	r6, r30
    66aa:	71 1c       	adc	r7, r1
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    66ac:	a1 2c       	mov	r10, r1
    66ae:	b1 2c       	mov	r11, r1
    66b0:	cf 51       	subi	r28, 0x1F	; 31
    66b2:	df 4f       	sbci	r29, 0xFF	; 255
    66b4:	18 82       	st	Y, r1
    66b6:	19 82       	std	Y+1, r1	; 0x01
    66b8:	1a 82       	std	Y+2, r1	; 0x02
    66ba:	1b 82       	std	Y+3, r1	; 0x03
    66bc:	c1 5e       	subi	r28, 0xE1	; 225
    66be:	d0 40       	sbci	r29, 0x00	; 0
	float rangeMatSubset[3][3];
	float brightMatSubset[3][3];
	float froebNormSquared=0;
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
			uint8_t otherE = ((maxE+(e+5))%6);
    66c0:	0f 2e       	mov	r0, r31
    66c2:	f6 e0       	ldi	r31, 0x06	; 6
    66c4:	cf 2e       	mov	r12, r31
    66c6:	d1 2c       	mov	r13, r1
    66c8:	f0 2d       	mov	r31, r0
    66ca:	c8 5f       	subi	r28, 0xF8	; 248
    66cc:	de 4f       	sbci	r29, 0xFE	; 254
    66ce:	f8 81       	ld	r31, Y
    66d0:	c8 50       	subi	r28, 0x08	; 8
    66d2:	d1 40       	sbci	r29, 0x01	; 1
    66d4:	2f 2e       	mov	r2, r31
    66d6:	31 2c       	mov	r3, r1
    66d8:	91 01       	movw	r18, r2
    66da:	2b 5f       	subi	r18, 0xFB	; 251
    66dc:	3f 4f       	sbci	r19, 0xFF	; 255
    66de:	cb 51       	subi	r28, 0x1B	; 27
    66e0:	df 4f       	sbci	r29, 0xFF	; 255
    66e2:	28 83       	st	Y, r18
    66e4:	39 83       	std	Y+1, r19	; 0x01
    66e6:	c5 5e       	subi	r28, 0xE5	; 229
    66e8:	d0 40       	sbci	r29, 0x00	; 0
    66ea:	38 e0       	ldi	r19, 0x08	; 8
    66ec:	23 0e       	add	r2, r19
    66ee:	31 1c       	adc	r3, r1
    66f0:	73 01       	movw	r14, r6
    66f2:	57 c0       	rjmp	.+174    	; 0x67a2 <range_estimate+0x7ec>
			uint8_t otherS = ((maxS+(s+5))%6);
    66f4:	c8 01       	movw	r24, r16
    66f6:	b6 01       	movw	r22, r12
    66f8:	0e 94 20 50 	call	0xa040	; 0xa040 <__divmodhi4>
			rangeMatSubset[e][s] = range_matrix[otherE][otherS];
    66fc:	f2 01       	movw	r30, r4
    66fe:	e8 0f       	add	r30, r24
    6700:	f1 1d       	adc	r31, r1
    6702:	cf 01       	movw	r24, r30
    6704:	ee 0f       	add	r30, r30
    6706:	ff 1f       	adc	r31, r31
    6708:	ee 0f       	add	r30, r30
    670a:	ff 1f       	adc	r31, r31
    670c:	21 e0       	ldi	r18, 0x01	; 1
    670e:	30 e0       	ldi	r19, 0x00	; 0
    6710:	2c 0f       	add	r18, r28
    6712:	3d 1f       	adc	r19, r29
    6714:	e2 0f       	add	r30, r18
    6716:	f3 1f       	adc	r31, r19
    6718:	40 81       	ld	r20, Z
    671a:	51 81       	ldd	r21, Z+1	; 0x01
    671c:	62 81       	ldd	r22, Z+2	; 0x02
    671e:	73 81       	ldd	r23, Z+3	; 0x03
    6720:	f3 01       	movw	r30, r6
    6722:	41 93       	st	Z+, r20
    6724:	51 93       	st	Z+, r21
    6726:	61 93       	st	Z+, r22
    6728:	71 93       	st	Z+, r23
    672a:	3f 01       	movw	r6, r30
			brightMatSubset[e][s] = (float)brightMeas[otherE][otherS];
    672c:	88 0f       	add	r24, r24
    672e:	99 1f       	adc	r25, r25
    6730:	fc 01       	movw	r30, r24
    6732:	ef 59       	subi	r30, 0x9F	; 159
    6734:	f9 4d       	sbci	r31, 0xD9	; 217
    6736:	60 81       	ld	r22, Z
    6738:	71 81       	ldd	r23, Z+1	; 0x01
    673a:	07 2e       	mov	r0, r23
    673c:	00 0c       	add	r0, r0
    673e:	88 0b       	sbc	r24, r24
    6740:	99 0b       	sbc	r25, r25
    6742:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    6746:	f4 01       	movw	r30, r8
    6748:	61 93       	st	Z+, r22
    674a:	71 93       	st	Z+, r23
    674c:	81 93       	st	Z+, r24
    674e:	91 93       	st	Z+, r25
    6750:	4f 01       	movw	r8, r30
			froebNormSquared+=powf(brightMatSubset[e][s],2);
    6752:	9b 01       	movw	r18, r22
    6754:	ac 01       	movw	r20, r24
    6756:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    675a:	9b 01       	movw	r18, r22
    675c:	ac 01       	movw	r20, r24
    675e:	cf 51       	subi	r28, 0x1F	; 31
    6760:	df 4f       	sbci	r29, 0xFF	; 255
    6762:	68 81       	ld	r22, Y
    6764:	79 81       	ldd	r23, Y+1	; 0x01
    6766:	8a 81       	ldd	r24, Y+2	; 0x02
    6768:	9b 81       	ldd	r25, Y+3	; 0x03
    676a:	c1 5e       	subi	r28, 0xE1	; 225
    676c:	d0 40       	sbci	r29, 0x00	; 0
    676e:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    6772:	cf 51       	subi	r28, 0x1F	; 31
    6774:	df 4f       	sbci	r29, 0xFF	; 255
    6776:	68 83       	st	Y, r22
    6778:	79 83       	std	Y+1, r23	; 0x01
    677a:	8a 83       	std	Y+2, r24	; 0x02
    677c:	9b 83       	std	Y+3, r25	; 0x03
    677e:	c1 5e       	subi	r28, 0xE1	; 225
    6780:	d0 40       	sbci	r29, 0x00	; 0
    6782:	0f 5f       	subi	r16, 0xFF	; 255
    6784:	1f 4f       	sbci	r17, 0xFF	; 255
	
	float rangeMatSubset[3][3];
	float brightMatSubset[3][3];
	float froebNormSquared=0;
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
    6786:	02 15       	cp	r16, r2
    6788:	13 05       	cpc	r17, r3
    678a:	09 f0       	breq	.+2      	; 0x678e <range_estimate+0x7d8>
    678c:	b3 cf       	rjmp	.-154    	; 0x66f4 <range_estimate+0x73e>
    678e:	ff ef       	ldi	r31, 0xFF	; 255
    6790:	ef 1a       	sub	r14, r31
    6792:	ff 0a       	sbc	r15, r31
    6794:	2c e0       	ldi	r18, 0x0C	; 12
    6796:	a2 0e       	add	r10, r18
    6798:	b1 1c       	adc	r11, r1
	}
	
	float rangeMatSubset[3][3];
	float brightMatSubset[3][3];
	float froebNormSquared=0;
	for(uint8_t e = 0; e < 3; e++){
    679a:	34 e2       	ldi	r19, 0x24	; 36
    679c:	a3 16       	cp	r10, r19
    679e:	b1 04       	cpc	r11, r1
    67a0:	31 f1       	breq	.+76     	; 0x67ee <range_estimate+0x838>
		for(uint8_t s = 0; s < 3; s++){
			uint8_t otherE = ((maxE+(e+5))%6);
    67a2:	c7 01       	movw	r24, r14
    67a4:	b6 01       	movw	r22, r12
    67a6:	0e 94 20 50 	call	0xa040	; 0xa040 <__divmodhi4>
			uint8_t otherS = ((maxS+(s+5))%6);
			rangeMatSubset[e][s] = range_matrix[otherE][otherS];
    67aa:	99 27       	eor	r25, r25
    67ac:	cb 51       	subi	r28, 0x1B	; 27
    67ae:	df 4f       	sbci	r29, 0xFF	; 255
    67b0:	08 81       	ld	r16, Y
    67b2:	19 81       	ldd	r17, Y+1	; 0x01
    67b4:	c5 5e       	subi	r28, 0xE5	; 229
    67b6:	d0 40       	sbci	r29, 0x00	; 0
    67b8:	0f 2e       	mov	r0, r31
    67ba:	f1 e9       	ldi	r31, 0x91	; 145
    67bc:	6f 2e       	mov	r6, r31
    67be:	71 2c       	mov	r7, r1
    67c0:	f0 2d       	mov	r31, r0
    67c2:	6c 0e       	add	r6, r28
    67c4:	7d 1e       	adc	r7, r29
    67c6:	6a 0c       	add	r6, r10
    67c8:	7b 1c       	adc	r7, r11
    67ca:	0f 2e       	mov	r0, r31
    67cc:	f5 eb       	ldi	r31, 0xB5	; 181
    67ce:	8f 2e       	mov	r8, r31
    67d0:	91 2c       	mov	r9, r1
    67d2:	f0 2d       	mov	r31, r0
    67d4:	8c 0e       	add	r8, r28
    67d6:	9d 1e       	adc	r9, r29
    67d8:	8a 0c       	add	r8, r10
    67da:	9b 1c       	adc	r9, r11
    67dc:	2c 01       	movw	r4, r24
    67de:	44 0c       	add	r4, r4
    67e0:	55 1c       	adc	r5, r5
    67e2:	84 0d       	add	r24, r4
    67e4:	95 1d       	adc	r25, r5
    67e6:	2c 01       	movw	r4, r24
    67e8:	44 0c       	add	r4, r4
    67ea:	55 1c       	adc	r5, r5
    67ec:	83 cf       	rjmp	.-250    	; 0x66f4 <range_estimate+0x73e>
			brightMatSubset[e][s] = (float)brightMeas[otherE][otherS];
			froebNormSquared+=powf(brightMatSubset[e][s],2);
		}
	}
	float froebNorm = sqrtf(froebNormSquared);
    67ee:	cf 51       	subi	r28, 0x1F	; 31
    67f0:	df 4f       	sbci	r29, 0xFF	; 255
    67f2:	68 81       	ld	r22, Y
    67f4:	79 81       	ldd	r23, Y+1	; 0x01
    67f6:	8a 81       	ldd	r24, Y+2	; 0x02
    67f8:	9b 81       	ldd	r25, Y+3	; 0x03
    67fa:	c1 5e       	subi	r28, 0xE1	; 225
    67fc:	d0 40       	sbci	r29, 0x00	; 0
    67fe:	0e 94 4b 4b 	call	0x9696	; 0x9696 <sqrt>
    6802:	cb 51       	subi	r28, 0x1B	; 27
    6804:	df 4f       	sbci	r29, 0xFF	; 255
    6806:	68 83       	st	Y, r22
    6808:	79 83       	std	Y+1, r23	; 0x01
    680a:	8a 83       	std	Y+2, r24	; 0x02
    680c:	9b 83       	std	Y+3, r25	; 0x03
    680e:	c5 5e       	subi	r28, 0xE5	; 229
    6810:	d0 40       	sbci	r29, 0x00	; 0
    6812:	1e 01       	movw	r2, r28
    6814:	81 e9       	ldi	r24, 0x91	; 145
    6816:	28 0e       	add	r2, r24
    6818:	31 1c       	adc	r3, r1
    681a:	5e 01       	movw	r10, r28
    681c:	95 eb       	ldi	r25, 0xB5	; 181
    681e:	a9 0e       	add	r10, r25
    6820:	b1 1c       	adc	r11, r1
    6822:	81 01       	movw	r16, r2
    6824:	0c 5d       	subi	r16, 0xDC	; 220
    6826:	1f 4f       	sbci	r17, 0xFF	; 255
	float range = 0;
    6828:	cf 51       	subi	r28, 0x1F	; 31
    682a:	df 4f       	sbci	r29, 0xFF	; 255
    682c:	18 82       	st	Y, r1
    682e:	19 82       	std	Y+1, r1	; 0x01
    6830:	1a 82       	std	Y+2, r1	; 0x02
    6832:	1b 82       	std	Y+3, r1	; 0x03
    6834:	c1 5e       	subi	r28, 0xE1	; 225
    6836:	d0 40       	sbci	r29, 0x00	; 0
    6838:	25 01       	movw	r4, r10
    683a:	58 01       	movw	r10, r16
    683c:	40 c0       	rjmp	.+128    	; 0x68be <range_estimate+0x908>
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
			range+= rangeMatSubset[e][s]*powf(brightMatSubset[e][s]/froebNorm,2);
    683e:	f8 01       	movw	r30, r16
    6840:	c1 90       	ld	r12, Z+
    6842:	d1 90       	ld	r13, Z+
    6844:	e1 90       	ld	r14, Z+
    6846:	f1 90       	ld	r15, Z+
    6848:	8f 01       	movw	r16, r30
    684a:	f3 01       	movw	r30, r6
    684c:	61 91       	ld	r22, Z+
    684e:	71 91       	ld	r23, Z+
    6850:	81 91       	ld	r24, Z+
    6852:	91 91       	ld	r25, Z+
    6854:	3f 01       	movw	r6, r30
    6856:	cb 51       	subi	r28, 0x1B	; 27
    6858:	df 4f       	sbci	r29, 0xFF	; 255
    685a:	28 81       	ld	r18, Y
    685c:	39 81       	ldd	r19, Y+1	; 0x01
    685e:	4a 81       	ldd	r20, Y+2	; 0x02
    6860:	5b 81       	ldd	r21, Y+3	; 0x03
    6862:	c5 5e       	subi	r28, 0xE5	; 229
    6864:	d0 40       	sbci	r29, 0x00	; 0
    6866:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    686a:	9b 01       	movw	r18, r22
    686c:	ac 01       	movw	r20, r24
    686e:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6872:	9b 01       	movw	r18, r22
    6874:	ac 01       	movw	r20, r24
    6876:	c7 01       	movw	r24, r14
    6878:	b6 01       	movw	r22, r12
    687a:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    687e:	9b 01       	movw	r18, r22
    6880:	ac 01       	movw	r20, r24
    6882:	cf 51       	subi	r28, 0x1F	; 31
    6884:	df 4f       	sbci	r29, 0xFF	; 255
    6886:	68 81       	ld	r22, Y
    6888:	79 81       	ldd	r23, Y+1	; 0x01
    688a:	8a 81       	ldd	r24, Y+2	; 0x02
    688c:	9b 81       	ldd	r25, Y+3	; 0x03
    688e:	c1 5e       	subi	r28, 0xE1	; 225
    6890:	d0 40       	sbci	r29, 0x00	; 0
    6892:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    6896:	cf 51       	subi	r28, 0x1F	; 31
    6898:	df 4f       	sbci	r29, 0xFF	; 255
    689a:	68 83       	st	Y, r22
    689c:	79 83       	std	Y+1, r23	; 0x01
    689e:	8a 83       	std	Y+2, r24	; 0x02
    68a0:	9b 83       	std	Y+3, r25	; 0x03
    68a2:	c1 5e       	subi	r28, 0xE1	; 225
    68a4:	d0 40       	sbci	r29, 0x00	; 0
    68a6:	9a 94       	dec	r9
		}
	}
	float froebNorm = sqrtf(froebNormSquared);
	float range = 0;
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
    68a8:	91 10       	cpse	r9, r1
    68aa:	c9 cf       	rjmp	.-110    	; 0x683e <range_estimate+0x888>
    68ac:	fc e0       	ldi	r31, 0x0C	; 12
    68ae:	2f 0e       	add	r2, r31
    68b0:	31 1c       	adc	r3, r1
    68b2:	2c e0       	ldi	r18, 0x0C	; 12
    68b4:	42 0e       	add	r4, r18
    68b6:	51 1c       	adc	r5, r1
			froebNormSquared+=powf(brightMatSubset[e][s],2);
		}
	}
	float froebNorm = sqrtf(froebNormSquared);
	float range = 0;
	for(uint8_t e = 0; e < 3; e++){
    68b8:	2a 14       	cp	r2, r10
    68ba:	3b 04       	cpc	r3, r11
    68bc:	39 f0       	breq	.+14     	; 0x68cc <range_estimate+0x916>
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    68be:	32 01       	movw	r6, r4
    68c0:	81 01       	movw	r16, r2
    68c2:	0f 2e       	mov	r0, r31
    68c4:	f3 e0       	ldi	r31, 0x03	; 3
    68c6:	9f 2e       	mov	r9, r31
    68c8:	f0 2d       	mov	r31, r0
    68ca:	b9 cf       	rjmp	.-142    	; 0x683e <range_estimate+0x888>
	}
	//printf("R: %f\r\n", range);	
	//print_range_matrix(range_matrix);
	//printf("\n");
	return range;
}
    68cc:	cf 51       	subi	r28, 0x1F	; 31
    68ce:	df 4f       	sbci	r29, 0xFF	; 255
    68d0:	68 81       	ld	r22, Y
    68d2:	79 81       	ldd	r23, Y+1	; 0x01
    68d4:	8a 81       	ldd	r24, Y+2	; 0x02
    68d6:	9b 81       	ldd	r25, Y+3	; 0x03
    68d8:	c1 5e       	subi	r28, 0xE1	; 225
    68da:	d0 40       	sbci	r29, 0x00	; 0
    68dc:	c3 5f       	subi	r28, 0xF3	; 243
    68de:	de 4f       	sbci	r29, 0xFE	; 254
    68e0:	cd bf       	out	0x3d, r28	; 61
    68e2:	de bf       	out	0x3e, r29	; 62
    68e4:	df 91       	pop	r29
    68e6:	cf 91       	pop	r28
    68e8:	1f 91       	pop	r17
    68ea:	0f 91       	pop	r16
    68ec:	ff 90       	pop	r15
    68ee:	ef 90       	pop	r14
    68f0:	df 90       	pop	r13
    68f2:	cf 90       	pop	r12
    68f4:	bf 90       	pop	r11
    68f6:	af 90       	pop	r10
    68f8:	9f 90       	pop	r9
    68fa:	8f 90       	pop	r8
    68fc:	7f 90       	pop	r7
    68fe:	6f 90       	pop	r6
    6900:	5f 90       	pop	r5
    6902:	4f 90       	pop	r4
    6904:	3f 90       	pop	r3
    6906:	2f 90       	pop	r2
    6908:	08 95       	ret

0000690a <use_rnb_data>:
		////uint8_t power = 25; //TODO: get this from the message.
		//schedule_task(5, use_rnb_data, NULL);
	//}
//}

void use_rnb_data(){
    690a:	4f 92       	push	r4
    690c:	5f 92       	push	r5
    690e:	6f 92       	push	r6
    6910:	7f 92       	push	r7
    6912:	8f 92       	push	r8
    6914:	9f 92       	push	r9
    6916:	af 92       	push	r10
    6918:	bf 92       	push	r11
    691a:	cf 92       	push	r12
    691c:	df 92       	push	r13
    691e:	ef 92       	push	r14
    6920:	ff 92       	push	r15
    6922:	0f 93       	push	r16
    6924:	1f 93       	push	r17
    6926:	cf 93       	push	r28
    6928:	df 93       	push	r29
    692a:	cd b7       	in	r28, 0x3d	; 61
    692c:	de b7       	in	r29, 0x3e	; 62
    692e:	64 97       	sbiw	r28, 0x14	; 20
    6930:	cd bf       	out	0x3d, r28	; 61
    6932:	de bf       	out	0x3e, r29	; 62
	//uint32_t start = get_time();
	uint8_t power = 255;
	int16_t matrixSum = processBrightMeas();
    6934:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <processBrightMeas>
    6938:	3c 01       	movw	r6, r24
	float bearing, heading;
	float error;
	
	calculate_bearing_and_heading(&bearing, &heading);
    693a:	be 01       	movw	r22, r28
    693c:	6b 5f       	subi	r22, 0xFB	; 251
    693e:	7f 4f       	sbci	r23, 0xFF	; 255
    6940:	ce 01       	movw	r24, r28
    6942:	01 96       	adiw	r24, 0x01	; 1
    6944:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <calculate_bearing_and_heading>
	float initial_range = get_initial_range_guess(bearing, heading, power);
    6948:	2d 81       	ldd	r18, Y+5	; 0x05
    694a:	3e 81       	ldd	r19, Y+6	; 0x06
    694c:	4f 81       	ldd	r20, Y+7	; 0x07
    694e:	58 85       	ldd	r21, Y+8	; 0x08
    6950:	69 81       	ldd	r22, Y+1	; 0x01
    6952:	7a 81       	ldd	r23, Y+2	; 0x02
    6954:	8b 81       	ldd	r24, Y+3	; 0x03
    6956:	9c 81       	ldd	r25, Y+4	; 0x04
    6958:	0f ef       	ldi	r16, 0xFF	; 255
    695a:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <get_initial_range_guess>
    695e:	4b 01       	movw	r8, r22
    6960:	5c 01       	movw	r10, r24
	if(initial_range!=0&&!isnanf(initial_range)){	
    6962:	20 e0       	ldi	r18, 0x00	; 0
    6964:	30 e0       	ldi	r19, 0x00	; 0
    6966:	a9 01       	movw	r20, r18
    6968:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    696c:	88 23       	and	r24, r24
    696e:	09 f4       	brne	.+2      	; 0x6972 <use_rnb_data+0x68>
    6970:	e5 c0       	rjmp	.+458    	; 0x6b3c <use_rnb_data+0x232>
    6972:	a5 01       	movw	r20, r10
    6974:	94 01       	movw	r18, r8
    6976:	c5 01       	movw	r24, r10
    6978:	b4 01       	movw	r22, r8
    697a:	0e 94 8f 4b 	call	0x971e	; 0x971e <__unordsf2>
    697e:	81 11       	cpse	r24, r1
    6980:	dd c0       	rjmp	.+442    	; 0x6b3c <use_rnb_data+0x232>
		float range = range_estimate(initial_range, bearing, heading, power);
    6982:	ed 80       	ldd	r14, Y+5	; 0x05
    6984:	fe 80       	ldd	r15, Y+6	; 0x06
    6986:	0f 81       	ldd	r16, Y+7	; 0x07
    6988:	18 85       	ldd	r17, Y+8	; 0x08
    698a:	29 81       	ldd	r18, Y+1	; 0x01
    698c:	3a 81       	ldd	r19, Y+2	; 0x02
    698e:	4b 81       	ldd	r20, Y+3	; 0x03
    6990:	5c 81       	ldd	r21, Y+4	; 0x04
    6992:	cc 24       	eor	r12, r12
    6994:	ca 94       	dec	r12
    6996:	c5 01       	movw	r24, r10
    6998:	b4 01       	movw	r22, r8
    699a:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <range_estimate>
    699e:	69 87       	std	Y+9, r22	; 0x09
    69a0:	7a 87       	std	Y+10, r23	; 0x0a
    69a2:	8b 87       	std	Y+11, r24	; 0x0b
    69a4:	9c 87       	std	Y+12, r25	; 0x0c
		if(!isnanf(range)){
    69a6:	9b 01       	movw	r18, r22
    69a8:	ac 01       	movw	r20, r24
    69aa:	0e 94 8f 4b 	call	0x971e	; 0x971e <__unordsf2>
    69ae:	81 11       	cpse	r24, r1
    69b0:	c5 c0       	rjmp	.+394    	; 0x6b3c <use_rnb_data+0x232>
			if(range<2*DROPLET_RADIUS) range=5.0;
    69b2:	28 e9       	ldi	r18, 0x98	; 152
    69b4:	3c e4       	ldi	r19, 0x4C	; 76
    69b6:	45 e8       	ldi	r20, 0x85	; 133
    69b8:	50 e4       	ldi	r21, 0x40	; 64
    69ba:	69 85       	ldd	r22, Y+9	; 0x09
    69bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    69be:	8b 85       	ldd	r24, Y+11	; 0x0b
    69c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    69c2:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    69c6:	88 23       	and	r24, r24
    69c8:	44 f4       	brge	.+16     	; 0x69da <use_rnb_data+0xd0>
    69ca:	80 e0       	ldi	r24, 0x00	; 0
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	a0 ea       	ldi	r26, 0xA0	; 160
    69d0:	b0 e4       	ldi	r27, 0x40	; 64
    69d2:	89 87       	std	Y+9, r24	; 0x09
    69d4:	9a 87       	std	Y+10, r25	; 0x0a
    69d6:	ab 87       	std	Y+11, r26	; 0x0b
    69d8:	bc 87       	std	Y+12, r27	; 0x0c
			float fdR, fdB, fdH;
			float conf = sqrtf(matrixSum);
    69da:	63 01       	movw	r12, r6
    69dc:	77 0c       	add	r7, r7
    69de:	ee 08       	sbc	r14, r14
    69e0:	ff 08       	sbc	r15, r15
    69e2:	c7 01       	movw	r24, r14
    69e4:	b6 01       	movw	r22, r12
    69e6:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    69ea:	0e 94 4b 4b 	call	0x9696	; 0x9696 <sqrt>
    69ee:	69 8b       	std	Y+17, r22	; 0x11
    69f0:	7a 8b       	std	Y+18, r23	; 0x12
    69f2:	8b 8b       	std	Y+19, r24	; 0x13
    69f4:	9c 8b       	std	Y+20, r25	; 0x14
			
			fdB = bearing;
    69f6:	89 80       	ldd	r8, Y+1	; 0x01
    69f8:	9a 80       	ldd	r9, Y+2	; 0x02
    69fa:	ab 80       	ldd	r10, Y+3	; 0x03
    69fc:	bc 80       	ldd	r11, Y+4	; 0x04
			fdH = heading;
    69fe:	4d 80       	ldd	r4, Y+5	; 0x05
    6a00:	5e 80       	ldd	r5, Y+6	; 0x06
    6a02:	6f 80       	ldd	r6, Y+7	; 0x07
    6a04:	78 84       	ldd	r7, Y+8	; 0x08
			fdR = range;

			rStep.f = 10*FD_INIT_STEP;
    6a06:	80 e0       	ldi	r24, 0x00	; 0
    6a08:	90 e0       	ldi	r25, 0x00	; 0
    6a0a:	a0 e0       	ldi	r26, 0x00	; 0
    6a0c:	bf e3       	ldi	r27, 0x3F	; 63
    6a0e:	80 93 4b 24 	sts	0x244B, r24
    6a12:	90 93 4c 24 	sts	0x244C, r25
    6a16:	a0 93 4d 24 	sts	0x244D, r26
    6a1a:	b0 93 4e 24 	sts	0x244E, r27
			bStep.f = FD_INIT_STEP;
    6a1e:	8d ec       	ldi	r24, 0xCD	; 205
    6a20:	9c ec       	ldi	r25, 0xCC	; 204
    6a22:	ac e4       	ldi	r26, 0x4C	; 76
    6a24:	bd e3       	ldi	r27, 0x3D	; 61
    6a26:	80 93 1e 26 	sts	0x261E, r24
    6a2a:	90 93 1f 26 	sts	0x261F, r25
    6a2e:	a0 93 20 26 	sts	0x2620, r26
    6a32:	b0 93 21 26 	sts	0x2621, r27
			hStep.f = FD_INIT_STEP;
    6a36:	80 93 1a 27 	sts	0x271A, r24
    6a3a:	90 93 1b 27 	sts	0x271B, r25
    6a3e:	a0 93 1c 27 	sts	0x271C, r26
    6a42:	b0 93 1d 27 	sts	0x271D, r27
			prevSgnEdR=0;
    6a46:	10 92 15 26 	sts	0x2615, r1
    6a4a:	10 92 16 26 	sts	0x2616, r1
    6a4e:	10 92 17 26 	sts	0x2617, r1
    6a52:	10 92 18 26 	sts	0x2618, r1
			prevSgnEdB=0;
    6a56:	10 92 92 24 	sts	0x2492, r1
    6a5a:	10 92 93 24 	sts	0x2493, r1
    6a5e:	10 92 94 24 	sts	0x2494, r1
    6a62:	10 92 95 24 	sts	0x2495, r1
			prevSgnEdH=0;
    6a66:	10 92 96 24 	sts	0x2496, r1
    6a6a:	10 92 97 24 	sts	0x2497, r1
    6a6e:	10 92 98 24 	sts	0x2498, r1
    6a72:	10 92 99 24 	sts	0x2499, r1
				//if(earlyAbort) break;
			//}
			range = fdR;
			bearing = fdB;
			heading = fdH;
			error = calculate_innovation(range, bearing, heading);
    6a76:	83 01       	movw	r16, r6
    6a78:	72 01       	movw	r14, r4
    6a7a:	a5 01       	movw	r20, r10
    6a7c:	94 01       	movw	r18, r8
    6a7e:	69 85       	ldd	r22, Y+9	; 0x09
    6a80:	7a 85       	ldd	r23, Y+10	; 0x0a
    6a82:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a84:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a86:	0e 94 32 28 	call	0x5064	; 0x5064 <calculate_innovation>
    6a8a:	6d 87       	std	Y+13, r22	; 0x0d
    6a8c:	7e 87       	std	Y+14, r23	; 0x0e
    6a8e:	8f 87       	std	Y+15, r24	; 0x0f
    6a90:	98 8b       	std	Y+16, r25	; 0x10
			//printf("\t After: % 5.1f, % 6.1f, % 6.1f, %6.2f [%hu]\r\n", fdR, rad_to_deg(fdB), rad_to_deg(fdH), error>3.0 ? (conf/(10.0*error*error)) : (conf/(error*error)), i);			
			//printf("\tTook %lu ms.\r\n", get_time()-start);
			conf = conf/(error*error);
    6a92:	9b 01       	movw	r18, r22
    6a94:	ac 01       	movw	r20, r24
    6a96:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6a9a:	9b 01       	movw	r18, r22
    6a9c:	ac 01       	movw	r20, r24
    6a9e:	69 89       	ldd	r22, Y+17	; 0x11
    6aa0:	7a 89       	ldd	r23, Y+18	; 0x12
    6aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    6aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    6aa6:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    6aaa:	6b 01       	movw	r12, r22
    6aac:	7c 01       	movw	r14, r24
			if(error>3.0){
    6aae:	20 e0       	ldi	r18, 0x00	; 0
    6ab0:	30 e0       	ldi	r19, 0x00	; 0
    6ab2:	40 e4       	ldi	r20, 0x40	; 64
    6ab4:	50 e4       	ldi	r21, 0x40	; 64
    6ab6:	6d 85       	ldd	r22, Y+13	; 0x0d
    6ab8:	7e 85       	ldd	r23, Y+14	; 0x0e
    6aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    6abc:	98 89       	ldd	r25, Y+16	; 0x10
    6abe:	0e 94 cc 49 	call	0x9398	; 0x9398 <__gesf2>
    6ac2:	18 16       	cp	r1, r24
    6ac4:	54 f4       	brge	.+20     	; 0x6ada <use_rnb_data+0x1d0>
				conf = conf/10.0; //Nerf the confidence hard if the calculated error was too high.
    6ac6:	20 e0       	ldi	r18, 0x00	; 0
    6ac8:	30 e0       	ldi	r19, 0x00	; 0
    6aca:	40 e2       	ldi	r20, 0x20	; 32
    6acc:	51 e4       	ldi	r21, 0x41	; 65
    6ace:	c7 01       	movw	r24, r14
    6ad0:	b6 01       	movw	r22, r12
    6ad2:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    6ad6:	6b 01       	movw	r12, r22
    6ad8:	7c 01       	movw	r14, r24
			}
			if(isnan(conf)){
    6ada:	a7 01       	movw	r20, r14
    6adc:	96 01       	movw	r18, r12
    6ade:	c7 01       	movw	r24, r14
    6ae0:	b6 01       	movw	r22, r12
    6ae2:	0e 94 8f 4b 	call	0x971e	; 0x971e <__unordsf2>
    6ae6:	88 23       	and	r24, r24
    6ae8:	51 f0       	breq	.+20     	; 0x6afe <use_rnb_data+0x1f4>
				conf = 0.01;
    6aea:	0f 2e       	mov	r0, r31
    6aec:	fa e0       	ldi	r31, 0x0A	; 10
    6aee:	cf 2e       	mov	r12, r31
    6af0:	f7 ed       	ldi	r31, 0xD7	; 215
    6af2:	df 2e       	mov	r13, r31
    6af4:	f3 e2       	ldi	r31, 0x23	; 35
    6af6:	ef 2e       	mov	r14, r31
    6af8:	fc e3       	ldi	r31, 0x3C	; 60
    6afa:	ff 2e       	mov	r15, r31
    6afc:	f0 2d       	mov	r31, r0
			}
	
			last_good_rnb.id_number = rnbCmdID;
    6afe:	80 91 cc 28 	lds	r24, 0x28CC
    6b02:	90 91 cd 28 	lds	r25, 0x28CD
    6b06:	e3 e4       	ldi	r30, 0x43	; 67
    6b08:	f6 e2       	ldi	r31, 0x26	; 38
    6b0a:	80 8b       	std	Z+16, r24	; 0x10
    6b0c:	91 8b       	std	Z+17, r25	; 0x11
			last_good_rnb.range		= range;
    6b0e:	89 85       	ldd	r24, Y+9	; 0x09
    6b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b12:	ab 85       	ldd	r26, Y+11	; 0x0b
    6b14:	bc 85       	ldd	r27, Y+12	; 0x0c
    6b16:	80 83       	st	Z, r24
    6b18:	91 83       	std	Z+1, r25	; 0x01
    6b1a:	a2 83       	std	Z+2, r26	; 0x02
    6b1c:	b3 83       	std	Z+3, r27	; 0x03
			last_good_rnb.bearing	= bearing;
    6b1e:	84 82       	std	Z+4, r8	; 0x04
    6b20:	95 82       	std	Z+5, r9	; 0x05
    6b22:	a6 82       	std	Z+6, r10	; 0x06
    6b24:	b7 82       	std	Z+7, r11	; 0x07
			last_good_rnb.heading	 = heading;
    6b26:	40 86       	std	Z+8, r4	; 0x08
    6b28:	51 86       	std	Z+9, r5	; 0x09
    6b2a:	62 86       	std	Z+10, r6	; 0x0a
    6b2c:	73 86       	std	Z+11, r7	; 0x0b
			last_good_rnb.conf		 = conf;
    6b2e:	c4 86       	std	Z+12, r12	; 0x0c
    6b30:	d5 86       	std	Z+13, r13	; 0x0d
    6b32:	e6 86       	std	Z+14, r14	; 0x0e
    6b34:	f7 86       	std	Z+15, r15	; 0x0f
			rnb_updated=1;
    6b36:	81 e0       	ldi	r24, 0x01	; 1
    6b38:	80 93 aa 26 	sts	0x26AA, r24
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6b3c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6b3e:	f8 94       	cli
		rnbProcessingFlag=0;
    6b40:	10 92 a9 26 	sts	0x26A9, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6b44:	8f bf       	out	0x3f, r24	; 63
	}
}
    6b46:	64 96       	adiw	r28, 0x14	; 20
    6b48:	cd bf       	out	0x3d, r28	; 61
    6b4a:	de bf       	out	0x3e, r29	; 62
    6b4c:	df 91       	pop	r29
    6b4e:	cf 91       	pop	r28
    6b50:	1f 91       	pop	r17
    6b52:	0f 91       	pop	r16
    6b54:	ff 90       	pop	r15
    6b56:	ef 90       	pop	r14
    6b58:	df 90       	pop	r13
    6b5a:	cf 90       	pop	r12
    6b5c:	bf 90       	pop	r11
    6b5e:	af 90       	pop	r10
    6b60:	9f 90       	pop	r9
    6b62:	8f 90       	pop	r8
    6b64:	7f 90       	pop	r7
    6b66:	6f 90       	pop	r6
    6b68:	5f 90       	pop	r5
    6b6a:	4f 90       	pop	r4
    6b6c:	08 95       	ret

00006b6e <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    6b6e:	80 e3       	ldi	r24, 0x30	; 48
    6b70:	80 93 81 06 	sts	0x0681, r24
	PORTD.DIRSET = LED_B_PIN_bm;
    6b74:	80 e1       	ldi	r24, 0x10	; 16
    6b76:	80 93 61 06 	sts	0x0661, r24
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    6b7a:	e0 e4       	ldi	r30, 0x40	; 64
    6b7c:	fa e0       	ldi	r31, 0x0A	; 10
    6b7e:	2f ef       	ldi	r18, 0xFF	; 255
    6b80:	30 e0       	ldi	r19, 0x00	; 0
    6b82:	26 a3       	std	Z+38, r18	; 0x26
    6b84:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    6b86:	10 a6       	std	Z+40, r1	; 0x28
    6b88:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    6b8a:	12 a6       	std	Z+42, r1	; 0x2a
    6b8c:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    6b8e:	85 e0       	ldi	r24, 0x05	; 5
    6b90:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    6b92:	93 e3       	ldi	r25, 0x33	; 51
    6b94:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    6b96:	e0 e4       	ldi	r30, 0x40	; 64
    6b98:	f9 e0       	ldi	r31, 0x09	; 9
    6b9a:	26 a3       	std	Z+38, r18	; 0x26
    6b9c:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    6b9e:	10 a6       	std	Z+40, r1	; 0x28
    6ba0:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    6ba2:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    6ba4:	83 e1       	ldi	r24, 0x13	; 19
    6ba6:	81 83       	std	Z+1, r24	; 0x01
    6ba8:	08 95       	ret

00006baa <led_off>:
}

void led_off()
{ 
	TCE1.CCABUF = 0;
    6baa:	e0 e4       	ldi	r30, 0x40	; 64
    6bac:	fa e0       	ldi	r31, 0x0A	; 10
    6bae:	10 ae       	std	Z+56, r1	; 0x38
    6bb0:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    6bb2:	12 ae       	std	Z+58, r1	; 0x3a
    6bb4:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    6bb6:	10 92 78 09 	sts	0x0978, r1
    6bba:	10 92 79 09 	sts	0x0979, r1
    6bbe:	08 95       	ret

00006bc0 <set_rgb>:

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    6bc0:	90 e0       	ldi	r25, 0x00	; 0
    6bc2:	e0 e4       	ldi	r30, 0x40	; 64
    6bc4:	fa e0       	ldi	r31, 0x0A	; 10
    6bc6:	82 af       	std	Z+58, r24	; 0x3a
    6bc8:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    6bca:	70 e0       	ldi	r23, 0x00	; 0
    6bcc:	60 af       	std	Z+56, r22	; 0x38
    6bce:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    6bd0:	50 e0       	ldi	r21, 0x00	; 0
    6bd2:	40 93 78 09 	sts	0x0978, r20
    6bd6:	50 93 79 09 	sts	0x0979, r21
    6bda:	08 95       	ret

00006bdc <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    6bdc:	2f 92       	push	r2
    6bde:	3f 92       	push	r3
    6be0:	4f 92       	push	r4
    6be2:	5f 92       	push	r5
    6be4:	6f 92       	push	r6
    6be6:	7f 92       	push	r7
    6be8:	8f 92       	push	r8
    6bea:	9f 92       	push	r9
    6bec:	af 92       	push	r10
    6bee:	bf 92       	push	r11
    6bf0:	cf 92       	push	r12
    6bf2:	df 92       	push	r13
    6bf4:	ef 92       	push	r14
    6bf6:	ff 92       	push	r15
    6bf8:	0f 93       	push	r16
    6bfa:	1f 93       	push	r17
    6bfc:	cf 93       	push	r28
    6bfe:	df 93       	push	r29
    6c00:	cd b7       	in	r28, 0x3d	; 61
    6c02:	de b7       	in	r29, 0x3e	; 62
    6c04:	2b 97       	sbiw	r28, 0x0b	; 11
    6c06:	cd bf       	out	0x3d, r28	; 61
    6c08:	de bf       	out	0x3e, r29	; 62
    6c0a:	6c 01       	movw	r12, r24
    6c0c:	b4 2e       	mov	r11, r20
    6c0e:	2d 83       	std	Y+5, r18	; 0x05
    6c10:	3e 83       	std	Y+6, r19	; 0x06
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
    6c12:	70 e0       	ldi	r23, 0x00	; 0
    6c14:	80 e0       	ldi	r24, 0x00	; 0
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    6c1c:	20 e0       	ldi	r18, 0x00	; 0
    6c1e:	30 e0       	ldi	r19, 0x00	; 0
    6c20:	4f e7       	ldi	r20, 0x7F	; 127
    6c22:	53 e4       	ldi	r21, 0x43	; 67
    6c24:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    6c28:	69 83       	std	Y+1, r22	; 0x01
    6c2a:	7a 83       	std	Y+2, r23	; 0x02
    6c2c:	8b 83       	std	Y+3, r24	; 0x03
    6c2e:	9c 83       	std	Y+4, r25	; 0x04
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (abs(s)<0.00001){
    6c30:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__fixsfsi>
    6c34:	9b 01       	movw	r18, r22
    6c36:	77 23       	and	r23, r23
    6c38:	24 f4       	brge	.+8      	; 0x6c42 <hsv_to_rgb+0x66>
    6c3a:	22 27       	eor	r18, r18
    6c3c:	33 27       	eor	r19, r19
    6c3e:	26 1b       	sub	r18, r22
    6c40:	37 0b       	sbc	r19, r23
    6c42:	b9 01       	movw	r22, r18
    6c44:	33 0f       	add	r19, r19
    6c46:	88 0b       	sbc	r24, r24
    6c48:	99 0b       	sbc	r25, r25
    6c4a:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    6c4e:	2c ea       	ldi	r18, 0xAC	; 172
    6c50:	35 ec       	ldi	r19, 0xC5	; 197
    6c52:	47 e2       	ldi	r20, 0x27	; 39
    6c54:	57 e3       	ldi	r21, 0x37	; 55
    6c56:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__cmpsf2>
    6c5a:	88 23       	and	r24, r24
    6c5c:	44 f4       	brge	.+16     	; 0x6c6e <hsv_to_rgb+0x92>
		*red = *green = *blue = val;
    6c5e:	f7 01       	movw	r30, r14
    6c60:	b0 82       	st	Z, r11
    6c62:	f8 01       	movw	r30, r16
    6c64:	b0 82       	st	Z, r11
    6c66:	ed 81       	ldd	r30, Y+5	; 0x05
    6c68:	fe 81       	ldd	r31, Y+6	; 0x06
    6c6a:	b0 82       	st	Z, r11
		return;
    6c6c:	28 c1       	rjmp	.+592    	; 0x6ebe <hsv_to_rgb+0x2e2>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
    6c6e:	6b 2d       	mov	r22, r11
    6c70:	70 e0       	ldi	r23, 0x00	; 0
    6c72:	80 e0       	ldi	r24, 0x00	; 0
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    6c7a:	20 e0       	ldi	r18, 0x00	; 0
    6c7c:	30 e0       	ldi	r19, 0x00	; 0
    6c7e:	4f e7       	ldi	r20, 0x7F	; 127
    6c80:	53 e4       	ldi	r21, 0x43	; 67
    6c82:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    6c86:	66 2e       	mov	r6, r22
    6c88:	57 2e       	mov	r5, r23
    6c8a:	48 2e       	mov	r4, r24
    6c8c:	39 2e       	mov	r3, r25
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    6c8e:	96 01       	movw	r18, r12
    6c90:	a3 e8       	ldi	r26, 0x83	; 131
    6c92:	bd e2       	ldi	r27, 0x2D	; 45
    6c94:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <__umulhisi3>
    6c98:	00 24       	eor	r0, r0
    6c9a:	88 0f       	add	r24, r24
    6c9c:	99 1f       	adc	r25, r25
    6c9e:	00 1c       	adc	r0, r0
    6ca0:	88 0f       	add	r24, r24
    6ca2:	99 1f       	adc	r25, r25
    6ca4:	00 1c       	adc	r0, r0
    6ca6:	89 2f       	mov	r24, r25
    6ca8:	90 2d       	mov	r25, r0
    6caa:	48 e6       	ldi	r20, 0x68	; 104
    6cac:	51 e0       	ldi	r21, 0x01	; 1
    6cae:	84 9f       	mul	r24, r20
    6cb0:	90 01       	movw	r18, r0
    6cb2:	85 9f       	mul	r24, r21
    6cb4:	30 0d       	add	r19, r0
    6cb6:	94 9f       	mul	r25, r20
    6cb8:	30 0d       	add	r19, r0
    6cba:	11 24       	eor	r1, r1
    6cbc:	c2 1a       	sub	r12, r18
    6cbe:	d3 0a       	sbc	r13, r19
    6cc0:	b6 01       	movw	r22, r12
    6cc2:	80 e0       	ldi	r24, 0x00	; 0
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	0e 94 1f 48 	call	0x903e	; 0x903e <__floatunsisf>
	if (abs(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	40 e7       	ldi	r20, 0x70	; 112
    6cd0:	52 e4       	ldi	r21, 0x42	; 66
    6cd2:	0e 94 77 47 	call	0x8eee	; 0x8eee <__divsf3>
    6cd6:	4b 01       	movw	r8, r22
    6cd8:	5c 01       	movw	r10, r24
	uint8_t i = (uint8_t)h;
    6cda:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    6cde:	76 2e       	mov	r7, r22
	f = h - i;
    6ce0:	70 e0       	ldi	r23, 0x00	; 0
    6ce2:	80 e0       	ldi	r24, 0x00	; 0
    6ce4:	90 e0       	ldi	r25, 0x00	; 0
    6ce6:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    6cea:	9b 01       	movw	r18, r22
    6cec:	ac 01       	movw	r20, r24
    6cee:	c5 01       	movw	r24, r10
    6cf0:	b4 01       	movw	r22, r8
    6cf2:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6cf6:	6f 83       	std	Y+7, r22	; 0x07
    6cf8:	78 87       	std	Y+8, r23	; 0x08
    6cfa:	89 87       	std	Y+9, r24	; 0x09
    6cfc:	9a 87       	std	Y+10, r25	; 0x0a
	
	p = v*(1-s);
    6cfe:	29 81       	ldd	r18, Y+1	; 0x01
    6d00:	3a 81       	ldd	r19, Y+2	; 0x02
    6d02:	4b 81       	ldd	r20, Y+3	; 0x03
    6d04:	5c 81       	ldd	r21, Y+4	; 0x04
    6d06:	60 e0       	ldi	r22, 0x00	; 0
    6d08:	70 e0       	ldi	r23, 0x00	; 0
    6d0a:	80 e8       	ldi	r24, 0x80	; 128
    6d0c:	9f e3       	ldi	r25, 0x3F	; 63
    6d0e:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6d12:	26 2d       	mov	r18, r6
    6d14:	35 2d       	mov	r19, r5
    6d16:	44 2d       	mov	r20, r4
    6d18:	53 2d       	mov	r21, r3
    6d1a:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6d1e:	26 2e       	mov	r2, r22
    6d20:	97 2e       	mov	r9, r23
    6d22:	a8 2e       	mov	r10, r24
    6d24:	b9 2e       	mov	r11, r25
	q = v*(1-s*f);
    6d26:	2f 81       	ldd	r18, Y+7	; 0x07
    6d28:	38 85       	ldd	r19, Y+8	; 0x08
    6d2a:	49 85       	ldd	r20, Y+9	; 0x09
    6d2c:	5a 85       	ldd	r21, Y+10	; 0x0a
    6d2e:	69 81       	ldd	r22, Y+1	; 0x01
    6d30:	7a 81       	ldd	r23, Y+2	; 0x02
    6d32:	8b 81       	ldd	r24, Y+3	; 0x03
    6d34:	9c 81       	ldd	r25, Y+4	; 0x04
    6d36:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6d3a:	9b 01       	movw	r18, r22
    6d3c:	ac 01       	movw	r20, r24
    6d3e:	60 e0       	ldi	r22, 0x00	; 0
    6d40:	70 e0       	ldi	r23, 0x00	; 0
    6d42:	80 e8       	ldi	r24, 0x80	; 128
    6d44:	9f e3       	ldi	r25, 0x3F	; 63
    6d46:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6d4a:	26 2d       	mov	r18, r6
    6d4c:	35 2d       	mov	r19, r5
    6d4e:	44 2d       	mov	r20, r4
    6d50:	53 2d       	mov	r21, r3
    6d52:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6d56:	c6 2e       	mov	r12, r22
    6d58:	d7 2e       	mov	r13, r23
    6d5a:	8b 87       	std	Y+11, r24	; 0x0b
    6d5c:	89 2e       	mov	r8, r25
	t = v*(1-s*(1-f));
    6d5e:	2f 81       	ldd	r18, Y+7	; 0x07
    6d60:	38 85       	ldd	r19, Y+8	; 0x08
    6d62:	49 85       	ldd	r20, Y+9	; 0x09
    6d64:	5a 85       	ldd	r21, Y+10	; 0x0a
    6d66:	60 e0       	ldi	r22, 0x00	; 0
    6d68:	70 e0       	ldi	r23, 0x00	; 0
    6d6a:	80 e8       	ldi	r24, 0x80	; 128
    6d6c:	9f e3       	ldi	r25, 0x3F	; 63
    6d6e:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6d72:	29 81       	ldd	r18, Y+1	; 0x01
    6d74:	3a 81       	ldd	r19, Y+2	; 0x02
    6d76:	4b 81       	ldd	r20, Y+3	; 0x03
    6d78:	5c 81       	ldd	r21, Y+4	; 0x04
    6d7a:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6d7e:	9b 01       	movw	r18, r22
    6d80:	ac 01       	movw	r20, r24
    6d82:	60 e0       	ldi	r22, 0x00	; 0
    6d84:	70 e0       	ldi	r23, 0x00	; 0
    6d86:	80 e8       	ldi	r24, 0x80	; 128
    6d88:	9f e3       	ldi	r25, 0x3F	; 63
    6d8a:	0e 94 77 46 	call	0x8cee	; 0x8cee <__subsf3>
    6d8e:	26 2d       	mov	r18, r6
    6d90:	35 2d       	mov	r19, r5
    6d92:	44 2d       	mov	r20, r4
    6d94:	53 2d       	mov	r21, r3
    6d96:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
	
	switch(i)
    6d9a:	f2 e0       	ldi	r31, 0x02	; 2
    6d9c:	7f 16       	cp	r7, r31
    6d9e:	69 f1       	breq	.+90     	; 0x6dfa <hsv_to_rgb+0x21e>
    6da0:	f7 15       	cp	r31, r7
    6da2:	30 f0       	brcs	.+12     	; 0x6db0 <hsv_to_rgb+0x1d4>
    6da4:	77 20       	and	r7, r7
    6da6:	79 f0       	breq	.+30     	; 0x6dc6 <hsv_to_rgb+0x1ea>
    6da8:	21 e0       	ldi	r18, 0x01	; 1
    6daa:	72 16       	cp	r7, r18
    6dac:	a9 f0       	breq	.+42     	; 0x6dd8 <hsv_to_rgb+0x1fc>
    6dae:	50 c0       	rjmp	.+160    	; 0x6e50 <hsv_to_rgb+0x274>
    6db0:	e4 e0       	ldi	r30, 0x04	; 4
    6db2:	7e 16       	cp	r7, r30
    6db4:	09 f4       	brne	.+2      	; 0x6db8 <hsv_to_rgb+0x1dc>
    6db6:	43 c0       	rjmp	.+134    	; 0x6e3e <hsv_to_rgb+0x262>
    6db8:	7e 16       	cp	r7, r30
    6dba:	80 f1       	brcs	.+96     	; 0x6e1c <hsv_to_rgb+0x240>
    6dbc:	f5 e0       	ldi	r31, 0x05	; 5
    6dbe:	7f 16       	cp	r7, r31
    6dc0:	09 f4       	brne	.+2      	; 0x6dc4 <hsv_to_rgb+0x1e8>
    6dc2:	52 c0       	rjmp	.+164    	; 0x6e68 <hsv_to_rgb+0x28c>
    6dc4:	45 c0       	rjmp	.+138    	; 0x6e50 <hsv_to_rgb+0x274>
	{
		case 0:
			r = v;
			g = t;
			b = p;
    6dc6:	c2 2c       	mov	r12, r2
    6dc8:	d9 2c       	mov	r13, r9
    6dca:	ab 86       	std	Y+11, r10	; 0x0b
    6dcc:	8b 2c       	mov	r8, r11
	
	switch(i)
	{
		case 0:
			r = v;
			g = t;
    6dce:	26 2e       	mov	r2, r22
    6dd0:	97 2e       	mov	r9, r23
    6dd2:	a8 2e       	mov	r10, r24
    6dd4:	b9 2e       	mov	r11, r25
    6dd6:	48 c0       	rjmp	.+144    	; 0x6e68 <hsv_to_rgb+0x28c>
			break;
		case 1:
			r = q;
			g = v;
			b = p;
			break;
    6dd8:	36 2d       	mov	r19, r6
    6dda:	25 2d       	mov	r18, r5
    6ddc:	94 2d       	mov	r25, r4
    6dde:	83 2d       	mov	r24, r3
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
    6de0:	6c 2c       	mov	r6, r12
    6de2:	5d 2c       	mov	r5, r13
    6de4:	4b 84       	ldd	r4, Y+11	; 0x0b
    6de6:	38 2c       	mov	r3, r8
			g = v;
			b = p;
    6de8:	c2 2c       	mov	r12, r2
    6dea:	d9 2c       	mov	r13, r9
    6dec:	ab 86       	std	Y+11, r10	; 0x0b
    6dee:	8b 2c       	mov	r8, r11
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
    6df0:	23 2e       	mov	r2, r19
    6df2:	92 2e       	mov	r9, r18
    6df4:	a9 2e       	mov	r10, r25
    6df6:	b8 2e       	mov	r11, r24
			b = p;
			break;
    6df8:	37 c0       	rjmp	.+110    	; 0x6e68 <hsv_to_rgb+0x28c>
		case 2:
			r = p;
			g = v;
			b = t;
    6dfa:	c6 2e       	mov	r12, r22
    6dfc:	d7 2e       	mov	r13, r23
    6dfe:	8b 87       	std	Y+11, r24	; 0x0b
    6e00:	89 2e       	mov	r8, r25
			break;
    6e02:	36 2d       	mov	r19, r6
    6e04:	25 2d       	mov	r18, r5
    6e06:	94 2d       	mov	r25, r4
    6e08:	83 2d       	mov	r24, r3
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
    6e0a:	62 2c       	mov	r6, r2
    6e0c:	59 2c       	mov	r5, r9
    6e0e:	4a 2c       	mov	r4, r10
    6e10:	3b 2c       	mov	r3, r11
			g = v;
    6e12:	23 2e       	mov	r2, r19
    6e14:	92 2e       	mov	r9, r18
    6e16:	a9 2e       	mov	r10, r25
    6e18:	b8 2e       	mov	r11, r24
			b = t;
			break;
    6e1a:	26 c0       	rjmp	.+76     	; 0x6e68 <hsv_to_rgb+0x28c>
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    6e1c:	36 2d       	mov	r19, r6
    6e1e:	25 2d       	mov	r18, r5
    6e20:	94 2d       	mov	r25, r4
    6e22:	83 2d       	mov	r24, r3
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
    6e24:	62 2c       	mov	r6, r2
    6e26:	59 2c       	mov	r5, r9
    6e28:	4a 2c       	mov	r4, r10
    6e2a:	3b 2c       	mov	r3, r11
			g = q;
    6e2c:	2c 2c       	mov	r2, r12
    6e2e:	9d 2c       	mov	r9, r13
    6e30:	ab 84       	ldd	r10, Y+11	; 0x0b
    6e32:	b8 2c       	mov	r11, r8
			b = v;
    6e34:	c3 2e       	mov	r12, r19
    6e36:	d2 2e       	mov	r13, r18
    6e38:	9b 87       	std	Y+11, r25	; 0x0b
    6e3a:	88 2e       	mov	r8, r24
			break;
    6e3c:	15 c0       	rjmp	.+42     	; 0x6e68 <hsv_to_rgb+0x28c>
		case 4:
			r = t;
			g = p;
			b = v;
    6e3e:	c6 2c       	mov	r12, r6
    6e40:	d5 2c       	mov	r13, r5
    6e42:	4b 86       	std	Y+11, r4	; 0x0b
    6e44:	83 2c       	mov	r8, r3
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
    6e46:	66 2e       	mov	r6, r22
    6e48:	57 2e       	mov	r5, r23
    6e4a:	48 2e       	mov	r4, r24
    6e4c:	39 2e       	mov	r3, r25
			g = p;
			b = v;
			break;
    6e4e:	0c c0       	rjmp	.+24     	; 0x6e68 <hsv_to_rgb+0x28c>
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
    6e50:	c1 2c       	mov	r12, r1
    6e52:	d1 2c       	mov	r13, r1
    6e54:	1b 86       	std	Y+11, r1	; 0x0b
    6e56:	81 2c       	mov	r8, r1
    6e58:	21 2c       	mov	r2, r1
    6e5a:	91 2c       	mov	r9, r1
    6e5c:	a1 2c       	mov	r10, r1
    6e5e:	b1 2c       	mov	r11, r1
    6e60:	61 2c       	mov	r6, r1
    6e62:	51 2c       	mov	r5, r1
    6e64:	41 2c       	mov	r4, r1
    6e66:	31 2c       	mov	r3, r1
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    6e68:	20 e0       	ldi	r18, 0x00	; 0
    6e6a:	30 e0       	ldi	r19, 0x00	; 0
    6e6c:	4f e7       	ldi	r20, 0x7F	; 127
    6e6e:	53 e4       	ldi	r21, 0x43	; 67
    6e70:	66 2d       	mov	r22, r6
    6e72:	75 2d       	mov	r23, r5
    6e74:	84 2d       	mov	r24, r4
    6e76:	93 2d       	mov	r25, r3
    6e78:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6e7c:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    6e80:	ed 81       	ldd	r30, Y+5	; 0x05
    6e82:	fe 81       	ldd	r31, Y+6	; 0x06
    6e84:	60 83       	st	Z, r22
	*blue = (uint8_t)(b*255);
    6e86:	20 e0       	ldi	r18, 0x00	; 0
    6e88:	30 e0       	ldi	r19, 0x00	; 0
    6e8a:	4f e7       	ldi	r20, 0x7F	; 127
    6e8c:	53 e4       	ldi	r21, 0x43	; 67
    6e8e:	6c 2d       	mov	r22, r12
    6e90:	7d 2d       	mov	r23, r13
    6e92:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e94:	98 2d       	mov	r25, r8
    6e96:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6e9a:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    6e9e:	f7 01       	movw	r30, r14
    6ea0:	60 83       	st	Z, r22
	*green = (uint8_t)(g*255);
    6ea2:	20 e0       	ldi	r18, 0x00	; 0
    6ea4:	30 e0       	ldi	r19, 0x00	; 0
    6ea6:	4f e7       	ldi	r20, 0x7F	; 127
    6ea8:	53 e4       	ldi	r21, 0x43	; 67
    6eaa:	62 2d       	mov	r22, r2
    6eac:	79 2d       	mov	r23, r9
    6eae:	8a 2d       	mov	r24, r10
    6eb0:	9b 2d       	mov	r25, r11
    6eb2:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    6eb6:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    6eba:	f8 01       	movw	r30, r16
    6ebc:	60 83       	st	Z, r22
    6ebe:	2b 96       	adiw	r28, 0x0b	; 11
    6ec0:	cd bf       	out	0x3d, r28	; 61
    6ec2:	de bf       	out	0x3e, r29	; 62
    6ec4:	df 91       	pop	r29
    6ec6:	cf 91       	pop	r28
    6ec8:	1f 91       	pop	r17
    6eca:	0f 91       	pop	r16
    6ecc:	ff 90       	pop	r15
    6ece:	ef 90       	pop	r14
    6ed0:	df 90       	pop	r13
    6ed2:	cf 90       	pop	r12
    6ed4:	bf 90       	pop	r11
    6ed6:	af 90       	pop	r10
    6ed8:	9f 90       	pop	r9
    6eda:	8f 90       	pop	r8
    6edc:	7f 90       	pop	r7
    6ede:	6f 90       	pop	r6
    6ee0:	5f 90       	pop	r5
    6ee2:	4f 90       	pop	r4
    6ee4:	3f 90       	pop	r3
    6ee6:	2f 90       	pop	r2
    6ee8:	08 95       	ret

00006eea <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    6eea:	ef 92       	push	r14
    6eec:	ff 92       	push	r15
    6eee:	0f 93       	push	r16
    6ef0:	1f 93       	push	r17
    6ef2:	cf 93       	push	r28
    6ef4:	df 93       	push	r29
    6ef6:	00 d0       	rcall	.+0      	; 0x6ef8 <set_hsv+0xe>
    6ef8:	cd b7       	in	r28, 0x3d	; 61
    6efa:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    6efc:	9e 01       	movw	r18, r28
    6efe:	2d 5f       	subi	r18, 0xFD	; 253
    6f00:	3f 4f       	sbci	r19, 0xFF	; 255
    6f02:	79 01       	movw	r14, r18
    6f04:	8e 01       	movw	r16, r28
    6f06:	0e 5f       	subi	r16, 0xFE	; 254
    6f08:	1f 4f       	sbci	r17, 0xFF	; 255
    6f0a:	22 50       	subi	r18, 0x02	; 2
    6f0c:	31 09       	sbc	r19, r1
    6f0e:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <hsv_to_rgb>
	set_rgb(r,g,b);
    6f12:	8b 81       	ldd	r24, Y+3	; 0x03
    6f14:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    6f16:	49 81       	ldd	r20, Y+1	; 0x01
    6f18:	50 e0       	ldi	r21, 0x00	; 0
    6f1a:	e0 e4       	ldi	r30, 0x40	; 64
    6f1c:	fa e0       	ldi	r31, 0x0A	; 10
    6f1e:	42 af       	std	Z+58, r20	; 0x3a
    6f20:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    6f22:	30 e0       	ldi	r19, 0x00	; 0
    6f24:	20 af       	std	Z+56, r18	; 0x38
    6f26:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	80 93 78 09 	sts	0x0978, r24
    6f2e:	90 93 79 09 	sts	0x0979, r25
}
    6f32:	23 96       	adiw	r28, 0x03	; 3
    6f34:	cd bf       	out	0x3d, r28	; 61
    6f36:	de bf       	out	0x3e, r29	; 62
    6f38:	df 91       	pop	r29
    6f3a:	cf 91       	pop	r28
    6f3c:	1f 91       	pop	r17
    6f3e:	0f 91       	pop	r16
    6f40:	ff 90       	pop	r15
    6f42:	ef 90       	pop	r14
    6f44:	08 95       	ret

00006f46 <get_red_sensor>:
		}
		//printf("\r\n");
	#else
		printf_P(PSTR("ERROR: Audio droplets don't use color_settings.\r\n"));
	#endif		
}
    6f46:	cf 93       	push	r28
    6f48:	df 93       	push	r29
    6f4a:	cd b7       	in	r28, 0x3d	; 61
    6f4c:	de b7       	in	r29, 0x3e	; 62
    6f4e:	2a 97       	sbiw	r28, 0x0a	; 10
    6f50:	cd bf       	out	0x3d, r28	; 61
    6f52:	de bf       	out	0x3e, r29	; 62
    6f54:	de 01       	movw	r26, r28
    6f56:	11 96       	adiw	r26, 0x01	; 1
    6f58:	ae 01       	movw	r20, r28
    6f5a:	45 5f       	subi	r20, 0xF5	; 245
    6f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f5e:	e0 e0       	ldi	r30, 0x00	; 0
    6f60:	f2 e0       	ldi	r31, 0x02	; 2
    6f62:	31 e0       	ldi	r19, 0x01	; 1
    6f64:	80 a1       	ldd	r24, Z+32	; 0x20
    6f66:	80 68       	ori	r24, 0x80	; 128
    6f68:	80 a3       	std	Z+32, r24	; 0x20
    6f6a:	83 a1       	ldd	r24, Z+35	; 0x23
    6f6c:	88 23       	and	r24, r24
    6f6e:	e9 f3       	breq	.-6      	; 0x6f6a <get_red_sensor+0x24>
    6f70:	25 a1       	ldd	r18, Z+37	; 0x25
    6f72:	84 a1       	ldd	r24, Z+36	; 0x24
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	92 2b       	or	r25, r18
    6f78:	95 95       	asr	r25
    6f7a:	87 95       	ror	r24
    6f7c:	95 95       	asr	r25
    6f7e:	87 95       	ror	r24
    6f80:	95 95       	asr	r25
    6f82:	87 95       	ror	r24
    6f84:	95 95       	asr	r25
    6f86:	87 95       	ror	r24
    6f88:	8d 93       	st	X+, r24
    6f8a:	9d 93       	st	X+, r25
    6f8c:	33 a3       	std	Z+35, r19	; 0x23
    6f8e:	a4 17       	cp	r26, r20
    6f90:	b5 07       	cpc	r27, r21
    6f92:	41 f7       	brne	.-48     	; 0x6f64 <get_red_sensor+0x1e>
    6f94:	63 e0       	ldi	r22, 0x03	; 3
    6f96:	ce 01       	movw	r24, r28
    6f98:	05 96       	adiw	r24, 0x05	; 5
    6f9a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <meas_find_median>
    6f9e:	2a 96       	adiw	r28, 0x0a	; 10
    6fa0:	cd bf       	out	0x3d, r28	; 61
    6fa2:	de bf       	out	0x3e, r29	; 62
    6fa4:	df 91       	pop	r29
    6fa6:	cf 91       	pop	r28
    6fa8:	08 95       	ret

00006faa <get_green_sensor>:
    6faa:	cf 93       	push	r28
    6fac:	df 93       	push	r29
    6fae:	cd b7       	in	r28, 0x3d	; 61
    6fb0:	de b7       	in	r29, 0x3e	; 62
    6fb2:	2a 97       	sbiw	r28, 0x0a	; 10
    6fb4:	cd bf       	out	0x3d, r28	; 61
    6fb6:	de bf       	out	0x3e, r29	; 62
    6fb8:	de 01       	movw	r26, r28
    6fba:	11 96       	adiw	r26, 0x01	; 1
    6fbc:	ae 01       	movw	r20, r28
    6fbe:	45 5f       	subi	r20, 0xF5	; 245
    6fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc2:	e0 e0       	ldi	r30, 0x00	; 0
    6fc4:	f2 e0       	ldi	r31, 0x02	; 2
    6fc6:	31 e0       	ldi	r19, 0x01	; 1
    6fc8:	80 a5       	ldd	r24, Z+40	; 0x28
    6fca:	80 68       	ori	r24, 0x80	; 128
    6fcc:	80 a7       	std	Z+40, r24	; 0x28
    6fce:	83 a5       	ldd	r24, Z+43	; 0x2b
    6fd0:	88 23       	and	r24, r24
    6fd2:	e9 f3       	breq	.-6      	; 0x6fce <get_green_sensor+0x24>
    6fd4:	25 a5       	ldd	r18, Z+45	; 0x2d
    6fd6:	84 a5       	ldd	r24, Z+44	; 0x2c
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	92 2b       	or	r25, r18
    6fdc:	95 95       	asr	r25
    6fde:	87 95       	ror	r24
    6fe0:	95 95       	asr	r25
    6fe2:	87 95       	ror	r24
    6fe4:	95 95       	asr	r25
    6fe6:	87 95       	ror	r24
    6fe8:	95 95       	asr	r25
    6fea:	87 95       	ror	r24
    6fec:	8d 93       	st	X+, r24
    6fee:	9d 93       	st	X+, r25
    6ff0:	33 a7       	std	Z+43, r19	; 0x2b
    6ff2:	a4 17       	cp	r26, r20
    6ff4:	b5 07       	cpc	r27, r21
    6ff6:	41 f7       	brne	.-48     	; 0x6fc8 <get_green_sensor+0x1e>
    6ff8:	63 e0       	ldi	r22, 0x03	; 3
    6ffa:	ce 01       	movw	r24, r28
    6ffc:	05 96       	adiw	r24, 0x05	; 5
    6ffe:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <meas_find_median>
    7002:	2a 96       	adiw	r28, 0x0a	; 10
    7004:	cd bf       	out	0x3d, r28	; 61
    7006:	de bf       	out	0x3e, r29	; 62
    7008:	df 91       	pop	r29
    700a:	cf 91       	pop	r28
    700c:	08 95       	ret

0000700e <get_blue_sensor>:
    700e:	cf 93       	push	r28
    7010:	df 93       	push	r29
    7012:	cd b7       	in	r28, 0x3d	; 61
    7014:	de b7       	in	r29, 0x3e	; 62
    7016:	2a 97       	sbiw	r28, 0x0a	; 10
    7018:	cd bf       	out	0x3d, r28	; 61
    701a:	de bf       	out	0x3e, r29	; 62
    701c:	de 01       	movw	r26, r28
    701e:	11 96       	adiw	r26, 0x01	; 1
    7020:	ae 01       	movw	r20, r28
    7022:	45 5f       	subi	r20, 0xF5	; 245
    7024:	5f 4f       	sbci	r21, 0xFF	; 255
    7026:	e0 e0       	ldi	r30, 0x00	; 0
    7028:	f2 e0       	ldi	r31, 0x02	; 2
    702a:	31 e0       	ldi	r19, 0x01	; 1
    702c:	80 a9       	ldd	r24, Z+48	; 0x30
    702e:	80 68       	ori	r24, 0x80	; 128
    7030:	80 ab       	std	Z+48, r24	; 0x30
    7032:	83 a9       	ldd	r24, Z+51	; 0x33
    7034:	88 23       	and	r24, r24
    7036:	e9 f3       	breq	.-6      	; 0x7032 <get_blue_sensor+0x24>
    7038:	25 a9       	ldd	r18, Z+53	; 0x35
    703a:	84 a9       	ldd	r24, Z+52	; 0x34
    703c:	90 e0       	ldi	r25, 0x00	; 0
    703e:	92 2b       	or	r25, r18
    7040:	95 95       	asr	r25
    7042:	87 95       	ror	r24
    7044:	95 95       	asr	r25
    7046:	87 95       	ror	r24
    7048:	95 95       	asr	r25
    704a:	87 95       	ror	r24
    704c:	95 95       	asr	r25
    704e:	87 95       	ror	r24
    7050:	8d 93       	st	X+, r24
    7052:	9d 93       	st	X+, r25
    7054:	33 ab       	std	Z+51, r19	; 0x33
    7056:	a4 17       	cp	r26, r20
    7058:	b5 07       	cpc	r27, r21
    705a:	41 f7       	brne	.-48     	; 0x702c <get_blue_sensor+0x1e>
    705c:	63 e0       	ldi	r22, 0x03	; 3
    705e:	ce 01       	movw	r24, r28
    7060:	05 96       	adiw	r24, 0x05	; 5
    7062:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <meas_find_median>
    7066:	2a 96       	adiw	r28, 0x0a	; 10
    7068:	cd bf       	out	0x3d, r28	; 61
    706a:	de bf       	out	0x3e, r29	; 62
    706c:	df 91       	pop	r29
    706e:	cf 91       	pop	r28
    7070:	08 95       	ret

00007072 <rgb_sensor_init>:
    7072:	cf 93       	push	r28
    7074:	80 ee       	ldi	r24, 0xE0	; 224
    7076:	80 93 02 06 	sts	0x0602, r24
    707a:	e0 e0       	ldi	r30, 0x00	; 0
    707c:	f2 e0       	ldi	r31, 0x02	; 2
    707e:	80 e2       	ldi	r24, 0x20	; 32
    7080:	82 83       	std	Z+2, r24	; 0x02
    7082:	86 e1       	ldi	r24, 0x16	; 22
    7084:	81 83       	std	Z+1, r24	; 0x01
    7086:	86 e0       	ldi	r24, 0x06	; 6
    7088:	84 83       	std	Z+4, r24	; 0x04
    708a:	83 e0       	ldi	r24, 0x03	; 3
    708c:	80 a3       	std	Z+32, r24	; 0x20
    708e:	80 a7       	std	Z+40, r24	; 0x28
    7090:	87 e0       	ldi	r24, 0x07	; 7
    7092:	80 ab       	std	Z+48, r24	; 0x30
    7094:	8c e2       	ldi	r24, 0x2C	; 44
    7096:	81 a3       	std	Z+33, r24	; 0x21
    7098:	84 e3       	ldi	r24, 0x34	; 52
    709a:	81 a7       	std	Z+41, r24	; 0x29
    709c:	8c e3       	ldi	r24, 0x3C	; 60
    709e:	81 ab       	std	Z+49, r24	; 0x31
    70a0:	80 b5       	in	r24, 0x20	; 32
    70a2:	84 87       	std	Z+12, r24	; 0x0c
    70a4:	81 b5       	in	r24, 0x21	; 33
    70a6:	85 87       	std	Z+13, r24	; 0x0d
    70a8:	81 e0       	ldi	r24, 0x01	; 1
    70aa:	80 83       	st	Z, r24
    70ac:	8f e8       	ldi	r24, 0x8F	; 143
    70ae:	91 e0       	ldi	r25, 0x01	; 1
    70b0:	01 97       	sbiw	r24, 0x01	; 1
    70b2:	f1 f7       	brne	.-4      	; 0x70b0 <rgb_sensor_init+0x3e>
    70b4:	00 c0       	rjmp	.+0      	; 0x70b6 <rgb_sensor_init+0x44>
    70b6:	00 00       	nop
    70b8:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <get_red_sensor>
    70bc:	0e 94 07 38 	call	0x700e	; 0x700e <get_blue_sensor>
    70c0:	0e 94 d5 37 	call	0x6faa	; 0x6faa <get_green_sensor>
    70c4:	8a e0       	ldi	r24, 0x0A	; 10
    70c6:	90 e0       	ldi	r25, 0x00	; 0
    70c8:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    70cc:	c0 e0       	ldi	r28, 0x00	; 0
    70ce:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <get_red_sensor>
    70d2:	0e 94 d5 37 	call	0x6faa	; 0x6faa <get_green_sensor>
    70d6:	0e 94 07 38 	call	0x700e	; 0x700e <get_blue_sensor>
    70da:	8a e0       	ldi	r24, 0x0A	; 10
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    70e2:	cf 5f       	subi	r28, 0xFF	; 255
    70e4:	c3 30       	cpi	r28, 0x03	; 3
    70e6:	99 f7       	brne	.-26     	; 0x70ce <rgb_sensor_init+0x5c>
    70e8:	10 92 18 27 	sts	0x2718, r1
    70ec:	10 92 19 27 	sts	0x2719, r1
    70f0:	10 92 26 26 	sts	0x2626, r1
    70f4:	10 92 27 26 	sts	0x2627, r1
    70f8:	10 92 11 26 	sts	0x2611, r1
    70fc:	10 92 12 26 	sts	0x2612, r1
    7100:	cf 91       	pop	r28
    7102:	08 95       	ret

00007104 <get_rgb>:

void get_rgb(int16_t *r, int16_t *g, int16_t *b)
{
    7104:	af 92       	push	r10
    7106:	bf 92       	push	r11
    7108:	cf 92       	push	r12
    710a:	df 92       	push	r13
    710c:	ef 92       	push	r14
    710e:	ff 92       	push	r15
    7110:	0f 93       	push	r16
    7112:	1f 93       	push	r17
    7114:	cf 93       	push	r28
    7116:	df 93       	push	r29
    7118:	6c 01       	movw	r12, r24
    711a:	7b 01       	movw	r14, r22
    711c:	8a 01       	movw	r16, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = get_red_sensor();
    711e:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <get_red_sensor>
    7122:	5c 01       	movw	r10, r24
		gTemp = get_green_sensor();
    7124:	0e 94 d5 37 	call	0x6faa	; 0x6faa <get_green_sensor>
    7128:	ec 01       	movw	r28, r24
		bTemp = get_blue_sensor();		
    712a:	0e 94 07 38 	call	0x700e	; 0x700e <get_blue_sensor>
		rTemp = rTemp - r_baseline;
    712e:	20 91 18 27 	lds	r18, 0x2718
    7132:	30 91 19 27 	lds	r19, 0x2719
    7136:	a2 1a       	sub	r10, r18
    7138:	b3 0a       	sbc	r11, r19
		gTemp = gTemp - g_baseline;
    713a:	20 91 26 26 	lds	r18, 0x2626
    713e:	30 91 27 26 	lds	r19, 0x2627
    7142:	c2 1b       	sub	r28, r18
    7144:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    7146:	20 91 11 26 	lds	r18, 0x2611
    714a:	30 91 12 26 	lds	r19, 0x2612
    714e:	82 1b       	sub	r24, r18
    7150:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    7152:	c1 14       	cp	r12, r1
    7154:	d1 04       	cpc	r13, r1
    7156:	19 f0       	breq	.+6      	; 0x715e <get_rgb+0x5a>
    7158:	f6 01       	movw	r30, r12
    715a:	a0 82       	st	Z, r10
    715c:	b1 82       	std	Z+1, r11	; 0x01
		if(g!=NULL) *g = gTemp;
    715e:	e1 14       	cp	r14, r1
    7160:	f1 04       	cpc	r15, r1
    7162:	19 f0       	breq	.+6      	; 0x716a <get_rgb+0x66>
    7164:	f7 01       	movw	r30, r14
    7166:	c0 83       	st	Z, r28
    7168:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    716a:	01 15       	cp	r16, r1
    716c:	11 05       	cpc	r17, r1
    716e:	19 f0       	breq	.+6      	; 0x7176 <get_rgb+0x72>
    7170:	f8 01       	movw	r30, r16
    7172:	80 83       	st	Z, r24
    7174:	91 83       	std	Z+1, r25	; 0x01
	#endif
    7176:	df 91       	pop	r29
    7178:	cf 91       	pop	r28
    717a:	1f 91       	pop	r17
    717c:	0f 91       	pop	r16
    717e:	ff 90       	pop	r15
    7180:	ef 90       	pop	r14
    7182:	df 90       	pop	r13
    7184:	cf 90       	pop	r12
    7186:	bf 90       	pop	r11
    7188:	af 90       	pop	r10
    718a:	08 95       	ret

0000718c <Config32MHzClock>:
}

void Config32MHzClock(void)
{
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    718c:	88 ed       	ldi	r24, 0xD8	; 216
    718e:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    7190:	82 e0       	ldi	r24, 0x02	; 2
    7192:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    7196:	e0 e5       	ldi	r30, 0x50	; 80
    7198:	f0 e0       	ldi	r31, 0x00	; 0
    719a:	81 81       	ldd	r24, Z+1	; 0x01
    719c:	81 ff       	sbrs	r24, 1
    719e:	fd cf       	rjmp	.-6      	; 0x719a <Config32MHzClock+0xe>
	CCP = CCP_IOREG_gc;
    71a0:	88 ed       	ldi	r24, 0xD8	; 216
    71a2:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    71a4:	e0 e4       	ldi	r30, 0x40	; 64
    71a6:	f0 e0       	ldi	r31, 0x00	; 0
    71a8:	81 e0       	ldi	r24, 0x01	; 1
    71aa:	80 83       	st	Z, r24
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;	// per Dustin: RTCSRC is a 1 kHz oscillator, needs to be verified
    71ac:	85 e0       	ldi	r24, 0x05	; 5
    71ae:	83 83       	std	Z+3, r24	; 0x03
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    71b0:	e0 e0       	ldi	r30, 0x00	; 0
    71b2:	f4 e0       	ldi	r31, 0x04	; 4
    71b4:	81 81       	ldd	r24, Z+1	; 0x01
    71b6:	80 fd       	sbrc	r24, 0
    71b8:	fd cf       	rjmp	.-6      	; 0x71b4 <Config32MHzClock+0x28>
	
	RTC.PER = 0xFFFF;		//	0xFFFF == 0b1111111111111111 = (2^16)-1
    71ba:	e0 e0       	ldi	r30, 0x00	; 0
    71bc:	f4 e0       	ldi	r31, 0x04	; 4
    71be:	8f ef       	ldi	r24, 0xFF	; 255
    71c0:	9f ef       	ldi	r25, 0xFF	; 255
    71c2:	82 87       	std	Z+10, r24	; 0x0a
    71c4:	93 87       	std	Z+11, r25	; 0x0b
	// (2^16)-1 milliseconds is 65.535 seconds

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    71c6:	81 e0       	ldi	r24, 0x01	; 1
    71c8:	80 83       	st	Z, r24

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    71ca:	81 81       	ldd	r24, Z+1	; 0x01
    71cc:	80 fd       	sbrc	r24, 0
    71ce:	fd cf       	rjmp	.-6      	; 0x71ca <Config32MHzClock+0x3e>
	RTC.CNT = 0;
    71d0:	10 92 08 04 	sts	0x0408, r1
    71d4:	10 92 09 04 	sts	0x0409, r1
    71d8:	08 95       	ret

000071da <delay_ms>:
}

// Delay ms milliseconds
// (the built-in _delay_ms only takes constant arguments, not variables)
void delay_ms(uint16_t ms)
{
    71da:	cf 92       	push	r12
    71dc:	df 92       	push	r13
    71de:	ef 92       	push	r14
    71e0:	ff 92       	push	r15
    71e2:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    71e4:	f8 94       	cli
    71e6:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    71ea:	78 94       	sei
	end_time = cur_time + ms;
    71ec:	9b 01       	movw	r18, r22
    71ee:	ac 01       	movw	r20, r24
    71f0:	2e 0d       	add	r18, r14
    71f2:	3f 1d       	adc	r19, r15
    71f4:	41 1d       	adc	r20, r1
    71f6:	51 1d       	adc	r21, r1
    71f8:	69 01       	movw	r12, r18
    71fa:	7a 01       	movw	r14, r20
	while (1)
	{
		cli();
    71fc:	f8 94       	cli
		if (get_time() >= end_time)
    71fe:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    7202:	6c 15       	cp	r22, r12
    7204:	7d 05       	cpc	r23, r13
    7206:	8e 05       	cpc	r24, r14
    7208:	9f 05       	cpc	r25, r15
    720a:	10 f0       	brcs	.+4      	; 0x7210 <delay_ms+0x36>
		{
			sei();
    720c:	78 94       	sei
    720e:	06 c0       	rjmp	.+12     	; 0x721c <delay_ms+0x42>
			return;
		}
		sei();
    7210:	78 94       	sei
    7212:	3a e6       	ldi	r19, 0x6A	; 106
    7214:	3a 95       	dec	r19
    7216:	f1 f7       	brne	.-4      	; 0x7214 <delay_ms+0x3a>
    7218:	00 c0       	rjmp	.+0      	; 0x721a <delay_ms+0x40>
    721a:	f0 cf       	rjmp	.-32     	; 0x71fc <delay_ms+0x22>
		delay_us(10);
	}
}
    721c:	ff 90       	pop	r15
    721e:	ef 90       	pop	r14
    7220:	df 90       	pop	r13
    7222:	cf 90       	pop	r12
    7224:	08 95       	ret

00007226 <scheduler_free>:
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt)
{
    7226:	cf 93       	push	r28
    7228:	df 93       	push	r29
    722a:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS]))))
    722c:	83 e2       	ldi	r24, 0x23	; 35
    722e:	c8 3b       	cpi	r28, 0xB8	; 184
    7230:	d8 07       	cpc	r29, r24
    7232:	28 f0       	brcs	.+10     	; 0x723e <scheduler_free+0x18>
    7234:	84 e2       	ldi	r24, 0x24	; 36
    7236:	c4 34       	cpi	r28, 0x44	; 68
    7238:	d8 07       	cpc	r29, r24
    723a:	b1 f0       	breq	.+44     	; 0x7268 <scheduler_free+0x42>
    723c:	a8 f0       	brcs	.+42     	; 0x7268 <scheduler_free+0x42>
	{
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    723e:	df 93       	push	r29
    7240:	cf 93       	push	r28
    7242:	86 ec       	ldi	r24, 0xC6	; 198
    7244:	99 e0       	ldi	r25, 0x09	; 9
    7246:	9f 93       	push	r25
    7248:	8f 93       	push	r24
    724a:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		set_rgb(0,0,255);
    724e:	4f ef       	ldi	r20, 0xFF	; 255
    7250:	60 e0       	ldi	r22, 0x00	; 0
    7252:	80 e0       	ldi	r24, 0x00	; 0
    7254:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
		delay_ms(60000);
    7258:	80 e6       	ldi	r24, 0x60	; 96
    725a:	9a ee       	ldi	r25, 0xEA	; 234
    725c:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    7260:	0f 90       	pop	r0
    7262:	0f 90       	pop	r0
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    7268:	1a 86       	std	Y+10, r1	; 0x0a
    726a:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    726c:	1c 82       	std	Y+4, r1	; 0x04
    726e:	1d 82       	std	Y+5, r1	; 0x05
    7270:	1e 82       	std	Y+6, r1	; 0x06
    7272:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_function = NULL;
    7274:	18 86       	std	Y+8, r1	; 0x08
    7276:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    7278:	18 82       	st	Y, r1
    727a:	19 82       	std	Y+1, r1	; 0x01
    727c:	1a 82       	std	Y+2, r1	; 0x02
    727e:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    7280:	1c 86       	std	Y+12, r1	; 0x0c
    7282:	1d 86       	std	Y+13, r1	; 0x0d
}
    7284:	df 91       	pop	r29
    7286:	cf 91       	pop	r28
    7288:	08 95       	ret

0000728a <scheduler_init>:

void scheduler_init()
{
    728a:	0f 93       	push	r16
    728c:	1f 93       	push	r17
    728e:	cf 93       	push	r28
    7290:	df 93       	push	r29
	task_list = NULL;
    7292:	10 92 d3 28 	sts	0x28D3, r1
    7296:	10 92 d4 28 	sts	0x28D4, r1
	num_tasks = 0;
    729a:	10 92 22 26 	sts	0x2622, r1
	task_executing = 0;
    729e:	10 92 95 28 	sts	0x2895, r1
    72a2:	c8 eb       	ldi	r28, 0xB8	; 184
    72a4:	d3 e2       	ldi	r29, 0x23	; 35
    72a6:	04 e4       	ldi	r16, 0x44	; 68
    72a8:	14 e2       	ldi	r17, 0x24	; 36
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    72aa:	ce 01       	movw	r24, r28
    72ac:	0e 94 13 39 	call	0x7226	; 0x7226 <scheduler_free>
    72b0:	2e 96       	adiw	r28, 0x0e	; 14
    72b2:	c0 17       	cp	r28, r16
    72b4:	d1 07       	cpc	r29, r17
    72b6:	c9 f7       	brne	.-14     	; 0x72aa <scheduler_init+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during initialization
    72b8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    72ba:	f8 94       	cli
	{
		// Set up real-time clock
		rtc_epoch = 0;
    72bc:	10 92 48 24 	sts	0x2448, r1
    72c0:	10 92 49 24 	sts	0x2449, r1
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    72c4:	85 e0       	ldi	r24, 0x05	; 5
    72c6:	80 93 43 00 	sts	0x0043, r24
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    72ca:	83 e0       	ldi	r24, 0x03	; 3
    72cc:	80 93 02 04 	sts	0x0402, r24
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    72d0:	e0 e0       	ldi	r30, 0x00	; 0
    72d2:	f4 e0       	ldi	r31, 0x04	; 4
    72d4:	81 81       	ldd	r24, Z+1	; 0x01
    72d6:	80 fd       	sbrc	r24, 0
    72d8:	fd cf       	rjmp	.-6      	; 0x72d4 <scheduler_init+0x4a>
		RTC.PER = 0xFFFF;
    72da:	8f ef       	ldi	r24, 0xFF	; 255
    72dc:	9f ef       	ldi	r25, 0xFF	; 255
    72de:	80 93 0a 04 	sts	0x040A, r24
    72e2:	90 93 0b 04 	sts	0x040B, r25
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    72e6:	e0 e0       	ldi	r30, 0x00	; 0
    72e8:	f4 e0       	ldi	r31, 0x04	; 4
    72ea:	81 81       	ldd	r24, Z+1	; 0x01
    72ec:	80 fd       	sbrc	r24, 0
    72ee:	fd cf       	rjmp	.-6      	; 0x72ea <scheduler_init+0x60>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    72f0:	81 e0       	ldi	r24, 0x01	; 1
    72f2:	80 93 00 04 	sts	0x0400, r24
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    72f6:	e0 e0       	ldi	r30, 0x00	; 0
    72f8:	f4 e0       	ldi	r31, 0x04	; 4
    72fa:	81 81       	ldd	r24, Z+1	; 0x01
    72fc:	80 fd       	sbrc	r24, 0
    72fe:	fd cf       	rjmp	.-6      	; 0x72fa <scheduler_init+0x70>
		RTC.CNT = 0;
    7300:	10 92 08 04 	sts	0x0408, r1
    7304:	10 92 09 04 	sts	0x0409, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7308:	2f bf       	out	0x3f, r18	; 63
	}
}
    730a:	df 91       	pop	r29
    730c:	cf 91       	pop	r28
    730e:	1f 91       	pop	r17
    7310:	0f 91       	pop	r16
    7312:	08 95       	ret

00007314 <remove_task>:
	}
}

// Remove a task from the task queue
void remove_task(volatile Task_t* task)
{
    7314:	cf 93       	push	r28
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))
    7316:	23 e2       	ldi	r18, 0x23	; 35
    7318:	88 3b       	cpi	r24, 0xB8	; 184
    731a:	92 07       	cpc	r25, r18
    731c:	28 f0       	brcs	.+10     	; 0x7328 <remove_task+0x14>
    731e:	a4 e2       	ldi	r26, 0x24	; 36
    7320:	86 33       	cpi	r24, 0x36	; 54
    7322:	9a 07       	cpc	r25, r26
    7324:	31 f0       	breq	.+12     	; 0x7332 <remove_task+0x1e>
    7326:	28 f0       	brcs	.+10     	; 0x7332 <remove_task+0x1e>
	{
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    7328:	8c ec       	ldi	r24, 0xCC	; 204
    732a:	92 e2       	ldi	r25, 0x22	; 34
    732c:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
		return;
    7330:	3e c0       	rjmp	.+124    	; 0x73ae <remove_task+0x9a>
	}	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7332:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7334:	f8 94       	cli
	{
		if(task_list==task)
    7336:	e0 91 d3 28 	lds	r30, 0x28D3
    733a:	f0 91 d4 28 	lds	r31, 0x28D4
    733e:	e8 17       	cp	r30, r24
    7340:	f9 07       	cpc	r31, r25
    7342:	51 f0       	breq	.+20     	; 0x7358 <remove_task+0x44>
			num_tasks--;
		}
		else 
		{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    7344:	24 85       	ldd	r18, Z+12	; 0x0c
    7346:	35 85       	ldd	r19, Z+13	; 0x0d
    7348:	23 2b       	or	r18, r19
    734a:	f1 f0       	breq	.+60     	; 0x7388 <remove_task+0x74>
    734c:	24 85       	ldd	r18, Z+12	; 0x0c
    734e:	35 85       	ldd	r19, Z+13	; 0x0d
    7350:	28 17       	cp	r18, r24
    7352:	39 07       	cpc	r19, r25
    7354:	69 f4       	brne	.+26     	; 0x7370 <remove_task+0x5c>
    7356:	18 c0       	rjmp	.+48     	; 0x7388 <remove_task+0x74>
	}	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(task_list==task)
		{
			task_list=task->next;
    7358:	24 85       	ldd	r18, Z+12	; 0x0c
    735a:	35 85       	ldd	r19, Z+13	; 0x0d
    735c:	20 93 d3 28 	sts	0x28D3, r18
    7360:	30 93 d4 28 	sts	0x28D4, r19
			num_tasks--;
    7364:	20 91 22 26 	lds	r18, 0x2622
    7368:	21 50       	subi	r18, 0x01	; 1
    736a:	20 93 22 26 	sts	0x2622, r18
    736e:	1c c0       	rjmp	.+56     	; 0x73a8 <remove_task+0x94>
		}
		else 
		{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    7370:	04 84       	ldd	r0, Z+12	; 0x0c
    7372:	f5 85       	ldd	r31, Z+13	; 0x0d
    7374:	e0 2d       	mov	r30, r0
    7376:	24 85       	ldd	r18, Z+12	; 0x0c
    7378:	35 85       	ldd	r19, Z+13	; 0x0d
    737a:	23 2b       	or	r18, r19
    737c:	29 f0       	breq	.+10     	; 0x7388 <remove_task+0x74>
    737e:	24 85       	ldd	r18, Z+12	; 0x0c
    7380:	35 85       	ldd	r19, Z+13	; 0x0d
    7382:	28 17       	cp	r18, r24
    7384:	39 07       	cpc	r19, r25
    7386:	a1 f7       	brne	.-24     	; 0x7370 <remove_task+0x5c>
			if (tmp_task->next != NULL)
    7388:	24 85       	ldd	r18, Z+12	; 0x0c
    738a:	35 85       	ldd	r19, Z+13	; 0x0d
    738c:	23 2b       	or	r18, r19
    738e:	61 f0       	breq	.+24     	; 0x73a8 <remove_task+0x94>
			{
				tmp_task->next = task->next;
    7390:	dc 01       	movw	r26, r24
    7392:	1c 96       	adiw	r26, 0x0c	; 12
    7394:	2d 91       	ld	r18, X+
    7396:	3c 91       	ld	r19, X
    7398:	1d 97       	sbiw	r26, 0x0d	; 13
    739a:	24 87       	std	Z+12, r18	; 0x0c
    739c:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    739e:	20 91 22 26 	lds	r18, 0x2622
    73a2:	21 50       	subi	r18, 0x01	; 1
    73a4:	20 93 22 26 	sts	0x2622, r18
			}
		}
		scheduler_free(task);		
    73a8:	0e 94 13 39 	call	0x7226	; 0x7226 <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    73ac:	cf bf       	out	0x3f, r28	; 63
	}
}
    73ae:	cf 91       	pop	r28
    73b0:	08 95       	ret

000073b2 <print_task_queue>:

void print_task_queue()
{
    73b2:	bf 92       	push	r11
    73b4:	cf 92       	push	r12
    73b6:	df 92       	push	r13
    73b8:	ef 92       	push	r14
    73ba:	ff 92       	push	r15
    73bc:	0f 93       	push	r16
    73be:	1f 93       	push	r17
    73c0:	cf 93       	push	r28
    73c2:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during printing
    73c4:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    73c6:	f8 94       	cli
	{
		volatile Task_t* cur_task = task_list;
    73c8:	c0 91 d3 28 	lds	r28, 0x28D3
    73cc:	d0 91 d4 28 	lds	r29, 0x28D4
		
		printf_P(PSTR("Task Queue (%hhu tasks, %hhu executing):\r\n"), num_tasks, task_executing);
    73d0:	90 91 95 28 	lds	r25, 0x2895
    73d4:	80 91 22 26 	lds	r24, 0x2622
    73d8:	1f 92       	push	r1
    73da:	9f 93       	push	r25
    73dc:	1f 92       	push	r1
    73de:	8f 93       	push	r24
    73e0:	8d ee       	ldi	r24, 0xED	; 237
    73e2:	97 e0       	ldi	r25, 0x07	; 7
    73e4:	9f 93       	push	r25
    73e6:	8f 93       	push	r24
    73e8:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    73ec:	0f 90       	pop	r0
    73ee:	0f 90       	pop	r0
    73f0:	0f 90       	pop	r0
    73f2:	0f 90       	pop	r0
    73f4:	0f 90       	pop	r0
    73f6:	0f 90       	pop	r0
    73f8:	20 97       	sbiw	r28, 0x00	; 0
    73fa:	a1 f1       	breq	.+104    	; 0x7464 <print_task_queue+0xb2>
		{
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_function, cur_task->scheduled_time, cur_task->period, get_time());
    73fc:	0f ea       	ldi	r16, 0xAF	; 175
    73fe:	17 e0       	ldi	r17, 0x07	; 7
    7400:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    7404:	e6 2f       	mov	r30, r22
    7406:	f7 2f       	mov	r31, r23
    7408:	cc 80       	ldd	r12, Y+4	; 0x04
    740a:	dd 80       	ldd	r13, Y+5	; 0x05
    740c:	ee 80       	ldd	r14, Y+6	; 0x06
    740e:	ff 80       	ldd	r15, Y+7	; 0x07
    7410:	48 81       	ld	r20, Y
    7412:	59 81       	ldd	r21, Y+1	; 0x01
    7414:	6a 81       	ldd	r22, Y+2	; 0x02
    7416:	7b 81       	ldd	r23, Y+3	; 0x03
    7418:	28 85       	ldd	r18, Y+8	; 0x08
    741a:	39 85       	ldd	r19, Y+9	; 0x09
    741c:	9f 93       	push	r25
    741e:	8f 93       	push	r24
    7420:	ff 93       	push	r31
    7422:	ef 93       	push	r30
    7424:	ff 92       	push	r15
    7426:	ef 92       	push	r14
    7428:	df 92       	push	r13
    742a:	cf 92       	push	r12
    742c:	7f 93       	push	r23
    742e:	6f 93       	push	r22
    7430:	5f 93       	push	r21
    7432:	4f 93       	push	r20
    7434:	3f 93       	push	r19
    7436:	2f 93       	push	r18
    7438:	df 93       	push	r29
    743a:	cf 93       	push	r28
    743c:	1f 93       	push	r17
    743e:	0f 93       	push	r16
    7440:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			if(cur_task==cur_task->next) break;
    7444:	8c 85       	ldd	r24, Y+12	; 0x0c
    7446:	9d 85       	ldd	r25, Y+13	; 0x0d
    7448:	2d b7       	in	r18, 0x3d	; 61
    744a:	3e b7       	in	r19, 0x3e	; 62
    744c:	2e 5e       	subi	r18, 0xEE	; 238
    744e:	3f 4f       	sbci	r19, 0xFF	; 255
    7450:	2d bf       	out	0x3d, r18	; 61
    7452:	3e bf       	out	0x3e, r19	; 62
    7454:	8c 17       	cp	r24, r28
    7456:	9d 07       	cpc	r25, r29
    7458:	29 f0       	breq	.+10     	; 0x7464 <print_task_queue+0xb2>
			cur_task = cur_task->next;
    745a:	0c 84       	ldd	r0, Y+12	; 0x0c
    745c:	dd 85       	ldd	r29, Y+13	; 0x0d
    745e:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hhu tasks, %hhu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    7460:	20 97       	sbiw	r28, 0x00	; 0
    7462:	71 f6       	brne	.-100    	; 0x7400 <print_task_queue+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7464:	bf be       	out	0x3f, r11	; 63
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_function, cur_task->scheduled_time, cur_task->period, get_time());
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
		}
	}
}
    7466:	df 91       	pop	r29
    7468:	cf 91       	pop	r28
    746a:	1f 91       	pop	r17
    746c:	0f 91       	pop	r16
    746e:	ff 90       	pop	r15
    7470:	ef 90       	pop	r14
    7472:	df 90       	pop	r13
    7474:	cf 90       	pop	r12
    7476:	bf 90       	pop	r11
    7478:	08 95       	ret

0000747a <add_task_to_list>:
	new_task->period=period;
	return new_task;
}

void add_task_to_list(volatile Task_t* task)
{
    747a:	af 92       	push	r10
    747c:	bf 92       	push	r11
    747e:	cf 92       	push	r12
    7480:	df 92       	push	r13
    7482:	ef 92       	push	r14
    7484:	ff 92       	push	r15
    7486:	1f 93       	push	r17
    7488:	cf 93       	push	r28
    748a:	df 93       	push	r29
    748c:	5c 01       	movw	r10, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    748e:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7490:	f8 94       	cli
	{
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    7492:	e0 91 d3 28 	lds	r30, 0x28D3
    7496:	f0 91 d4 28 	lds	r31, 0x28D4
    749a:	dc 01       	movw	r26, r24
    749c:	1c 96       	adiw	r26, 0x0c	; 12
    749e:	ed 93       	st	X+, r30
    74a0:	fc 93       	st	X, r31
    74a2:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time)
    74a4:	30 97       	sbiw	r30, 0x00	; 0
    74a6:	59 f1       	breq	.+86     	; 0x74fe <add_task_to_list+0x84>
    74a8:	4d 91       	ld	r20, X+
    74aa:	5d 91       	ld	r21, X+
    74ac:	6d 91       	ld	r22, X+
    74ae:	7c 91       	ld	r23, X
    74b0:	80 81       	ld	r24, Z
    74b2:	91 81       	ldd	r25, Z+1	; 0x01
    74b4:	a2 81       	ldd	r26, Z+2	; 0x02
    74b6:	b3 81       	ldd	r27, Z+3	; 0x03
    74b8:	84 17       	cp	r24, r20
    74ba:	95 07       	cpc	r25, r21
    74bc:	a6 07       	cpc	r26, r22
    74be:	b7 07       	cpc	r27, r23
    74c0:	f0 f4       	brcc	.+60     	; 0x74fe <add_task_to_list+0x84>
			//uint8_t g = get_green_led();
			//uint8_t r = get_red_led();
			//uint8_t b = get_blue_led();
			//set_rgb(255, 50, 0);
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
    74c2:	84 85       	ldd	r24, Z+12	; 0x0c
    74c4:	95 85       	ldd	r25, Z+13	; 0x0d
    74c6:	89 2b       	or	r24, r25
    74c8:	09 f4       	brne	.+2      	; 0x74cc <add_task_to_list+0x52>
    74ca:	ae c0       	rjmp	.+348    	; 0x7628 <add_task_to_list+0x1ae>
    74cc:	e5 01       	movw	r28, r10
    74ce:	48 81       	ld	r20, Y
    74d0:	59 81       	ldd	r21, Y+1	; 0x01
    74d2:	6a 81       	ldd	r22, Y+2	; 0x02
    74d4:	7b 81       	ldd	r23, Y+3	; 0x03
    74d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    74d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    74da:	8d 91       	ld	r24, X+
    74dc:	9d 91       	ld	r25, X+
    74de:	0d 90       	ld	r0, X+
    74e0:	bc 91       	ld	r27, X
    74e2:	a0 2d       	mov	r26, r0
    74e4:	84 17       	cp	r24, r20
    74e6:	95 07       	cpc	r25, r21
    74e8:	a6 07       	cpc	r26, r22
    74ea:	b7 07       	cpc	r27, r23
    74ec:	08 f0       	brcs	.+2      	; 0x74f0 <add_task_to_list+0x76>
    74ee:	9c c0       	rjmp	.+312    	; 0x7628 <add_task_to_list+0x1ae>
			{
				if(tmp_task_ptr->next==tmp_task_ptr){
    74f0:	84 85       	ldd	r24, Z+12	; 0x0c
    74f2:	95 85       	ldd	r25, Z+13	; 0x0d
    74f4:	e8 17       	cp	r30, r24
    74f6:	f9 07       	cpc	r31, r25
    74f8:	09 f0       	breq	.+2      	; 0x74fc <add_task_to_list+0x82>
    74fa:	7d c0       	rjmp	.+250    	; 0x75f6 <add_task_to_list+0x17c>
    74fc:	43 c0       	rjmp	.+134    	; 0x7584 <add_task_to_list+0x10a>
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time)
		{
			task_list = task;
    74fe:	a0 92 d3 28 	sts	0x28D3, r10
    7502:	b0 92 d4 28 	sts	0x28D4, r11
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0)
    7506:	80 91 95 28 	lds	r24, 0x2895
    750a:	81 11       	cpse	r24, r1
    750c:	96 c0       	rjmp	.+300    	; 0x763a <add_task_to_list+0x1c0>
			{			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    750e:	f5 01       	movw	r30, r10
    7510:	c0 80       	ld	r12, Z
    7512:	d1 80       	ldd	r13, Z+1	; 0x01
    7514:	e2 80       	ldd	r14, Z+2	; 0x02
    7516:	f3 80       	ldd	r15, Z+3	; 0x03
    7518:	80 91 48 24 	lds	r24, 0x2448
    751c:	90 91 49 24 	lds	r25, 0x2449
    7520:	40 91 0a 04 	lds	r20, 0x040A
    7524:	50 91 0b 04 	lds	r21, 0x040B
    7528:	a0 e0       	ldi	r26, 0x00	; 0
    752a:	b0 e0       	ldi	r27, 0x00	; 0
    752c:	dc 01       	movw	r26, r24
    752e:	99 27       	eor	r25, r25
    7530:	88 27       	eor	r24, r24
    7532:	60 e0       	ldi	r22, 0x00	; 0
    7534:	70 e0       	ldi	r23, 0x00	; 0
    7536:	84 2b       	or	r24, r20
    7538:	95 2b       	or	r25, r21
    753a:	a6 2b       	or	r26, r22
    753c:	b7 2b       	or	r27, r23
    753e:	8c 15       	cp	r24, r12
    7540:	9d 05       	cpc	r25, r13
    7542:	ae 05       	cpc	r26, r14
    7544:	bf 05       	cpc	r27, r15
    7546:	98 f0       	brcs	.+38     	; 0x756e <add_task_to_list+0xf4>
				{
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7548:	e0 e0       	ldi	r30, 0x00	; 0
    754a:	f4 e0       	ldi	r31, 0x04	; 4
    754c:	81 81       	ldd	r24, Z+1	; 0x01
    754e:	80 fd       	sbrc	r24, 0
    7550:	fd cf       	rjmp	.-6      	; 0x754c <add_task_to_list+0xd2>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    7552:	e5 01       	movw	r28, r10
    7554:	88 81       	ld	r24, Y
    7556:	99 81       	ldd	r25, Y+1	; 0x01
    7558:	aa 81       	ldd	r26, Y+2	; 0x02
    755a:	bb 81       	ldd	r27, Y+3	; 0x03
    755c:	88 60       	ori	r24, 0x08	; 8
    755e:	e0 e0       	ldi	r30, 0x00	; 0
    7560:	f4 e0       	ldi	r31, 0x04	; 4
    7562:	84 87       	std	Z+12, r24	; 0x0c
    7564:	95 87       	std	Z+13, r25	; 0x0d
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    7566:	82 81       	ldd	r24, Z+2	; 0x02
    7568:	84 60       	ori	r24, 0x04	; 4
    756a:	82 83       	std	Z+2, r24	; 0x02
    756c:	66 c0       	rjmp	.+204    	; 0x763a <add_task_to_list+0x1c0>
				}
				else
				{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    756e:	e0 e0       	ldi	r30, 0x00	; 0
    7570:	f4 e0       	ldi	r31, 0x04	; 4
    7572:	82 81       	ldd	r24, Z+2	; 0x02
    7574:	8b 7f       	andi	r24, 0xFB	; 251
    7576:	82 83       	std	Z+2, r24	; 0x02
    7578:	60 c0       	rjmp	.+192    	; 0x763a <add_task_to_list+0x1c0>
			//uint8_t b = get_blue_led();
			//set_rgb(255, 50, 0);
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
			{
				if(tmp_task_ptr->next==tmp_task_ptr){
    757a:	84 85       	ldd	r24, Z+12	; 0x0c
    757c:	95 85       	ldd	r25, Z+13	; 0x0d
    757e:	8e 17       	cp	r24, r30
    7580:	9f 07       	cpc	r25, r31
    7582:	c9 f5       	brne	.+114    	; 0x75f6 <add_task_to_list+0x17c>
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    7584:	89 e5       	ldi	r24, 0x59	; 89
    7586:	98 e0       	ldi	r25, 0x08	; 8
    7588:	9f 93       	push	r25
    758a:	8f 93       	push	r24
    758c:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_function, task->scheduled_time, task->period, get_time());
    7590:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    7594:	e6 2f       	mov	r30, r22
    7596:	f7 2f       	mov	r31, r23
    7598:	d5 01       	movw	r26, r10
    759a:	14 96       	adiw	r26, 0x04	; 4
    759c:	cd 90       	ld	r12, X+
    759e:	dd 90       	ld	r13, X+
    75a0:	ed 90       	ld	r14, X+
    75a2:	fc 90       	ld	r15, X
    75a4:	17 97       	sbiw	r26, 0x07	; 7
    75a6:	4d 91       	ld	r20, X+
    75a8:	5d 91       	ld	r21, X+
    75aa:	6d 91       	ld	r22, X+
    75ac:	7c 91       	ld	r23, X
    75ae:	13 97       	sbiw	r26, 0x03	; 3
    75b0:	18 96       	adiw	r26, 0x08	; 8
    75b2:	2d 91       	ld	r18, X+
    75b4:	3c 91       	ld	r19, X
    75b6:	19 97       	sbiw	r26, 0x09	; 9
    75b8:	9f 93       	push	r25
    75ba:	8f 93       	push	r24
    75bc:	ff 93       	push	r31
    75be:	ef 93       	push	r30
    75c0:	ff 92       	push	r15
    75c2:	ef 92       	push	r14
    75c4:	df 92       	push	r13
    75c6:	cf 92       	push	r12
    75c8:	7f 93       	push	r23
    75ca:	6f 93       	push	r22
    75cc:	5f 93       	push	r21
    75ce:	4f 93       	push	r20
    75d0:	3f 93       	push	r19
    75d2:	2f 93       	push	r18
    75d4:	bf 92       	push	r11
    75d6:	af 92       	push	r10
    75d8:	88 e1       	ldi	r24, 0x18	; 24
    75da:	98 e0       	ldi	r25, 0x08	; 8
    75dc:	9f 93       	push	r25
    75de:	8f 93       	push	r24
    75e0:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
					print_task_queue();
    75e4:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <print_task_queue>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    75e8:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    75ea:	cd b7       	in	r28, 0x3d	; 61
    75ec:	de b7       	in	r29, 0x3e	; 62
    75ee:	64 96       	adiw	r28, 0x14	; 20
    75f0:	cd bf       	out	0x3d, r28	; 61
    75f2:	de bf       	out	0x3e, r29	; 62
    75f4:	28 c0       	rjmp	.+80     	; 0x7646 <add_task_to_list+0x1cc>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    75f6:	04 84       	ldd	r0, Z+12	; 0x0c
    75f8:	f5 85       	ldd	r31, Z+13	; 0x0d
    75fa:	e0 2d       	mov	r30, r0
			//uint8_t g = get_green_led();
			//uint8_t r = get_red_led();
			//uint8_t b = get_blue_led();
			//set_rgb(255, 50, 0);
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
    75fc:	24 85       	ldd	r18, Z+12	; 0x0c
    75fe:	35 85       	ldd	r19, Z+13	; 0x0d
    7600:	23 2b       	or	r18, r19
    7602:	91 f0       	breq	.+36     	; 0x7628 <add_task_to_list+0x1ae>
    7604:	e5 01       	movw	r28, r10
    7606:	88 81       	ld	r24, Y
    7608:	99 81       	ldd	r25, Y+1	; 0x01
    760a:	aa 81       	ldd	r26, Y+2	; 0x02
    760c:	bb 81       	ldd	r27, Y+3	; 0x03
    760e:	24 85       	ldd	r18, Z+12	; 0x0c
    7610:	35 85       	ldd	r19, Z+13	; 0x0d
    7612:	e9 01       	movw	r28, r18
    7614:	48 81       	ld	r20, Y
    7616:	59 81       	ldd	r21, Y+1	; 0x01
    7618:	6a 81       	ldd	r22, Y+2	; 0x02
    761a:	7b 81       	ldd	r23, Y+3	; 0x03
    761c:	48 17       	cp	r20, r24
    761e:	59 07       	cpc	r21, r25
    7620:	6a 07       	cpc	r22, r26
    7622:	7b 07       	cpc	r23, r27
    7624:	08 f4       	brcc	.+2      	; 0x7628 <add_task_to_list+0x1ae>
    7626:	a9 cf       	rjmp	.-174    	; 0x757a <add_task_to_list+0x100>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    7628:	84 85       	ldd	r24, Z+12	; 0x0c
    762a:	95 85       	ldd	r25, Z+13	; 0x0d
    762c:	d5 01       	movw	r26, r10
    762e:	1c 96       	adiw	r26, 0x0c	; 12
    7630:	8d 93       	st	X+, r24
    7632:	9c 93       	st	X, r25
    7634:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    7636:	a4 86       	std	Z+12, r10	; 0x0c
    7638:	b5 86       	std	Z+13, r11	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    763a:	80 91 22 26 	lds	r24, 0x2622
    763e:	8f 5f       	subi	r24, 0xFF	; 255
    7640:	80 93 22 26 	sts	0x2622, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7644:	1f bf       	out	0x3f, r17	; 63
		
		//task_list_checkup();
	}
}
    7646:	df 91       	pop	r29
    7648:	cf 91       	pop	r28
    764a:	1f 91       	pop	r17
    764c:	ff 90       	pop	r15
    764e:	ef 90       	pop	r14
    7650:	df 90       	pop	r13
    7652:	cf 90       	pop	r12
    7654:	bf 90       	pop	r11
    7656:	af 90       	pop	r10
    7658:	08 95       	ret

0000765a <task_list_cleanup>:
	}
}

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void task_list_cleanup()
{
    765a:	8f 92       	push	r8
    765c:	9f 92       	push	r9
    765e:	af 92       	push	r10
    7660:	bf 92       	push	r11
    7662:	cf 92       	push	r12
    7664:	df 92       	push	r13
    7666:	ef 92       	push	r14
    7668:	ff 92       	push	r15
    766a:	0f 93       	push	r16
    766c:	1f 93       	push	r17
    766e:	cf 93       	push	r28
    7670:	df 93       	push	r29
    7672:	cd b7       	in	r28, 0x3d	; 61
    7674:	de b7       	in	r29, 0x3e	; 62
    7676:	64 97       	sbiw	r28, 0x14	; 20
    7678:	cd bf       	out	0x3d, r28	; 61
    767a:	de bf       	out	0x3e, r29	; 62
	printf_P(PSTR("\tAttempting to restore task_list (by dropping all non-periodic tasks.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    767c:	81 e4       	ldi	r24, 0x41	; 65
    767e:	99 e0       	ldi	r25, 0x09	; 9
    7680:	9f 93       	push	r25
    7682:	8f 93       	push	r24
    7684:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>

	volatile Task_t* cur_task = task_list;
    7688:	e0 90 d3 28 	lds	r14, 0x28D3
    768c:	f0 90 d4 28 	lds	r15, 0x28D4
	volatile Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7690:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7692:	f8 94       	cli
	{
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;		
    7694:	e0 e0       	ldi	r30, 0x00	; 0
    7696:	f4 e0       	ldi	r31, 0x04	; 4
    7698:	82 81       	ldd	r24, Z+2	; 0x02
    769a:	8b 7f       	andi	r24, 0xFB	; 251
    769c:	82 83       	std	Z+2, r24	; 0x02
		while (cur_task != NULL)
    769e:	0f 90       	pop	r0
    76a0:	0f 90       	pop	r0
    76a2:	e1 14       	cp	r14, r1
    76a4:	f1 04       	cpc	r15, r1
    76a6:	09 f4       	brne	.+2      	; 0x76aa <task_list_cleanup+0x50>
    76a8:	6d c0       	rjmp	.+218    	; 0x7784 <task_list_cleanup+0x12a>
    76aa:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(cur_task->period==0)
    76ac:	f7 01       	movw	r30, r14
    76ae:	84 81       	ldd	r24, Z+4	; 0x04
    76b0:	95 81       	ldd	r25, Z+5	; 0x05
    76b2:	a6 81       	ldd	r26, Z+6	; 0x06
    76b4:	b7 81       	ldd	r27, Z+7	; 0x07
    76b6:	89 2b       	or	r24, r25
    76b8:	8a 2b       	or	r24, r26
    76ba:	8b 2b       	or	r24, r27
    76bc:	19 f4       	brne	.+6      	; 0x76c4 <task_list_cleanup+0x6a>
			{
				cur_task = cur_task->next;
    76be:	e4 84       	ldd	r14, Z+12	; 0x0c
    76c0:	f5 84       	ldd	r15, Z+13	; 0x0d
    76c2:	2a c0       	rjmp	.+84     	; 0x7718 <task_list_cleanup+0xbe>
			}
			else
			{
				cur_task->scheduled_time=get_time()+cur_task->period+50;
    76c4:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    76c8:	f7 01       	movw	r30, r14
    76ca:	84 80       	ldd	r8, Z+4	; 0x04
    76cc:	95 80       	ldd	r9, Z+5	; 0x05
    76ce:	a6 80       	ldd	r10, Z+6	; 0x06
    76d0:	b7 80       	ldd	r11, Z+7	; 0x07
    76d2:	f2 e3       	ldi	r31, 0x32	; 50
    76d4:	8f 0e       	add	r8, r31
    76d6:	91 1c       	adc	r9, r1
    76d8:	a1 1c       	adc	r10, r1
    76da:	b1 1c       	adc	r11, r1
    76dc:	dc 01       	movw	r26, r24
    76de:	cb 01       	movw	r24, r22
    76e0:	88 0d       	add	r24, r8
    76e2:	99 1d       	adc	r25, r9
    76e4:	aa 1d       	adc	r26, r10
    76e6:	bb 1d       	adc	r27, r11
    76e8:	f7 01       	movw	r30, r14
    76ea:	80 83       	st	Z, r24
    76ec:	91 83       	std	Z+1, r25	; 0x01
    76ee:	a2 83       	std	Z+2, r26	; 0x02
    76f0:	b3 83       	std	Z+3, r27	; 0x03
				task_ptr_arr[num_periodic_tasks] = cur_task;
    76f2:	e1 2f       	mov	r30, r17
    76f4:	f0 e0       	ldi	r31, 0x00	; 0
    76f6:	ee 0f       	add	r30, r30
    76f8:	ff 1f       	adc	r31, r31
    76fa:	81 e0       	ldi	r24, 0x01	; 1
    76fc:	90 e0       	ldi	r25, 0x00	; 0
    76fe:	8c 0f       	add	r24, r28
    7700:	9d 1f       	adc	r25, r29
    7702:	e8 0f       	add	r30, r24
    7704:	f9 1f       	adc	r31, r25
    7706:	e0 82       	st	Z, r14
    7708:	f1 82       	std	Z+1, r15	; 0x01
				cur_task = cur_task->next;
    770a:	f7 01       	movw	r30, r14
    770c:	84 85       	ldd	r24, Z+12	; 0x0c
    770e:	95 85       	ldd	r25, Z+13	; 0x0d
				task_ptr_arr[num_periodic_tasks]->next=NULL;
    7710:	14 86       	std	Z+12, r1	; 0x0c
    7712:	15 86       	std	Z+13, r1	; 0x0d
				num_periodic_tasks++;					
    7714:	1f 5f       	subi	r17, 0xFF	; 255
			}
			else
			{
				cur_task->scheduled_time=get_time()+cur_task->period+50;
				task_ptr_arr[num_periodic_tasks] = cur_task;
				cur_task = cur_task->next;
    7716:	7c 01       	movw	r14, r24
	volatile Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;		
		while (cur_task != NULL)
    7718:	e1 14       	cp	r14, r1
    771a:	f1 04       	cpc	r15, r1
    771c:	39 f6       	brne	.-114    	; 0x76ac <task_list_cleanup+0x52>
    771e:	33 c0       	rjmp	.+102    	; 0x7786 <task_list_cleanup+0x12c>
		uint8_t task_is_periodic = 0;
		for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
		{
			for(uint8_t j=0;j<num_periodic_tasks;j++)
			{
				if(&(task_storage_arr[i])==task_ptr_arr[j])
    7720:	21 91       	ld	r18, Z+
    7722:	31 91       	ld	r19, Z+
    7724:	24 17       	cp	r18, r20
    7726:	35 07       	cpc	r19, r21
    7728:	21 f0       	breq	.+8      	; 0x7732 <task_list_cleanup+0xd8>
			}
		}
		uint8_t task_is_periodic = 0;
		for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
		{
			for(uint8_t j=0;j<num_periodic_tasks;j++)
    772a:	9f 5f       	subi	r25, 0xFF	; 255
    772c:	91 13       	cpse	r25, r17
    772e:	f8 cf       	rjmp	.-16     	; 0x7720 <task_list_cleanup+0xc6>
    7730:	37 c0       	rjmp	.+110    	; 0x77a0 <task_list_cleanup+0x146>
    7732:	fe e0       	ldi	r31, 0x0E	; 14
    7734:	ef 0e       	add	r14, r31
    7736:	f1 1c       	adc	r15, r1
				task_ptr_arr[num_periodic_tasks]->next=NULL;
				num_periodic_tasks++;					
			}
		}
		uint8_t task_is_periodic = 0;
		for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
    7738:	ec 14       	cp	r14, r12
    773a:	fd 04       	cpc	r15, r13
    773c:	61 f0       	breq	.+24     	; 0x7756 <task_list_cleanup+0xfc>
		{
			for(uint8_t j=0;j<num_periodic_tasks;j++)
    773e:	11 23       	and	r17, r17
    7740:	79 f1       	breq	.+94     	; 0x77a0 <task_list_cleanup+0x146>
			{
				if(&(task_storage_arr[i])==task_ptr_arr[j])
    7742:	a7 01       	movw	r20, r14
    7744:	89 81       	ldd	r24, Y+1	; 0x01
    7746:	9a 81       	ldd	r25, Y+2	; 0x02
    7748:	e8 16       	cp	r14, r24
    774a:	f9 06       	cpc	r15, r25
    774c:	91 f3       	breq	.-28     	; 0x7732 <task_list_cleanup+0xd8>
    774e:	fe 01       	movw	r30, r28
    7750:	33 96       	adiw	r30, 0x03	; 3
    7752:	90 e0       	ldi	r25, 0x00	; 0
    7754:	ea cf       	rjmp	.-44     	; 0x772a <task_list_cleanup+0xd0>
				//printf_P(PSTR("\tClearing memory of task %X.\r\n"), &(task_storage_arr[i]));
				remove_task(&(task_storage_arr[i]));
			}
			task_is_periodic = 0;
		}
		num_tasks = 0;
    7756:	10 92 22 26 	sts	0x2622, r1
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
    775a:	10 92 d3 28 	sts	0x28D3, r1
    775e:	10 92 d4 28 	sts	0x28D4, r1
		for(uint8_t i=0;i<num_periodic_tasks;i++)
    7762:	11 23       	and	r17, r17
    7764:	69 f0       	breq	.+26     	; 0x7780 <task_list_cleanup+0x126>
    7766:	ce 01       	movw	r24, r28
    7768:	01 96       	adiw	r24, 0x01	; 1
    776a:	6c 01       	movw	r12, r24
    776c:	f1 2c       	mov	r15, r1
		{
			add_task_to_list(task_ptr_arr[i]);
    776e:	f6 01       	movw	r30, r12
    7770:	81 91       	ld	r24, Z+
    7772:	91 91       	ld	r25, Z+
    7774:	6f 01       	movw	r12, r30
    7776:	0e 94 3d 3a 	call	0x747a	; 0x747a <add_task_to_list>
			}
			task_is_periodic = 0;
		}
		num_tasks = 0;
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
		for(uint8_t i=0;i<num_periodic_tasks;i++)
    777a:	f3 94       	inc	r15
    777c:	f1 12       	cpse	r15, r17
    777e:	f7 cf       	rjmp	.-18     	; 0x776e <task_list_cleanup+0x114>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7780:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    7782:	12 c0       	rjmp	.+36     	; 0x77a8 <task_list_cleanup+0x14e>
	volatile Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;		
		while (cur_task != NULL)
    7784:	10 e0       	ldi	r17, 0x00	; 0
    7786:	0f 2e       	mov	r0, r31
    7788:	f8 eb       	ldi	r31, 0xB8	; 184
    778a:	ef 2e       	mov	r14, r31
    778c:	f3 e2       	ldi	r31, 0x23	; 35
    778e:	ff 2e       	mov	r15, r31
    7790:	f0 2d       	mov	r31, r0
    7792:	0f 2e       	mov	r0, r31
    7794:	f4 e4       	ldi	r31, 0x44	; 68
    7796:	cf 2e       	mov	r12, r31
    7798:	f4 e2       	ldi	r31, 0x24	; 36
    779a:	df 2e       	mov	r13, r31
    779c:	f0 2d       	mov	r31, r0
    779e:	cf cf       	rjmp	.-98     	; 0x773e <task_list_cleanup+0xe4>
				}
			}	
			if(!task_is_periodic)
			{
				//printf_P(PSTR("\tClearing memory of task %X.\r\n"), &(task_storage_arr[i]));
				remove_task(&(task_storage_arr[i]));
    77a0:	c7 01       	movw	r24, r14
    77a2:	0e 94 8a 39 	call	0x7314	; 0x7314 <remove_task>
    77a6:	c5 cf       	rjmp	.-118    	; 0x7732 <task_list_cleanup+0xd8>
		for(uint8_t i=0;i<num_periodic_tasks;i++)
		{
			add_task_to_list(task_ptr_arr[i]);
		}
	}
}
    77a8:	64 96       	adiw	r28, 0x14	; 20
    77aa:	cd bf       	out	0x3d, r28	; 61
    77ac:	de bf       	out	0x3e, r29	; 62
    77ae:	df 91       	pop	r29
    77b0:	cf 91       	pop	r28
    77b2:	1f 91       	pop	r17
    77b4:	0f 91       	pop	r16
    77b6:	ff 90       	pop	r15
    77b8:	ef 90       	pop	r14
    77ba:	df 90       	pop	r13
    77bc:	cf 90       	pop	r12
    77be:	bf 90       	pop	r11
    77c0:	af 90       	pop	r10
    77c2:	9f 90       	pop	r9
    77c4:	8f 90       	pop	r8
    77c6:	08 95       	ret

000077c8 <schedule_task>:
// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* schedule_task(uint32_t time, void (*function)(), void* arg)
{	
    77c8:	5f 92       	push	r5
    77ca:	6f 92       	push	r6
    77cc:	7f 92       	push	r7
    77ce:	8f 92       	push	r8
    77d0:	9f 92       	push	r9
    77d2:	af 92       	push	r10
    77d4:	bf 92       	push	r11
    77d6:	cf 92       	push	r12
    77d8:	df 92       	push	r13
    77da:	ef 92       	push	r14
    77dc:	ff 92       	push	r15
    77de:	0f 93       	push	r16
    77e0:	1f 93       	push	r17
    77e2:	cf 93       	push	r28
    77e4:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    77e6:	5f b6       	in	r5, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    77e8:	f8 94       	cli
#include "scheduler.h"

static volatile Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    77ea:	e0 91 22 26 	lds	r30, 0x2622
    77ee:	ea 30       	cpi	r30, 0x0A	; 10
    77f0:	b8 f5       	brcc	.+110    	; 0x7860 <schedule_task+0x98>
    77f2:	89 01       	movw	r16, r18
    77f4:	3a 01       	movw	r6, r20
    77f6:	6b 01       	movw	r12, r22
    77f8:	7c 01       	movw	r14, r24

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++)
	{
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_function) == NULL)
    77fa:	80 91 c0 23 	lds	r24, 0x23C0
    77fe:	90 91 c1 23 	lds	r25, 0x23C1
    7802:	89 2b       	or	r24, r25
    7804:	b1 f0       	breq	.+44     	; 0x7832 <schedule_task+0x6a>
    7806:	81 e0       	ldi	r24, 0x01	; 1
    7808:	90 e0       	ldi	r25, 0x00	; 0
    780a:	9c 01       	movw	r18, r24
    780c:	ac 01       	movw	r20, r24
    780e:	44 0f       	add	r20, r20
    7810:	55 1f       	adc	r21, r21
    7812:	fa 01       	movw	r30, r20
    7814:	ee 0f       	add	r30, r30
    7816:	ff 1f       	adc	r31, r31
    7818:	ee 0f       	add	r30, r30
    781a:	ff 1f       	adc	r31, r31
    781c:	ee 0f       	add	r30, r30
    781e:	ff 1f       	adc	r31, r31
    7820:	e4 1b       	sub	r30, r20
    7822:	f5 0b       	sbc	r31, r21
    7824:	e8 54       	subi	r30, 0x48	; 72
    7826:	fc 4d       	sbci	r31, 0xDC	; 220
    7828:	40 85       	ldd	r20, Z+8	; 0x08
    782a:	51 85       	ldd	r21, Z+9	; 0x09
    782c:	45 2b       	or	r20, r21
    782e:	99 f4       	brne	.+38     	; 0x7856 <schedule_task+0x8e>
    7830:	02 c0       	rjmp	.+4      	; 0x7836 <schedule_task+0x6e>
    7832:	20 e0       	ldi	r18, 0x00	; 0
    7834:	30 e0       	ldi	r19, 0x00	; 0
		{
			return &(task_storage_arr[tmp]);
    7836:	22 0f       	add	r18, r18
    7838:	33 1f       	adc	r19, r19
    783a:	e9 01       	movw	r28, r18
    783c:	cc 0f       	add	r28, r28
    783e:	dd 1f       	adc	r29, r29
    7840:	cc 0f       	add	r28, r28
    7842:	dd 1f       	adc	r29, r29
    7844:	cc 0f       	add	r28, r28
    7846:	dd 1f       	adc	r29, r29
    7848:	c2 1b       	sub	r28, r18
    784a:	d3 0b       	sbc	r29, r19
    784c:	c8 54       	subi	r28, 0x48	; 72
    784e:	dc 4d       	sbci	r29, 0xDC	; 220
{	
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    7850:	20 97       	sbiw	r28, 0x00	; 0
    7852:	51 f4       	brne	.+20     	; 0x7868 <schedule_task+0xa0>
    7854:	05 c0       	rjmp	.+10     	; 0x7860 <schedule_task+0x98>
    7856:	01 96       	adiw	r24, 0x01	; 1

static volatile Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++)
    7858:	8a 30       	cpi	r24, 0x0A	; 10
    785a:	91 05       	cpc	r25, r1
    785c:	b1 f6       	brne	.-84     	; 0x780a <schedule_task+0x42>
    785e:	08 c0       	rjmp	.+16     	; 0x7870 <schedule_task+0xa8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7860:	5f be       	out	0x3f, r5	; 63
{	
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    7862:	80 e0       	ldi	r24, 0x00	; 0
    7864:	90 e0       	ldi	r25, 0x00	; 0
    7866:	51 c0       	rjmp	.+162    	; 0x790a <schedule_task+0x142>
		else if(new_task == ((volatile Task_t*)0xFFFF)) 
    7868:	cf 3f       	cpi	r28, 0xFF	; 255
    786a:	8f ef       	ldi	r24, 0xFF	; 255
    786c:	d8 07       	cpc	r29, r24
    786e:	69 f4       	brne	.+26     	; 0x788a <schedule_task+0xc2>
		{
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    7870:	89 ed       	ldi	r24, 0xD9	; 217
    7872:	98 e0       	ldi	r25, 0x08	; 8
    7874:	9f 93       	push	r25
    7876:	8f 93       	push	r24
    7878:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
			task_list_cleanup();
    787c:	0e 94 2d 3b 	call	0x765a	; 0x765a <task_list_cleanup>
    7880:	0f 90       	pop	r0
    7882:	0f 90       	pop	r0
    7884:	cf ef       	ldi	r28, 0xFF	; 255
    7886:	df ef       	ldi	r29, 0xFF	; 255
    7888:	11 c0       	rjmp	.+34     	; 0x78ac <schedule_task+0xe4>
		}
		else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))
    788a:	83 e2       	ldi	r24, 0x23	; 35
    788c:	c8 3b       	cpi	r28, 0xB8	; 184
    788e:	d8 07       	cpc	r29, r24
    7890:	28 f0       	brcs	.+10     	; 0x789c <schedule_task+0xd4>
    7892:	84 e2       	ldi	r24, 0x24	; 36
    7894:	c6 33       	cpi	r28, 0x36	; 54
    7896:	d8 07       	cpc	r29, r24
    7898:	49 f0       	breq	.+18     	; 0x78ac <schedule_task+0xe4>
    789a:	40 f0       	brcs	.+16     	; 0x78ac <schedule_task+0xe4>
		{
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    789c:	80 e8       	ldi	r24, 0x80	; 128
    789e:	98 e0       	ldi	r25, 0x08	; 8
    78a0:	9f 93       	push	r25
    78a2:	8f 93       	push	r24
    78a4:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    78a8:	0f 90       	pop	r0
    78aa:	0f 90       	pop	r0
		}

		time+=MIN_TASK_TIME_IN_FUTURE*(time<MIN_TASK_TIME_IN_FUTURE);	
    78ac:	84 e1       	ldi	r24, 0x14	; 20
    78ae:	c8 16       	cp	r12, r24
    78b0:	d1 04       	cpc	r13, r1
    78b2:	e1 04       	cpc	r14, r1
    78b4:	f1 04       	cpc	r15, r1
    78b6:	20 f0       	brcs	.+8      	; 0x78c0 <schedule_task+0xf8>
    78b8:	81 2c       	mov	r8, r1
    78ba:	91 2c       	mov	r9, r1
    78bc:	54 01       	movw	r10, r8
    78be:	07 c0       	rjmp	.+14     	; 0x78ce <schedule_task+0x106>
    78c0:	0f 2e       	mov	r0, r31
    78c2:	f4 e1       	ldi	r31, 0x14	; 20
    78c4:	8f 2e       	mov	r8, r31
    78c6:	91 2c       	mov	r9, r1
    78c8:	a1 2c       	mov	r10, r1
    78ca:	b1 2c       	mov	r11, r1
    78cc:	f0 2d       	mov	r31, r0
		new_task->scheduled_time = time + get_time();
    78ce:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    78d2:	86 0e       	add	r8, r22
    78d4:	97 1e       	adc	r9, r23
    78d6:	a8 1e       	adc	r10, r24
    78d8:	b9 1e       	adc	r11, r25
    78da:	c8 0c       	add	r12, r8
    78dc:	d9 1c       	adc	r13, r9
    78de:	ea 1c       	adc	r14, r10
    78e0:	fb 1c       	adc	r15, r11
    78e2:	c8 82       	st	Y, r12
    78e4:	d9 82       	std	Y+1, r13	; 0x01
    78e6:	ea 82       	std	Y+2, r14	; 0x02
    78e8:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    78ea:	0a 87       	std	Y+10, r16	; 0x0a
    78ec:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func.noarg_function = function;
    78ee:	68 86       	std	Y+8, r6	; 0x08
    78f0:	79 86       	std	Y+9, r7	; 0x09
		new_task->period = 0;
    78f2:	1c 82       	std	Y+4, r1	; 0x04
    78f4:	1d 82       	std	Y+5, r1	; 0x05
    78f6:	1e 82       	std	Y+6, r1	; 0x06
    78f8:	1f 82       	std	Y+7, r1	; 0x07
		new_task->next = NULL; 		
    78fa:	1c 86       	std	Y+12, r1	; 0x0c
    78fc:	1d 86       	std	Y+13, r1	; 0x0d
    78fe:	5f be       	out	0x3f, r5	; 63
	}
	add_task_to_list(new_task);
    7900:	ce 01       	movw	r24, r28
    7902:	0e 94 3d 3a 	call	0x747a	; 0x747a <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    7906:	8c 2f       	mov	r24, r28
    7908:	9d 2f       	mov	r25, r29
}
    790a:	df 91       	pop	r29
    790c:	cf 91       	pop	r28
    790e:	1f 91       	pop	r17
    7910:	0f 91       	pop	r16
    7912:	ff 90       	pop	r15
    7914:	ef 90       	pop	r14
    7916:	df 90       	pop	r13
    7918:	cf 90       	pop	r12
    791a:	bf 90       	pop	r11
    791c:	af 90       	pop	r10
    791e:	9f 90       	pop	r9
    7920:	8f 90       	pop	r8
    7922:	7f 90       	pop	r7
    7924:	6f 90       	pop	r6
    7926:	5f 90       	pop	r5
    7928:	08 95       	ret

0000792a <schedule_periodic_task>:

volatile Task_t* schedule_periodic_task(uint32_t period, void (*function)(), void* arg)
{
    792a:	cf 92       	push	r12
    792c:	df 92       	push	r13
    792e:	ef 92       	push	r14
    7930:	ff 92       	push	r15
	period+=MIN_TASK_TIME_IN_FUTURE*(period<MIN_TASK_TIME_IN_FUTURE);	
    7932:	64 31       	cpi	r22, 0x14	; 20
    7934:	71 05       	cpc	r23, r1
    7936:	81 05       	cpc	r24, r1
    7938:	91 05       	cpc	r25, r1
    793a:	20 f0       	brcs	.+8      	; 0x7944 <schedule_periodic_task+0x1a>
    793c:	c1 2c       	mov	r12, r1
    793e:	d1 2c       	mov	r13, r1
    7940:	76 01       	movw	r14, r12
    7942:	07 c0       	rjmp	.+14     	; 0x7952 <schedule_periodic_task+0x28>
    7944:	0f 2e       	mov	r0, r31
    7946:	f4 e1       	ldi	r31, 0x14	; 20
    7948:	cf 2e       	mov	r12, r31
    794a:	d1 2c       	mov	r13, r1
    794c:	e1 2c       	mov	r14, r1
    794e:	f1 2c       	mov	r15, r1
    7950:	f0 2d       	mov	r31, r0
    7952:	c6 0e       	add	r12, r22
    7954:	d7 1e       	adc	r13, r23
    7956:	e8 1e       	adc	r14, r24
    7958:	f9 1e       	adc	r15, r25
	volatile Task_t* new_task = schedule_task(period, function, arg);
    795a:	c7 01       	movw	r24, r14
    795c:	b6 01       	movw	r22, r12
    795e:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
	new_task->period=period;
    7962:	fc 01       	movw	r30, r24
    7964:	c4 82       	std	Z+4, r12	; 0x04
    7966:	d5 82       	std	Z+5, r13	; 0x05
    7968:	e6 82       	std	Z+6, r14	; 0x06
    796a:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    796c:	ff 90       	pop	r15
    796e:	ef 90       	pop	r14
    7970:	df 90       	pop	r13
    7972:	cf 90       	pop	r12
    7974:	08 95       	ret

00007976 <run_tasks>:
}

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks()
{
    7976:	2f 92       	push	r2
    7978:	3f 92       	push	r3
    797a:	4f 92       	push	r4
    797c:	5f 92       	push	r5
    797e:	6f 92       	push	r6
    7980:	7f 92       	push	r7
    7982:	8f 92       	push	r8
    7984:	9f 92       	push	r9
    7986:	af 92       	push	r10
    7988:	bf 92       	push	r11
    798a:	cf 92       	push	r12
    798c:	df 92       	push	r13
    798e:	ef 92       	push	r14
    7990:	ff 92       	push	r15
    7992:	0f 93       	push	r16
    7994:	1f 93       	push	r17
    7996:	cf 93       	push	r28
    7998:	df 93       	push	r29
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    799a:	6f b6       	in	r6, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    799c:	f8 94       	cli
    799e:	0f 2e       	mov	r0, r31
    79a0:	f8 eb       	ldi	r31, 0xB8	; 184
    79a2:	8f 2e       	mov	r8, r31
    79a4:	f3 e2       	ldi	r31, 0x23	; 35
    79a6:	9f 2e       	mov	r9, r31
    79a8:	f0 2d       	mov	r31, r0
				{
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
					{
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    79aa:	0f 2e       	mov	r0, r31
    79ac:	f6 e7       	ldi	r31, 0x76	; 118
    79ae:	cf 2e       	mov	r12, r31
    79b0:	f7 e0       	ldi	r31, 0x07	; 7
    79b2:	df 2e       	mov	r13, r31
    79b4:	f0 2d       	mov	r31, r0
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    79b6:	0f 2e       	mov	r0, r31
    79b8:	f2 e2       	ldi	r31, 0x22	; 34
    79ba:	ef 2e       	mov	r14, r31
    79bc:	f3 e2       	ldi	r31, 0x23	; 35
    79be:	ff 2e       	mov	r15, r31
    79c0:	f0 2d       	mov	r31, r0
				{
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
					{
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    79c2:	0f 2e       	mov	r0, r31
    79c4:	fe e0       	ldi	r31, 0x0E	; 14
    79c6:	7f 2e       	mov	r7, r31
    79c8:	f0 2d       	mov	r31, r0
    79ca:	0f 2e       	mov	r0, r31
    79cc:	fe ef       	ldi	r31, 0xFE	; 254
    79ce:	af 2e       	mov	r10, r31
    79d0:	f6 e0       	ldi	r31, 0x06	; 6
    79d2:	bf 2e       	mov	r11, r31
    79d4:	f0 2d       	mov	r31, r0
    79d6:	07 c1       	rjmp	.+526    	; 0x7be6 <run_tasks+0x270>
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
		{
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
			{
				if(((uint16_t)(task_storage_arr[i].func.noarg_function))!=0)
    79d8:	ce 01       	movw	r24, r28
    79da:	88 0f       	add	r24, r24
    79dc:	99 1f       	adc	r25, r25
    79de:	fc 01       	movw	r30, r24
    79e0:	ee 0f       	add	r30, r30
    79e2:	ff 1f       	adc	r31, r31
    79e4:	ee 0f       	add	r30, r30
    79e6:	ff 1f       	adc	r31, r31
    79e8:	ee 0f       	add	r30, r30
    79ea:	ff 1f       	adc	r31, r31
    79ec:	e8 1b       	sub	r30, r24
    79ee:	f9 0b       	sbc	r31, r25
    79f0:	e8 54       	subi	r30, 0x48	; 72
    79f2:	fc 4d       	sbci	r31, 0xDC	; 220
    79f4:	80 85       	ldd	r24, Z+8	; 0x08
    79f6:	91 85       	ldd	r25, Z+9	; 0x09
    79f8:	89 2b       	or	r24, r25
    79fa:	79 f1       	breq	.+94     	; 0x7a5a <run_tasks+0xe4>
				{
					num_slots_used++;
    79fc:	53 94       	inc	r5
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    79fe:	ce 01       	movw	r24, r28
    7a00:	88 0f       	add	r24, r24
    7a02:	99 1f       	adc	r25, r25
    7a04:	fc 01       	movw	r30, r24
    7a06:	ee 0f       	add	r30, r30
    7a08:	ff 1f       	adc	r31, r31
    7a0a:	ee 0f       	add	r30, r30
    7a0c:	ff 1f       	adc	r31, r31
    7a0e:	ee 0f       	add	r30, r30
    7a10:	ff 1f       	adc	r31, r31
    7a12:	e8 1b       	sub	r30, r24
    7a14:	f9 0b       	sbc	r31, r25
    7a16:	e8 54       	subi	r30, 0x48	; 72
    7a18:	fc 4d       	sbci	r31, 0xDC	; 220
    7a1a:	84 85       	ldd	r24, Z+12	; 0x0c
    7a1c:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
    7a1e:	00 97       	sbiw	r24, 0x00	; 0
    7a20:	e1 f0       	breq	.+56     	; 0x7a5a <run_tasks+0xe4>
    7a22:	23 e2       	ldi	r18, 0x23	; 35
    7a24:	88 3b       	cpi	r24, 0xB8	; 184
    7a26:	92 07       	cpc	r25, r18
    7a28:	20 f0       	brcs	.+8      	; 0x7a32 <run_tasks+0xbc>
    7a2a:	86 53       	subi	r24, 0x36	; 54
    7a2c:	94 42       	sbci	r25, 0x24	; 36
    7a2e:	a9 f0       	breq	.+42     	; 0x7a5a <run_tasks+0xe4>
    7a30:	a0 f0       	brcs	.+40     	; 0x7a5a <run_tasks+0xe4>
					{
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    7a32:	df 92       	push	r13
    7a34:	cf 92       	push	r12
    7a36:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    7a3a:	1f 93       	push	r17
    7a3c:	0f 93       	push	r16
    7a3e:	ff 92       	push	r15
    7a40:	ef 92       	push	r14
    7a42:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
						delay_ms(10);
    7a46:	8a e0       	ldi	r24, 0x0A	; 10
    7a48:	90 e0       	ldi	r25, 0x00	; 0
    7a4a:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    7a4e:	0f 90       	pop	r0
    7a50:	0f 90       	pop	r0
    7a52:	0f 90       	pop	r0
    7a54:	0f 90       	pop	r0
    7a56:	0f 90       	pop	r0
    7a58:	0f 90       	pop	r0
    7a5a:	21 96       	adiw	r28, 0x01	; 1
    7a5c:	02 5f       	subi	r16, 0xF2	; 242
    7a5e:	1f 4f       	sbci	r17, 0xFF	; 255
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
		{
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
    7a60:	ca 30       	cpi	r28, 0x0A	; 10
    7a62:	d1 05       	cpc	r29, r1
    7a64:	09 f0       	breq	.+2      	; 0x7a68 <run_tasks+0xf2>
    7a66:	b8 cf       	rjmp	.-144    	; 0x79d8 <run_tasks+0x62>
						delay_ms(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks)
    7a68:	80 91 22 26 	lds	r24, 0x2622
    7a6c:	58 16       	cp	r5, r24
    7a6e:	49 f0       	breq	.+18     	; 0x7a82 <run_tasks+0x10c>
			{
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    7a70:	8b e3       	ldi	r24, 0x3B	; 59
    7a72:	97 e0       	ldi	r25, 0x07	; 7
    7a74:	9f 93       	push	r25
    7a76:	8f 93       	push	r24
    7a78:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
				return -1;
    7a7c:	0f 90       	pop	r0
    7a7e:	0f 90       	pop	r0
    7a80:	08 c1       	rjmp	.+528    	; 0x7c92 <run_tasks+0x31c>
			}			
			cur_task = task_list;
    7a82:	c0 91 d3 28 	lds	r28, 0x28D3
    7a86:	d0 91 d4 28 	lds	r29, 0x28D4
			task_list = cur_task->next;
    7a8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    7a8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    7a8e:	80 93 d3 28 	sts	0x28D3, r24
    7a92:	90 93 d4 28 	sts	0x28D4, r25

			if(cur_task->arg==NULL)
    7a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a9a:	89 2b       	or	r24, r25
    7a9c:	39 f4       	brne	.+14     	; 0x7aac <run_tasks+0x136>
			{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE) // Enable interrupts during tasks
    7a9e:	1f b7       	in	r17, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    7aa0:	78 94       	sei
				{
					(cur_task->func).noarg_function(); // run the task
    7aa2:	e8 85       	ldd	r30, Y+8	; 0x08
    7aa4:	f9 85       	ldd	r31, Y+9	; 0x09
    7aa6:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7aa8:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    7aaa:	08 c0       	rjmp	.+16     	; 0x7abc <run_tasks+0x146>
				}
			}
			else
			{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE) // Enable interrupts during tasks
    7aac:	1f b7       	in	r17, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    7aae:	78 94       	sei
				{
					(cur_task->func).arg_function(cur_task->arg); // run the task
    7ab0:	e8 85       	ldd	r30, Y+8	; 0x08
    7ab2:	f9 85       	ldd	r31, Y+9	; 0x09
    7ab4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ab6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ab8:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7aba:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0)
    7abc:	8c 81       	ldd	r24, Y+4	; 0x04
    7abe:	9d 81       	ldd	r25, Y+5	; 0x05
    7ac0:	ae 81       	ldd	r26, Y+6	; 0x06
    7ac2:	bf 81       	ldd	r27, Y+7	; 0x07
    7ac4:	89 2b       	or	r24, r25
    7ac6:	8a 2b       	or	r24, r26
    7ac8:	8b 2b       	or	r24, r27
    7aca:	d9 f0       	breq	.+54     	; 0x7b02 <run_tasks+0x18c>
			{
				cur_task->scheduled_time+=cur_task->period;
    7acc:	8c 81       	ldd	r24, Y+4	; 0x04
    7ace:	9d 81       	ldd	r25, Y+5	; 0x05
    7ad0:	ae 81       	ldd	r26, Y+6	; 0x06
    7ad2:	bf 81       	ldd	r27, Y+7	; 0x07
    7ad4:	48 81       	ld	r20, Y
    7ad6:	59 81       	ldd	r21, Y+1	; 0x01
    7ad8:	6a 81       	ldd	r22, Y+2	; 0x02
    7ada:	7b 81       	ldd	r23, Y+3	; 0x03
    7adc:	84 0f       	add	r24, r20
    7ade:	95 1f       	adc	r25, r21
    7ae0:	a6 1f       	adc	r26, r22
    7ae2:	b7 1f       	adc	r27, r23
    7ae4:	88 83       	st	Y, r24
    7ae6:	99 83       	std	Y+1, r25	; 0x01
    7ae8:	aa 83       	std	Y+2, r26	; 0x02
    7aea:	bb 83       	std	Y+3, r27	; 0x03
				cur_task->next=NULL;
    7aec:	1c 86       	std	Y+12, r1	; 0x0c
    7aee:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    7af0:	80 91 22 26 	lds	r24, 0x2622
    7af4:	81 50       	subi	r24, 0x01	; 1
    7af6:	80 93 22 26 	sts	0x2622, r24
				add_task_to_list(cur_task);
    7afa:	ce 01       	movw	r24, r28
    7afc:	0e 94 3d 3a 	call	0x747a	; 0x747a <add_task_to_list>
    7b00:	cb c0       	rjmp	.+406    	; 0x7c98 <run_tasks+0x322>
			}
			else
			{		
				scheduler_free(cur_task);
    7b02:	ce 01       	movw	r24, r28
    7b04:	0e 94 13 39 	call	0x7226	; 0x7226 <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    7b08:	80 91 22 26 	lds	r24, 0x2622
    7b0c:	81 50       	subi	r24, 0x01	; 1
    7b0e:	80 93 22 26 	sts	0x2622, r24
    7b12:	c2 c0       	rjmp	.+388    	; 0x7c98 <run_tasks+0x322>
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
			{
				if(((uint16_t)(task_storage_arr[i].func.noarg_function))!=0)
    7b14:	ce 01       	movw	r24, r28
    7b16:	9e 01       	movw	r18, r28
    7b18:	22 0f       	add	r18, r18
    7b1a:	33 1f       	adc	r19, r19
    7b1c:	f9 01       	movw	r30, r18
    7b1e:	ee 0f       	add	r30, r30
    7b20:	ff 1f       	adc	r31, r31
    7b22:	ee 0f       	add	r30, r30
    7b24:	ff 1f       	adc	r31, r31
    7b26:	ee 0f       	add	r30, r30
    7b28:	ff 1f       	adc	r31, r31
    7b2a:	e2 1b       	sub	r30, r18
    7b2c:	f3 0b       	sbc	r31, r19
    7b2e:	e8 54       	subi	r30, 0x48	; 72
    7b30:	fc 4d       	sbci	r31, 0xDC	; 220
    7b32:	20 85       	ldd	r18, Z+8	; 0x08
    7b34:	31 85       	ldd	r19, Z+9	; 0x09
    7b36:	23 2b       	or	r18, r19
    7b38:	09 f4       	brne	.+2      	; 0x7b3c <run_tasks+0x1c6>
    7b3a:	43 c0       	rjmp	.+134    	; 0x7bc2 <run_tasks+0x24c>
				{
					num_slots_used++;
    7b3c:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    7b3e:	9e 01       	movw	r18, r28
    7b40:	22 0f       	add	r18, r18
    7b42:	33 1f       	adc	r19, r19
    7b44:	f9 01       	movw	r30, r18
    7b46:	ee 0f       	add	r30, r30
    7b48:	ff 1f       	adc	r31, r31
    7b4a:	ee 0f       	add	r30, r30
    7b4c:	ff 1f       	adc	r31, r31
    7b4e:	ee 0f       	add	r30, r30
    7b50:	ff 1f       	adc	r31, r31
    7b52:	e2 1b       	sub	r30, r18
    7b54:	f3 0b       	sbc	r31, r19
    7b56:	e8 54       	subi	r30, 0x48	; 72
    7b58:	fc 4d       	sbci	r31, 0xDC	; 220
    7b5a:	24 85       	ldd	r18, Z+12	; 0x0c
    7b5c:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
    7b5e:	21 15       	cp	r18, r1
    7b60:	31 05       	cpc	r19, r1
    7b62:	79 f1       	breq	.+94     	; 0x7bc2 <run_tasks+0x24c>
    7b64:	43 e2       	ldi	r20, 0x23	; 35
    7b66:	28 3b       	cpi	r18, 0xB8	; 184
    7b68:	34 07       	cpc	r19, r20
    7b6a:	20 f0       	brcs	.+8      	; 0x7b74 <run_tasks+0x1fe>
    7b6c:	26 53       	subi	r18, 0x36	; 54
    7b6e:	34 42       	sbci	r19, 0x24	; 36
    7b70:	41 f1       	breq	.+80     	; 0x7bc2 <run_tasks+0x24c>
    7b72:	38 f1       	brcs	.+78     	; 0x7bc2 <run_tasks+0x24c>
					{
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    7b74:	88 0f       	add	r24, r24
    7b76:	99 1f       	adc	r25, r25
    7b78:	fc 01       	movw	r30, r24
    7b7a:	ee 0f       	add	r30, r30
    7b7c:	ff 1f       	adc	r31, r31
    7b7e:	ee 0f       	add	r30, r30
    7b80:	ff 1f       	adc	r31, r31
    7b82:	ee 0f       	add	r30, r30
    7b84:	ff 1f       	adc	r31, r31
    7b86:	e8 1b       	sub	r30, r24
    7b88:	f9 0b       	sbc	r31, r25
    7b8a:	e8 54       	subi	r30, 0x48	; 72
    7b8c:	fc 4d       	sbci	r31, 0xDC	; 220
    7b8e:	8d b7       	in	r24, 0x3d	; 61
    7b90:	9e b7       	in	r25, 0x3e	; 62
    7b92:	0e 97       	sbiw	r24, 0x0e	; 14
    7b94:	8d bf       	out	0x3d, r24	; 61
    7b96:	9e bf       	out	0x3e, r25	; 62
    7b98:	ad b7       	in	r26, 0x3d	; 61
    7b9a:	be b7       	in	r27, 0x3e	; 62
    7b9c:	11 96       	adiw	r26, 0x01	; 1
    7b9e:	87 2d       	mov	r24, r7
    7ba0:	01 90       	ld	r0, Z+
    7ba2:	0d 92       	st	X+, r0
    7ba4:	8a 95       	dec	r24
    7ba6:	e1 f7       	brne	.-8      	; 0x7ba0 <run_tasks+0x22a>
    7ba8:	bf 92       	push	r11
    7baa:	af 92       	push	r10
    7bac:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
						delay_ms(10);
    7bb0:	8a e0       	ldi	r24, 0x0A	; 10
    7bb2:	90 e0       	ldi	r25, 0x00	; 0
    7bb4:	0e 94 ed 38 	call	0x71da	; 0x71da <delay_ms>
    7bb8:	8d b7       	in	r24, 0x3d	; 61
    7bba:	9e b7       	in	r25, 0x3e	; 62
    7bbc:	40 96       	adiw	r24, 0x10	; 16
    7bbe:	8d bf       	out	0x3d, r24	; 61
    7bc0:	9e bf       	out	0x3e, r25	; 62
    7bc2:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
    7bc4:	ca 30       	cpi	r28, 0x0A	; 10
    7bc6:	d1 05       	cpc	r29, r1
    7bc8:	09 f0       	breq	.+2      	; 0x7bcc <run_tasks+0x256>
    7bca:	a4 cf       	rjmp	.-184    	; 0x7b14 <run_tasks+0x19e>
						delay_ms(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks)
    7bcc:	80 91 22 26 	lds	r24, 0x2622
    7bd0:	81 17       	cp	r24, r17
    7bd2:	49 f0       	breq	.+18     	; 0x7be6 <run_tasks+0x270>
			{
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    7bd4:	80 ec       	ldi	r24, 0xC0	; 192
    7bd6:	96 e0       	ldi	r25, 0x06	; 6
    7bd8:	9f 93       	push	r25
    7bda:	8f 93       	push	r24
    7bdc:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
				return -1;
    7be0:	0f 90       	pop	r0
    7be2:	0f 90       	pop	r0
    7be4:	56 c0       	rjmp	.+172    	; 0x7c92 <run_tasks+0x31c>
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    7be6:	e0 91 d3 28 	lds	r30, 0x28D3
    7bea:	f0 91 d4 28 	lds	r31, 0x28D4
    7bee:	30 97       	sbiw	r30, 0x00	; 0
    7bf0:	09 f4       	brne	.+2      	; 0x7bf4 <run_tasks+0x27e>
    7bf2:	49 c0       	rjmp	.+146    	; 0x7c86 <run_tasks+0x310>
    7bf4:	20 80       	ld	r2, Z
    7bf6:	31 80       	ldd	r3, Z+1	; 0x01
    7bf8:	42 80       	ldd	r4, Z+2	; 0x02
    7bfa:	53 80       	ldd	r5, Z+3	; 0x03
    7bfc:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    7c00:	dc 01       	movw	r26, r24
    7c02:	cb 01       	movw	r24, r22
    7c04:	02 96       	adiw	r24, 0x02	; 2
    7c06:	a1 1d       	adc	r26, r1
    7c08:	b1 1d       	adc	r27, r1
    7c0a:	82 15       	cp	r24, r2
    7c0c:	93 05       	cpc	r25, r3
    7c0e:	a4 05       	cpc	r26, r4
    7c10:	b5 05       	cpc	r27, r5
    7c12:	28 f0       	brcs	.+10     	; 0x7c1e <run_tasks+0x2a8>
    7c14:	84 01       	movw	r16, r8
    7c16:	c0 e0       	ldi	r28, 0x00	; 0
    7c18:	d0 e0       	ldi	r29, 0x00	; 0
    7c1a:	51 2c       	mov	r5, r1
    7c1c:	dd ce       	rjmp	.-582    	; 0x79d8 <run_tasks+0x62>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}			
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt		
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    7c1e:	c0 91 d3 28 	lds	r28, 0x28D3
    7c22:	d0 91 d4 28 	lds	r29, 0x28D4
    7c26:	20 97       	sbiw	r28, 0x00	; 0
    7c28:	71 f1       	breq	.+92     	; 0x7c86 <run_tasks+0x310>
    7c2a:	08 81       	ld	r16, Y
    7c2c:	19 81       	ldd	r17, Y+1	; 0x01
    7c2e:	2a 81       	ldd	r18, Y+2	; 0x02
    7c30:	3b 81       	ldd	r19, Y+3	; 0x03
    7c32:	80 91 48 24 	lds	r24, 0x2448
    7c36:	90 91 49 24 	lds	r25, 0x2449
    7c3a:	40 91 0a 04 	lds	r20, 0x040A
    7c3e:	50 91 0b 04 	lds	r21, 0x040B
    7c42:	a0 e0       	ldi	r26, 0x00	; 0
    7c44:	b0 e0       	ldi	r27, 0x00	; 0
    7c46:	dc 01       	movw	r26, r24
    7c48:	99 27       	eor	r25, r25
    7c4a:	88 27       	eor	r24, r24
    7c4c:	60 e0       	ldi	r22, 0x00	; 0
    7c4e:	70 e0       	ldi	r23, 0x00	; 0
    7c50:	84 2b       	or	r24, r20
    7c52:	95 2b       	or	r25, r21
    7c54:	a6 2b       	or	r26, r22
    7c56:	b7 2b       	or	r27, r23
    7c58:	80 17       	cp	r24, r16
    7c5a:	91 07       	cpc	r25, r17
    7c5c:	a2 07       	cpc	r26, r18
    7c5e:	b3 07       	cpc	r27, r19
    7c60:	90 f0       	brcs	.+36     	; 0x7c86 <run_tasks+0x310>
		{	
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7c62:	e0 e0       	ldi	r30, 0x00	; 0
    7c64:	f4 e0       	ldi	r31, 0x04	; 4
    7c66:	81 81       	ldd	r24, Z+1	; 0x01
    7c68:	80 fd       	sbrc	r24, 0
    7c6a:	fd cf       	rjmp	.-6      	; 0x7c66 <run_tasks+0x2f0>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    7c6c:	88 81       	ld	r24, Y
    7c6e:	99 81       	ldd	r25, Y+1	; 0x01
    7c70:	aa 81       	ldd	r26, Y+2	; 0x02
    7c72:	bb 81       	ldd	r27, Y+3	; 0x03
    7c74:	88 60       	ori	r24, 0x08	; 8
    7c76:	e0 e0       	ldi	r30, 0x00	; 0
    7c78:	f4 e0       	ldi	r31, 0x04	; 4
    7c7a:	84 87       	std	Z+12, r24	; 0x0c
    7c7c:	95 87       	std	Z+13, r25	; 0x0d
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    7c7e:	82 81       	ldd	r24, Z+2	; 0x02
    7c80:	84 60       	ori	r24, 0x04	; 4
    7c82:	82 83       	std	Z+2, r24	; 0x02
    7c84:	0d c0       	rjmp	.+26     	; 0x7ca0 <run_tasks+0x32a>
		}
		else
		{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    7c86:	e0 e0       	ldi	r30, 0x00	; 0
    7c88:	f4 e0       	ldi	r31, 0x04	; 4
    7c8a:	82 81       	ldd	r24, Z+2	; 0x02
    7c8c:	8b 7f       	andi	r24, 0xFB	; 251
    7c8e:	82 83       	std	Z+2, r24	; 0x02
    7c90:	07 c0       	rjmp	.+14     	; 0x7ca0 <run_tasks+0x32a>
    7c92:	6f be       	out	0x3f, r6	; 63
    __asm__ volatile ("" ::: "memory");
    7c94:	8f ef       	ldi	r24, 0xFF	; 255
    7c96:	06 c0       	rjmp	.+12     	; 0x7ca4 <run_tasks+0x32e>
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    7c98:	c0 e0       	ldi	r28, 0x00	; 0
    7c9a:	d0 e0       	ldi	r29, 0x00	; 0
    7c9c:	10 e0       	ldi	r17, 0x00	; 0
    7c9e:	3a cf       	rjmp	.-396    	; 0x7b14 <run_tasks+0x19e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7ca0:	6f be       	out	0x3f, r6	; 63
		else
		{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		}
	}
	return 0;
    7ca2:	80 e0       	ldi	r24, 0x00	; 0
}
    7ca4:	df 91       	pop	r29
    7ca6:	cf 91       	pop	r28
    7ca8:	1f 91       	pop	r17
    7caa:	0f 91       	pop	r16
    7cac:	ff 90       	pop	r15
    7cae:	ef 90       	pop	r14
    7cb0:	df 90       	pop	r13
    7cb2:	cf 90       	pop	r12
    7cb4:	bf 90       	pop	r11
    7cb6:	af 90       	pop	r10
    7cb8:	9f 90       	pop	r9
    7cba:	8f 90       	pop	r8
    7cbc:	7f 90       	pop	r7
    7cbe:	6f 90       	pop	r6
    7cc0:	5f 90       	pop	r5
    7cc2:	4f 90       	pop	r4
    7cc4:	3f 90       	pop	r3
    7cc6:	2f 90       	pop	r2
    7cc8:	08 95       	ret

00007cca <__vector_11>:
		//print_task_queue();
	//}
//}

ISR(RTC_COMP_vect)
{
    7cca:	1f 92       	push	r1
    7ccc:	0f 92       	push	r0
    7cce:	0f b6       	in	r0, 0x3f	; 63
    7cd0:	0f 92       	push	r0
    7cd2:	11 24       	eor	r1, r1
    7cd4:	0b b6       	in	r0, 0x3b	; 59
    7cd6:	0f 92       	push	r0
    7cd8:	2f 93       	push	r18
    7cda:	3f 93       	push	r19
    7cdc:	4f 93       	push	r20
    7cde:	5f 93       	push	r21
    7ce0:	6f 93       	push	r22
    7ce2:	7f 93       	push	r23
    7ce4:	8f 93       	push	r24
    7ce6:	9f 93       	push	r25
    7ce8:	af 93       	push	r26
    7cea:	bf 93       	push	r27
    7cec:	ef 93       	push	r30
    7cee:	ff 93       	push	r31
	SAVE_CONTEXT();	
    7cf0:	0f 92       	push	r0
    7cf2:	0f b6       	in	r0, 0x3f	; 63
    7cf4:	f8 94       	cli
    7cf6:	0f 92       	push	r0
    7cf8:	1f 92       	push	r1
    7cfa:	11 24       	eor	r1, r1
    7cfc:	2f 92       	push	r2
    7cfe:	3f 92       	push	r3
    7d00:	4f 92       	push	r4
    7d02:	5f 92       	push	r5
    7d04:	6f 92       	push	r6
    7d06:	7f 92       	push	r7
    7d08:	8f 92       	push	r8
    7d0a:	9f 92       	push	r9
    7d0c:	af 92       	push	r10
    7d0e:	bf 92       	push	r11
    7d10:	cf 92       	push	r12
    7d12:	df 92       	push	r13
    7d14:	ef 92       	push	r14
    7d16:	ff 92       	push	r15
    7d18:	0f 93       	push	r16
    7d1a:	1f 93       	push	r17
    7d1c:	2f 93       	push	r18
    7d1e:	3f 93       	push	r19
    7d20:	4f 93       	push	r20
    7d22:	5f 93       	push	r21
    7d24:	6f 93       	push	r22
    7d26:	7f 93       	push	r23
    7d28:	8f 93       	push	r24
    7d2a:	9f 93       	push	r25
    7d2c:	af 93       	push	r26
    7d2e:	bf 93       	push	r27
    7d30:	cf 93       	push	r28
    7d32:	df 93       	push	r29
    7d34:	ef 93       	push	r30
    7d36:	ff 93       	push	r31
	task_executing=1;
    7d38:	81 e0       	ldi	r24, 0x01	; 1
    7d3a:	80 93 95 28 	sts	0x2895, r24
	/*int8_t result =*/ run_tasks();
    7d3e:	0e 94 bb 3c 	call	0x7976	; 0x7976 <run_tasks>
	task_executing=0;
    7d42:	10 92 95 28 	sts	0x2895, r1
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    7d46:	ff 91       	pop	r31
    7d48:	ef 91       	pop	r30
    7d4a:	df 91       	pop	r29
    7d4c:	cf 91       	pop	r28
    7d4e:	bf 91       	pop	r27
    7d50:	af 91       	pop	r26
    7d52:	9f 91       	pop	r25
    7d54:	8f 91       	pop	r24
    7d56:	7f 91       	pop	r23
    7d58:	6f 91       	pop	r22
    7d5a:	5f 91       	pop	r21
    7d5c:	4f 91       	pop	r20
    7d5e:	3f 91       	pop	r19
    7d60:	2f 91       	pop	r18
    7d62:	1f 91       	pop	r17
    7d64:	0f 91       	pop	r16
    7d66:	ff 90       	pop	r15
    7d68:	ef 90       	pop	r14
    7d6a:	df 90       	pop	r13
    7d6c:	cf 90       	pop	r12
    7d6e:	bf 90       	pop	r11
    7d70:	af 90       	pop	r10
    7d72:	9f 90       	pop	r9
    7d74:	8f 90       	pop	r8
    7d76:	7f 90       	pop	r7
    7d78:	6f 90       	pop	r6
    7d7a:	5f 90       	pop	r5
    7d7c:	4f 90       	pop	r4
    7d7e:	3f 90       	pop	r3
    7d80:	2f 90       	pop	r2
    7d82:	1f 90       	pop	r1
    7d84:	0f 90       	pop	r0
    7d86:	0f be       	out	0x3f, r0	; 63
    7d88:	0f 90       	pop	r0
}
    7d8a:	ff 91       	pop	r31
    7d8c:	ef 91       	pop	r30
    7d8e:	bf 91       	pop	r27
    7d90:	af 91       	pop	r26
    7d92:	9f 91       	pop	r25
    7d94:	8f 91       	pop	r24
    7d96:	7f 91       	pop	r23
    7d98:	6f 91       	pop	r22
    7d9a:	5f 91       	pop	r21
    7d9c:	4f 91       	pop	r20
    7d9e:	3f 91       	pop	r19
    7da0:	2f 91       	pop	r18
    7da2:	0f 90       	pop	r0
    7da4:	0b be       	out	0x3b, r0	; 59
    7da6:	0f 90       	pop	r0
    7da8:	0f be       	out	0x3f, r0	; 63
    7daa:	0f 90       	pop	r0
    7dac:	1f 90       	pop	r1
    7dae:	18 95       	reti

00007db0 <__vector_10>:

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect )
{
    7db0:	1f 92       	push	r1
    7db2:	0f 92       	push	r0
    7db4:	0f b6       	in	r0, 0x3f	; 63
    7db6:	0f 92       	push	r0
    7db8:	11 24       	eor	r1, r1
    7dba:	0b b6       	in	r0, 0x3b	; 59
    7dbc:	0f 92       	push	r0
    7dbe:	cf 92       	push	r12
    7dc0:	df 92       	push	r13
    7dc2:	ef 92       	push	r14
    7dc4:	ff 92       	push	r15
    7dc6:	0f 93       	push	r16
    7dc8:	1f 93       	push	r17
    7dca:	2f 93       	push	r18
    7dcc:	3f 93       	push	r19
    7dce:	4f 93       	push	r20
    7dd0:	5f 93       	push	r21
    7dd2:	6f 93       	push	r22
    7dd4:	7f 93       	push	r23
    7dd6:	8f 93       	push	r24
    7dd8:	9f 93       	push	r25
    7dda:	af 93       	push	r26
    7ddc:	bf 93       	push	r27
    7dde:	cf 93       	push	r28
    7de0:	ef 93       	push	r30
    7de2:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    7de4:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7de6:	f8 94       	cli
	{
		rtc_epoch++;
    7de8:	80 91 48 24 	lds	r24, 0x2448
    7dec:	90 91 49 24 	lds	r25, 0x2449
    7df0:	01 96       	adiw	r24, 0x01	; 1
    7df2:	80 93 48 24 	sts	0x2448, r24
    7df6:	90 93 49 24 	sts	0x2449, r25
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    7dfa:	e0 91 d3 28 	lds	r30, 0x28D3
    7dfe:	f0 91 d4 28 	lds	r31, 0x28D4
    7e02:	30 97       	sbiw	r30, 0x00	; 0
    7e04:	09 f4       	brne	.+2      	; 0x7e08 <__vector_10+0x58>
    7e06:	41 c0       	rjmp	.+130    	; 0x7e8a <__vector_10+0xda>
    7e08:	00 81       	ld	r16, Z
    7e0a:	11 81       	ldd	r17, Z+1	; 0x01
    7e0c:	22 81       	ldd	r18, Z+2	; 0x02
    7e0e:	33 81       	ldd	r19, Z+3	; 0x03
    7e10:	80 91 48 24 	lds	r24, 0x2448
    7e14:	90 91 49 24 	lds	r25, 0x2449
    7e18:	40 91 0a 04 	lds	r20, 0x040A
    7e1c:	50 91 0b 04 	lds	r21, 0x040B
    7e20:	a0 e0       	ldi	r26, 0x00	; 0
    7e22:	b0 e0       	ldi	r27, 0x00	; 0
    7e24:	dc 01       	movw	r26, r24
    7e26:	99 27       	eor	r25, r25
    7e28:	88 27       	eor	r24, r24
    7e2a:	60 e0       	ldi	r22, 0x00	; 0
    7e2c:	70 e0       	ldi	r23, 0x00	; 0
    7e2e:	84 2b       	or	r24, r20
    7e30:	95 2b       	or	r25, r21
    7e32:	a6 2b       	or	r26, r22
    7e34:	b7 2b       	or	r27, r23
    7e36:	08 17       	cp	r16, r24
    7e38:	19 07       	cpc	r17, r25
    7e3a:	2a 07       	cpc	r18, r26
    7e3c:	3b 07       	cpc	r19, r27
    7e3e:	28 f5       	brcc	.+74     	; 0x7e8a <__vector_10+0xda>
		{
			if(!task_executing)
    7e40:	80 91 95 28 	lds	r24, 0x2895
    7e44:	81 11       	cpse	r24, r1
    7e46:	44 c0       	rjmp	.+136    	; 0x7ed0 <__vector_10+0x120>
			{
				if(task_list->scheduled_time < get_time())
    7e48:	c0 80       	ld	r12, Z
    7e4a:	d1 80       	ldd	r13, Z+1	; 0x01
    7e4c:	e2 80       	ldd	r14, Z+2	; 0x02
    7e4e:	f3 80       	ldd	r15, Z+3	; 0x03
    7e50:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    7e54:	c6 16       	cp	r12, r22
    7e56:	d7 06       	cpc	r13, r23
    7e58:	e8 06       	cpc	r14, r24
    7e5a:	f9 06       	cpc	r15, r25
    7e5c:	c8 f1       	brcs	.+114    	; 0x7ed0 <__vector_10+0x120>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}
				else				
				{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7e5e:	e0 e0       	ldi	r30, 0x00	; 0
    7e60:	f4 e0       	ldi	r31, 0x04	; 4
    7e62:	81 81       	ldd	r24, Z+1	; 0x01
    7e64:	80 fd       	sbrc	r24, 0
    7e66:	fd cf       	rjmp	.-6      	; 0x7e62 <__vector_10+0xb2>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    7e68:	e0 91 d3 28 	lds	r30, 0x28D3
    7e6c:	f0 91 d4 28 	lds	r31, 0x28D4
    7e70:	80 81       	ld	r24, Z
    7e72:	91 81       	ldd	r25, Z+1	; 0x01
    7e74:	a2 81       	ldd	r26, Z+2	; 0x02
    7e76:	b3 81       	ldd	r27, Z+3	; 0x03
    7e78:	88 60       	ori	r24, 0x08	; 8
    7e7a:	e0 e0       	ldi	r30, 0x00	; 0
    7e7c:	f4 e0       	ldi	r31, 0x04	; 4
    7e7e:	84 87       	std	Z+12, r24	; 0x0c
    7e80:	95 87       	std	Z+13, r25	; 0x0d
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    7e82:	82 81       	ldd	r24, Z+2	; 0x02
    7e84:	84 60       	ori	r24, 0x04	; 4
    7e86:	82 83       	std	Z+2, r24	; 0x02
    7e88:	23 c0       	rjmp	.+70     	; 0x7ed0 <__vector_10+0x120>
				//asm("jmp rtc_compare_isr"); // must include scheduler_asm.S in the project
			//}
		}
		else
		{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, get_time());
    7e8a:	0e 94 01 08 	call	0x1002	; 0x1002 <get_time>
    7e8e:	36 2f       	mov	r19, r22
    7e90:	e7 2f       	mov	r30, r23
    7e92:	a0 91 d3 28 	lds	r26, 0x28D3
    7e96:	b0 91 d4 28 	lds	r27, 0x28D4
    7e9a:	4d 91       	ld	r20, X+
    7e9c:	5d 91       	ld	r21, X+
    7e9e:	6d 91       	ld	r22, X+
    7ea0:	7c 91       	ld	r23, X
    7ea2:	20 91 95 28 	lds	r18, 0x2895
    7ea6:	9f 93       	push	r25
    7ea8:	8f 93       	push	r24
    7eaa:	ef 93       	push	r30
    7eac:	3f 93       	push	r19
    7eae:	7f 93       	push	r23
    7eb0:	6f 93       	push	r22
    7eb2:	5f 93       	push	r21
    7eb4:	4f 93       	push	r20
    7eb6:	1f 92       	push	r1
    7eb8:	2f 93       	push	r18
    7eba:	88 e2       	ldi	r24, 0x28	; 40
    7ebc:	93 e2       	ldi	r25, 0x23	; 35
    7ebe:	9f 93       	push	r25
    7ec0:	8f 93       	push	r24
    7ec2:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    7ec6:	8d b7       	in	r24, 0x3d	; 61
    7ec8:	9e b7       	in	r25, 0x3e	; 62
    7eca:	0c 96       	adiw	r24, 0x0c	; 12
    7ecc:	8d bf       	out	0x3d, r24	; 61
    7ece:	9e bf       	out	0x3e, r25	; 62
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7ed0:	cf bf       	out	0x3f, r28	; 63
		}
	}
    7ed2:	ff 91       	pop	r31
    7ed4:	ef 91       	pop	r30
    7ed6:	cf 91       	pop	r28
    7ed8:	bf 91       	pop	r27
    7eda:	af 91       	pop	r26
    7edc:	9f 91       	pop	r25
    7ede:	8f 91       	pop	r24
    7ee0:	7f 91       	pop	r23
    7ee2:	6f 91       	pop	r22
    7ee4:	5f 91       	pop	r21
    7ee6:	4f 91       	pop	r20
    7ee8:	3f 91       	pop	r19
    7eea:	2f 91       	pop	r18
    7eec:	1f 91       	pop	r17
    7eee:	0f 91       	pop	r16
    7ef0:	ff 90       	pop	r15
    7ef2:	ef 90       	pop	r14
    7ef4:	df 90       	pop	r13
    7ef6:	cf 90       	pop	r12
    7ef8:	0f 90       	pop	r0
    7efa:	0b be       	out	0x3b, r0	; 59
    7efc:	0f 90       	pop	r0
    7efe:	0f be       	out	0x3f, r0	; 63
    7f00:	0f 90       	pop	r0
    7f02:	1f 90       	pop	r1
    7f04:	18 95       	reti

00007f06 <send_id>:

void handle_get_id(){
	printf_P(PSTR("My ID is: %04X\r\n"),get_droplet_id());
}

void send_id(){
    7f06:	0f 93       	push	r16
    7f08:	1f 93       	push	r17
    7f0a:	cf 93       	push	r28
    7f0c:	df 93       	push	r29
    7f0e:	cd b7       	in	r28, 0x3d	; 61
    7f10:	de b7       	in	r29, 0x3e	; 62
    7f12:	25 97       	sbiw	r28, 0x05	; 5
    7f14:	cd bf       	out	0x3d, r28	; 61
    7f16:	de bf       	out	0x3e, r29	; 62
	char msg[5];
	sprintf(msg, "%04X", get_droplet_id());
    7f18:	80 91 b1 23 	lds	r24, 0x23B1
    7f1c:	8f 93       	push	r24
    7f1e:	80 91 b0 23 	lds	r24, 0x23B0
    7f22:	8f 93       	push	r24
    7f24:	89 e8       	ldi	r24, 0x89	; 137
    7f26:	93 e2       	ldi	r25, 0x23	; 35
    7f28:	9f 93       	push	r25
    7f2a:	8f 93       	push	r24
    7f2c:	8e 01       	movw	r16, r28
    7f2e:	0f 5f       	subi	r16, 0xFF	; 255
    7f30:	1f 4f       	sbci	r17, 0xFF	; 255
    7f32:	1f 93       	push	r17
    7f34:	0f 93       	push	r16
    7f36:	0e 94 0f 55 	call	0xaa1e	; 0xaa1e <sprintf>
	ir_send(ALL_DIRS, msg, 4);
    7f3a:	44 e0       	ldi	r20, 0x04	; 4
    7f3c:	b8 01       	movw	r22, r16
    7f3e:	8f e3       	ldi	r24, 0x3F	; 63
    7f40:	0e 94 2b 18 	call	0x3056	; 0x3056 <ir_send>
    7f44:	0f 90       	pop	r0
    7f46:	0f 90       	pop	r0
    7f48:	0f 90       	pop	r0
    7f4a:	0f 90       	pop	r0
    7f4c:	0f 90       	pop	r0
    7f4e:	0f 90       	pop	r0
}
    7f50:	25 96       	adiw	r28, 0x05	; 5
    7f52:	cd bf       	out	0x3d, r28	; 61
    7f54:	de bf       	out	0x3e, r29	; 62
    7f56:	df 91       	pop	r29
    7f58:	cf 91       	pop	r28
    7f5a:	1f 91       	pop	r17
    7f5c:	0f 91       	pop	r16
    7f5e:	08 95       	ret

00007f60 <handle_check_collisions>:
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}

void handle_check_collisions(){
    7f60:	ef 92       	push	r14
    7f62:	ff 92       	push	r15
    7f64:	0f 93       	push	r16
    7f66:	1f 93       	push	r17
    7f68:	cf 93       	push	r28
    7f6a:	df 93       	push	r29
	uint8_t dirs = check_collisions();
    7f6c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <check_collisions>
    7f70:	c0 e0       	ldi	r28, 0x00	; 0
    7f72:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t found=0;
    7f74:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    7f76:	08 2f       	mov	r16, r24
    7f78:	10 e0       	ldi	r17, 0x00	; 0
			found=1;
			printf("%hhu",i);
    7f7a:	0f 2e       	mov	r0, r31
    7f7c:	fe e8       	ldi	r31, 0x8E	; 142
    7f7e:	ef 2e       	mov	r14, r31
    7f80:	f3 e2       	ldi	r31, 0x23	; 35
    7f82:	ff 2e       	mov	r15, r31
    7f84:	f0 2d       	mov	r31, r0

void handle_check_collisions(){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    7f86:	98 01       	movw	r18, r16
    7f88:	0c 2e       	mov	r0, r28
    7f8a:	02 c0       	rjmp	.+4      	; 0x7f90 <handle_check_collisions+0x30>
    7f8c:	35 95       	asr	r19
    7f8e:	27 95       	ror	r18
    7f90:	0a 94       	dec	r0
    7f92:	e2 f7       	brpl	.-8      	; 0x7f8c <handle_check_collisions+0x2c>
    7f94:	20 ff       	sbrs	r18, 0
    7f96:	0b c0       	rjmp	.+22     	; 0x7fae <handle_check_collisions+0x4e>
			found=1;
			printf("%hhu",i);
    7f98:	df 93       	push	r29
    7f9a:	cf 93       	push	r28
    7f9c:	ff 92       	push	r15
    7f9e:	ef 92       	push	r14
    7fa0:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    7fa4:	0f 90       	pop	r0
    7fa6:	0f 90       	pop	r0
    7fa8:	0f 90       	pop	r0
    7faa:	0f 90       	pop	r0
void handle_check_collisions(){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    7fac:	91 e0       	ldi	r25, 0x01	; 1
    7fae:	21 96       	adiw	r28, 0x01	; 1
}

void handle_check_collisions(){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    7fb0:	c6 30       	cpi	r28, 0x06	; 6
    7fb2:	d1 05       	cpc	r29, r1
    7fb4:	41 f7       	brne	.-48     	; 0x7f86 <handle_check_collisions+0x26>
		if(dirs&(1<<i)){
			found=1;
			printf("%hhu",i);
		}
	}
	if(!found) printf("None");
    7fb6:	91 11       	cpse	r25, r1
    7fb8:	08 c0       	rjmp	.+16     	; 0x7fca <handle_check_collisions+0x6a>
    7fba:	83 e9       	ldi	r24, 0x93	; 147
    7fbc:	93 e2       	ldi	r25, 0x23	; 35
    7fbe:	9f 93       	push	r25
    7fc0:	8f 93       	push	r24
    7fc2:	0e 94 9d 54 	call	0xa93a	; 0xa93a <printf>
    7fc6:	0f 90       	pop	r0
    7fc8:	0f 90       	pop	r0
	printf("\r\n");
    7fca:	85 ea       	ldi	r24, 0xA5	; 165
    7fcc:	90 e2       	ldi	r25, 0x20	; 32
    7fce:	0e 94 df 54 	call	0xa9be	; 0xa9be <puts>
}
    7fd2:	df 91       	pop	r29
    7fd4:	cf 91       	pop	r28
    7fd6:	1f 91       	pop	r17
    7fd8:	0f 91       	pop	r16
    7fda:	ff 90       	pop	r15
    7fdc:	ef 90       	pop	r14
    7fde:	08 95       	ret

00007fe0 <handle_move_steps>:

void handle_move_steps(char* command_args){
    7fe0:	ff 92       	push	r15
    7fe2:	0f 93       	push	r16
    7fe4:	1f 93       	push	r17
    7fe6:	cf 93       	push	r28
    7fe8:	df 93       	push	r29
    7fea:	1f 92       	push	r1
    7fec:	1f 92       	push	r1
    7fee:	cd b7       	in	r28, 0x3d	; 61
    7ff0:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    7ff2:	20 e2       	ldi	r18, 0x20	; 32
    7ff4:	30 e0       	ldi	r19, 0x00	; 0
    7ff6:	29 83       	std	Y+1, r18	; 0x01
    7ff8:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    7ffa:	be 01       	movw	r22, r28
    7ffc:	6f 5f       	subi	r22, 0xFF	; 255
    7ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    8000:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint8_t direction = token[0]-'0';
    8004:	fc 01       	movw	r30, r24
    8006:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    8008:	be 01       	movw	r22, r28
    800a:	6f 5f       	subi	r22, 0xFF	; 255
    800c:	7f 4f       	sbci	r23, 0xFF	; 255
    800e:	80 e0       	ldi	r24, 0x00	; 0
    8010:	90 e0       	ldi	r25, 0x00	; 0
    8012:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    8016:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    801a:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    801c:	00 97       	sbiw	r24, 0x00	; 0
    801e:	b1 f0       	breq	.+44     	; 0x804c <handle_move_steps+0x6c>

void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    8020:	f0 ed       	ldi	r31, 0xD0	; 208
    8022:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %u, num_steps %u\r\n"), direction, num_steps);	
    8024:	1f 93       	push	r17
    8026:	8f 93       	push	r24
    8028:	1f 92       	push	r1
    802a:	ff 92       	push	r15
    802c:	8c ea       	ldi	r24, 0xAC	; 172
    802e:	9d e0       	ldi	r25, 0x0D	; 13
    8030:	9f 93       	push	r25
    8032:	8f 93       	push	r24
    8034:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		move_steps(direction, num_steps);
    8038:	b8 01       	movw	r22, r16
    803a:	8f 2d       	mov	r24, r15
    803c:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <move_steps>
    8040:	0f 90       	pop	r0
    8042:	0f 90       	pop	r0
    8044:	0f 90       	pop	r0
    8046:	0f 90       	pop	r0
    8048:	0f 90       	pop	r0
    804a:	0f 90       	pop	r0
	}	
}	
    804c:	0f 90       	pop	r0
    804e:	0f 90       	pop	r0
    8050:	df 91       	pop	r29
    8052:	cf 91       	pop	r28
    8054:	1f 91       	pop	r17
    8056:	0f 91       	pop	r16
    8058:	ff 90       	pop	r15
    805a:	08 95       	ret

0000805c <handle_walk>:

void handle_walk(char* command_args){	
    805c:	1f 93       	push	r17
    805e:	cf 93       	push	r28
    8060:	df 93       	push	r29
    8062:	1f 92       	push	r1
    8064:	1f 92       	push	r1
    8066:	cd b7       	in	r28, 0x3d	; 61
    8068:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    806a:	20 e2       	ldi	r18, 0x20	; 32
    806c:	30 e0       	ldi	r19, 0x00	; 0
    806e:	29 83       	std	Y+1, r18	; 0x01
    8070:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    8072:	be 01       	movw	r22, r28
    8074:	6f 5f       	subi	r22, 0xFF	; 255
    8076:	7f 4f       	sbci	r23, 0xFF	; 255
    8078:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint8_t direction = token[0]-'0';
    807c:	fc 01       	movw	r30, r24
    807e:	10 81       	ld	r17, Z
    8080:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    8082:	be 01       	movw	r22, r28
    8084:	6f 5f       	subi	r22, 0xFF	; 255
    8086:	7f 4f       	sbci	r23, 0xFF	; 255
    8088:	80 e0       	ldi	r24, 0x00	; 0
    808a:	90 e0       	ldi	r25, 0x00	; 0
    808c:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    8090:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
	
	walk(direction, distance_mm);
    8094:	bc 01       	movw	r22, r24
    8096:	81 2f       	mov	r24, r17
    8098:	0e 94 00 22 	call	0x4400	; 0x4400 <walk>
}
    809c:	0f 90       	pop	r0
    809e:	0f 90       	pop	r0
    80a0:	df 91       	pop	r29
    80a2:	cf 91       	pop	r28
    80a4:	1f 91       	pop	r17
    80a6:	08 95       	ret

000080a8 <handle_get_rgb>:

void handle_get_rgb(){
    80a8:	cf 93       	push	r28
    80aa:	df 93       	push	r29
    80ac:	00 d0       	rcall	.+0      	; 0x80ae <handle_get_rgb+0x6>
    80ae:	00 d0       	rcall	.+0      	; 0x80b0 <handle_get_rgb+0x8>
    80b0:	cd b7       	in	r28, 0x3d	; 61
    80b2:	de b7       	in	r29, 0x3e	; 62
	int16_t r, g, b;
	get_rgb(&r, &g, &b);
    80b4:	ae 01       	movw	r20, r28
    80b6:	4b 5f       	subi	r20, 0xFB	; 251
    80b8:	5f 4f       	sbci	r21, 0xFF	; 255
    80ba:	be 01       	movw	r22, r28
    80bc:	6d 5f       	subi	r22, 0xFD	; 253
    80be:	7f 4f       	sbci	r23, 0xFF	; 255
    80c0:	ce 01       	movw	r24, r28
    80c2:	01 96       	adiw	r24, 0x01	; 1
    80c4:	0e 94 82 38 	call	0x7104	; 0x7104 <get_rgb>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    80c8:	8e 81       	ldd	r24, Y+6	; 0x06
    80ca:	8f 93       	push	r24
    80cc:	8d 81       	ldd	r24, Y+5	; 0x05
    80ce:	8f 93       	push	r24
    80d0:	8c 81       	ldd	r24, Y+4	; 0x04
    80d2:	8f 93       	push	r24
    80d4:	8b 81       	ldd	r24, Y+3	; 0x03
    80d6:	8f 93       	push	r24
    80d8:	8a 81       	ldd	r24, Y+2	; 0x02
    80da:	8f 93       	push	r24
    80dc:	89 81       	ldd	r24, Y+1	; 0x01
    80de:	8f 93       	push	r24
    80e0:	83 e9       	ldi	r24, 0x93	; 147
    80e2:	9d e0       	ldi	r25, 0x0D	; 13
    80e4:	9f 93       	push	r25
    80e6:	8f 93       	push	r24
    80e8:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    80ec:	cd bf       	out	0x3d, r28	; 61
    80ee:	de bf       	out	0x3e, r29	; 62
}
    80f0:	26 96       	adiw	r28, 0x06	; 6
    80f2:	cd bf       	out	0x3d, r28	; 61
    80f4:	de bf       	out	0x3e, r29	; 62
    80f6:	df 91       	pop	r29
    80f8:	cf 91       	pop	r28
    80fa:	08 95       	ret

000080fc <handle_set_ir>:

void handle_set_ir(char* command_args){
    80fc:	cf 93       	push	r28
    80fe:	df 93       	push	r29
    8100:	1f 92       	push	r1
    8102:	1f 92       	push	r1
    8104:	cd b7       	in	r28, 0x3d	; 61
    8106:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    8108:	20 e2       	ldi	r18, 0x20	; 32
    810a:	30 e0       	ldi	r19, 0x00	; 0
    810c:	29 83       	std	Y+1, r18	; 0x01
    810e:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    8110:	be 01       	movw	r22, r28
    8112:	6f 5f       	subi	r22, 0xFF	; 255
    8114:	7f 4f       	sbci	r23, 0xFF	; 255
    8116:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    811a:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
	
	schedule_task(10, set_all_ir_powers, (void*)ir_val);
    811e:	9c 01       	movw	r18, r24
    8120:	44 e4       	ldi	r20, 0x44	; 68
    8122:	5c e1       	ldi	r21, 0x1C	; 28
    8124:	6a e0       	ldi	r22, 0x0A	; 10
    8126:	70 e0       	ldi	r23, 0x00	; 0
    8128:	80 e0       	ldi	r24, 0x00	; 0
    812a:	90 e0       	ldi	r25, 0x00	; 0
    812c:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
}
    8130:	0f 90       	pop	r0
    8132:	0f 90       	pop	r0
    8134:	df 91       	pop	r29
    8136:	cf 91       	pop	r28
    8138:	08 95       	ret

0000813a <handle_stop_walk>:

void handle_stop_walk(){
	stop_move(0);
    813a:	80 e0       	ldi	r24, 0x00	; 0
    813c:	90 e0       	ldi	r25, 0x00	; 0
    813e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <stop_move>
    8142:	08 95       	ret

00008144 <handle_set_motors>:
}

void handle_set_motors(char* command_args){	
    8144:	af 92       	push	r10
    8146:	bf 92       	push	r11
    8148:	cf 92       	push	r12
    814a:	df 92       	push	r13
    814c:	ef 92       	push	r14
    814e:	ff 92       	push	r15
    8150:	0f 93       	push	r16
    8152:	1f 93       	push	r17
    8154:	cf 93       	push	r28
    8156:	df 93       	push	r29
    8158:	1f 92       	push	r1
    815a:	1f 92       	push	r1
    815c:	cd b7       	in	r28, 0x3d	; 61
    815e:	de b7       	in	r29, 0x3e	; 62
    8160:	8c 01       	movw	r16, r24
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
    8162:	e0 e4       	ldi	r30, 0x40	; 64
    8164:	fa e0       	ldi	r31, 0x0A	; 10
    8166:	e2 ac       	ldd	r14, Z+58	; 0x3a
    8168:	f3 ac       	ldd	r15, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
    816a:	c0 ac       	ldd	r12, Z+56	; 0x38
    816c:	d1 ac       	ldd	r13, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
    816e:	a0 90 78 09 	lds	r10, 0x0978
    8172:	b0 90 79 09 	lds	r11, 0x0979
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
    8176:	4f ef       	ldi	r20, 0xFF	; 255
    8178:	60 e0       	ldi	r22, 0x00	; 0
    817a:	80 e0       	ldi	r24, 0x00	; 0
    817c:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
	const char delim[2] = " ";
    8180:	80 e2       	ldi	r24, 0x20	; 32
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	89 83       	std	Y+1, r24	; 0x01
    8186:	9a 83       	std	Y+2, r25	; 0x02
	
	char* token = strtok(command_args,delim);
    8188:	be 01       	movw	r22, r28
    818a:	6f 5f       	subi	r22, 0xFF	; 255
    818c:	7f 4f       	sbci	r23, 0xFF	; 255
    818e:	c8 01       	movw	r24, r16
    8190:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    8194:	00 97       	sbiw	r24, 0x00	; 0
    8196:	49 f4       	brne	.+18     	; 0x81aa <handle_set_motors+0x66>
    8198:	8e e6       	ldi	r24, 0x6E	; 110
    819a:	9d e0       	ldi	r25, 0x0D	; 13
    819c:	9f 93       	push	r25
    819e:	8f 93       	push	r24
    81a0:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    81a4:	0f 90       	pop	r0
    81a6:	0f 90       	pop	r0
    81a8:	8a c0       	rjmp	.+276    	; 0x82be <handle_set_motors+0x17a>
	uint8_t direction = atoi(token);
    81aa:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    81ae:	8c 01       	movw	r16, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hhu.\r\n"), direction); return;}
    81b0:	88 30       	cpi	r24, 0x08	; 8
    81b2:	70 f0       	brcs	.+28     	; 0x81d0 <handle_set_motors+0x8c>
    81b4:	11 27       	eor	r17, r17
    81b6:	1f 93       	push	r17
    81b8:	0f 93       	push	r16
    81ba:	82 e5       	ldi	r24, 0x52	; 82
    81bc:	9d e0       	ldi	r25, 0x0D	; 13
    81be:	9f 93       	push	r25
    81c0:	8f 93       	push	r24
    81c2:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    81c6:	0f 90       	pop	r0
    81c8:	0f 90       	pop	r0
    81ca:	0f 90       	pop	r0
    81cc:	0f 90       	pop	r0
    81ce:	77 c0       	rjmp	.+238    	; 0x82be <handle_set_motors+0x17a>

	token = strtok(NULL,delim);
    81d0:	be 01       	movw	r22, r28
    81d2:	6f 5f       	subi	r22, 0xFF	; 255
    81d4:	7f 4f       	sbci	r23, 0xFF	; 255
    81d6:	80 e0       	ldi	r24, 0x00	; 0
    81d8:	90 e0       	ldi	r25, 0x00	; 0
    81da:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    81de:	00 97       	sbiw	r24, 0x00	; 0
    81e0:	49 f4       	brne	.+18     	; 0x81f4 <handle_set_motors+0xb0>
    81e2:	8d e2       	ldi	r24, 0x2D	; 45
    81e4:	9d e0       	ldi	r25, 0x0D	; 13
    81e6:	9f 93       	push	r25
    81e8:	8f 93       	push	r24
    81ea:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    81ee:	0f 90       	pop	r0
    81f0:	0f 90       	pop	r0
    81f2:	65 c0       	rjmp	.+202    	; 0x82be <handle_set_motors+0x17a>
	motor_adjusts[direction][0] = atoi(token);
    81f4:	11 27       	eor	r17, r17
    81f6:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    81fa:	f8 01       	movw	r30, r16
    81fc:	ee 0f       	add	r30, r30
    81fe:	ff 1f       	adc	r31, r31
    8200:	e0 0f       	add	r30, r16
    8202:	f1 1f       	adc	r31, r17
    8204:	ee 0f       	add	r30, r30
    8206:	ff 1f       	adc	r31, r31
    8208:	e9 56       	subi	r30, 0x69	; 105
    820a:	f7 4d       	sbci	r31, 0xD7	; 215
    820c:	80 83       	st	Z, r24
    820e:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    8210:	be 01       	movw	r22, r28
    8212:	6f 5f       	subi	r22, 0xFF	; 255
    8214:	7f 4f       	sbci	r23, 0xFF	; 255
    8216:	80 e0       	ldi	r24, 0x00	; 0
    8218:	90 e0       	ldi	r25, 0x00	; 0
    821a:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    821e:	00 97       	sbiw	r24, 0x00	; 0
    8220:	49 f4       	brne	.+18     	; 0x8234 <handle_set_motors+0xf0>
    8222:	87 e0       	ldi	r24, 0x07	; 7
    8224:	9d e0       	ldi	r25, 0x0D	; 13
    8226:	9f 93       	push	r25
    8228:	8f 93       	push	r24
    822a:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    822e:	0f 90       	pop	r0
    8230:	0f 90       	pop	r0
    8232:	45 c0       	rjmp	.+138    	; 0x82be <handle_set_motors+0x17a>
	motor_adjusts[direction][1] = atoi(token);
    8234:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8238:	f8 01       	movw	r30, r16
    823a:	ee 0f       	add	r30, r30
    823c:	ff 1f       	adc	r31, r31
    823e:	e0 0f       	add	r30, r16
    8240:	f1 1f       	adc	r31, r17
    8242:	ee 0f       	add	r30, r30
    8244:	ff 1f       	adc	r31, r31
    8246:	e9 56       	subi	r30, 0x69	; 105
    8248:	f7 4d       	sbci	r31, 0xD7	; 215
    824a:	82 83       	std	Z+2, r24	; 0x02
    824c:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    824e:	be 01       	movw	r22, r28
    8250:	6f 5f       	subi	r22, 0xFF	; 255
    8252:	7f 4f       	sbci	r23, 0xFF	; 255
    8254:	80 e0       	ldi	r24, 0x00	; 0
    8256:	90 e0       	ldi	r25, 0x00	; 0
    8258:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    825c:	00 97       	sbiw	r24, 0x00	; 0
    825e:	49 f4       	brne	.+18     	; 0x8272 <handle_set_motors+0x12e>
    8260:	82 ee       	ldi	r24, 0xE2	; 226
    8262:	9c e0       	ldi	r25, 0x0C	; 12
    8264:	9f 93       	push	r25
    8266:	8f 93       	push	r24
    8268:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    826c:	0f 90       	pop	r0
    826e:	0f 90       	pop	r0
    8270:	26 c0       	rjmp	.+76     	; 0x82be <handle_set_motors+0x17a>
	motor_adjusts[direction][2] = atoi(token);	
    8272:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8276:	f8 01       	movw	r30, r16
    8278:	ee 0f       	add	r30, r30
    827a:	ff 1f       	adc	r31, r31
    827c:	e0 0f       	add	r30, r16
    827e:	f1 1f       	adc	r31, r17
    8280:	ee 0f       	add	r30, r30
    8282:	ff 1f       	adc	r31, r31
    8284:	e9 56       	subi	r30, 0x69	; 105
    8286:	f7 4d       	sbci	r31, 0xD7	; 215
    8288:	84 83       	std	Z+4, r24	; 0x04
    828a:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hhu, vals: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    828c:	9f 93       	push	r25
    828e:	8f 93       	push	r24
    8290:	83 81       	ldd	r24, Z+3	; 0x03
    8292:	8f 93       	push	r24
    8294:	82 81       	ldd	r24, Z+2	; 0x02
    8296:	8f 93       	push	r24
    8298:	81 81       	ldd	r24, Z+1	; 0x01
    829a:	8f 93       	push	r24
    829c:	80 81       	ld	r24, Z
    829e:	8f 93       	push	r24
    82a0:	1f 93       	push	r17
    82a2:	0f 93       	push	r16
    82a4:	84 ea       	ldi	r24, 0xA4	; 164
    82a6:	9c e0       	ldi	r25, 0x0C	; 12
    82a8:	9f 93       	push	r25
    82aa:	8f 93       	push	r24
    82ac:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
	set_rgb(r,g,b);
    82b0:	4a 2d       	mov	r20, r10
    82b2:	6c 2d       	mov	r22, r12
    82b4:	8e 2d       	mov	r24, r14
    82b6:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    82ba:	cd bf       	out	0x3d, r28	; 61
    82bc:	de bf       	out	0x3e, r29	; 62
}
    82be:	0f 90       	pop	r0
    82c0:	0f 90       	pop	r0
    82c2:	df 91       	pop	r29
    82c4:	cf 91       	pop	r28
    82c6:	1f 91       	pop	r17
    82c8:	0f 91       	pop	r16
    82ca:	ff 90       	pop	r15
    82cc:	ef 90       	pop	r14
    82ce:	df 90       	pop	r13
    82d0:	cf 90       	pop	r12
    82d2:	bf 90       	pop	r11
    82d4:	af 90       	pop	r10
    82d6:	08 95       	ret

000082d8 <handle_adjust_motors>:

void handle_adjust_motors(char* command_args){
    82d8:	8f 92       	push	r8
    82da:	9f 92       	push	r9
    82dc:	af 92       	push	r10
    82de:	bf 92       	push	r11
    82e0:	cf 92       	push	r12
    82e2:	df 92       	push	r13
    82e4:	ef 92       	push	r14
    82e6:	ff 92       	push	r15
    82e8:	0f 93       	push	r16
    82ea:	1f 93       	push	r17
    82ec:	cf 93       	push	r28
    82ee:	df 93       	push	r29
    82f0:	1f 92       	push	r1
    82f2:	1f 92       	push	r1
    82f4:	cd b7       	in	r28, 0x3d	; 61
    82f6:	de b7       	in	r29, 0x3e	; 62
    82f8:	8c 01       	movw	r16, r24
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
    82fa:	e0 e4       	ldi	r30, 0x40	; 64
    82fc:	fa e0       	ldi	r31, 0x0A	; 10
    82fe:	e2 ac       	ldd	r14, Z+58	; 0x3a
    8300:	f3 ac       	ldd	r15, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
    8302:	c0 ac       	ldd	r12, Z+56	; 0x38
    8304:	d1 ac       	ldd	r13, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
    8306:	a0 90 78 09 	lds	r10, 0x0978
    830a:	b0 90 79 09 	lds	r11, 0x0979
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
    830e:	4f ef       	ldi	r20, 0xFF	; 255
    8310:	60 e0       	ldi	r22, 0x00	; 0
    8312:	80 e0       	ldi	r24, 0x00	; 0
    8314:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
	const char delim[2] = " ";
    8318:	80 e2       	ldi	r24, 0x20	; 32
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	89 83       	std	Y+1, r24	; 0x01
    831e:	9a 83       	std	Y+2, r25	; 0x02
	
	char* token = strtok(command_args,delim);
    8320:	be 01       	movw	r22, r28
    8322:	6f 5f       	subi	r22, 0xFF	; 255
    8324:	7f 4f       	sbci	r23, 0xFF	; 255
    8326:	c8 01       	movw	r24, r16
    8328:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    832c:	00 97       	sbiw	r24, 0x00	; 0
    832e:	49 f4       	brne	.+18     	; 0x8342 <handle_adjust_motors+0x6a>
    8330:	8f e7       	ldi	r24, 0x7F	; 127
    8332:	9c e0       	ldi	r25, 0x0C	; 12
    8334:	9f 93       	push	r25
    8336:	8f 93       	push	r24
    8338:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    833c:	0f 90       	pop	r0
    833e:	0f 90       	pop	r0
    8340:	f2 c0       	rjmp	.+484    	; 0x8526 <handle_adjust_motors+0x24e>
	uint8_t direction = atoi(token);
    8342:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8346:	8c 01       	movw	r16, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hhu.\r\n"), direction); return;}
    8348:	88 30       	cpi	r24, 0x08	; 8
    834a:	70 f0       	brcs	.+28     	; 0x8368 <handle_adjust_motors+0x90>
    834c:	11 27       	eor	r17, r17
    834e:	1f 93       	push	r17
    8350:	0f 93       	push	r16
    8352:	83 e6       	ldi	r24, 0x63	; 99
    8354:	9c e0       	ldi	r25, 0x0C	; 12
    8356:	9f 93       	push	r25
    8358:	8f 93       	push	r24
    835a:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    835e:	0f 90       	pop	r0
    8360:	0f 90       	pop	r0
    8362:	0f 90       	pop	r0
    8364:	0f 90       	pop	r0
    8366:	df c0       	rjmp	.+446    	; 0x8526 <handle_adjust_motors+0x24e>

	token = strtok(NULL,delim);
    8368:	be 01       	movw	r22, r28
    836a:	6f 5f       	subi	r22, 0xFF	; 255
    836c:	7f 4f       	sbci	r23, 0xFF	; 255
    836e:	80 e0       	ldi	r24, 0x00	; 0
    8370:	90 e0       	ldi	r25, 0x00	; 0
    8372:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    8376:	00 97       	sbiw	r24, 0x00	; 0
    8378:	49 f4       	brne	.+18     	; 0x838c <handle_adjust_motors+0xb4>
    837a:	8e e3       	ldi	r24, 0x3E	; 62
    837c:	9c e0       	ldi	r25, 0x0C	; 12
    837e:	9f 93       	push	r25
    8380:	8f 93       	push	r24
    8382:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    8386:	0f 90       	pop	r0
    8388:	0f 90       	pop	r0
    838a:	cd c0       	rjmp	.+410    	; 0x8526 <handle_adjust_motors+0x24e>
	if(motor_adjusts[direction][0]>=0)
    838c:	11 27       	eor	r17, r17
    838e:	f8 01       	movw	r30, r16
    8390:	ee 0f       	add	r30, r30
    8392:	ff 1f       	adc	r31, r31
    8394:	e0 0f       	add	r30, r16
    8396:	f1 1f       	adc	r31, r17
    8398:	ee 0f       	add	r30, r30
    839a:	ff 1f       	adc	r31, r31
    839c:	e9 56       	subi	r30, 0x69	; 105
    839e:	f7 4d       	sbci	r31, 0xD7	; 215
    83a0:	80 80       	ld	r8, Z
    83a2:	91 80       	ldd	r9, Z+1	; 0x01
    83a4:	99 20       	and	r9, r9
    83a6:	84 f0       	brlt	.+32     	; 0x83c8 <handle_adjust_motors+0xf0>
		motor_adjusts[direction][0]+= atoi(token);
    83a8:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    83ac:	f8 01       	movw	r30, r16
    83ae:	ee 0f       	add	r30, r30
    83b0:	ff 1f       	adc	r31, r31
    83b2:	e0 0f       	add	r30, r16
    83b4:	f1 1f       	adc	r31, r17
    83b6:	ee 0f       	add	r30, r30
    83b8:	ff 1f       	adc	r31, r31
    83ba:	e9 56       	subi	r30, 0x69	; 105
    83bc:	f7 4d       	sbci	r31, 0xD7	; 215
    83be:	88 0d       	add	r24, r8
    83c0:	99 1d       	adc	r25, r9
    83c2:	80 83       	st	Z, r24
    83c4:	91 83       	std	Z+1, r25	; 0x01
    83c6:	0f c0       	rjmp	.+30     	; 0x83e6 <handle_adjust_motors+0x10e>
	else
		motor_adjusts[direction][0]-= atoi(token);
    83c8:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    83cc:	f8 01       	movw	r30, r16
    83ce:	ee 0f       	add	r30, r30
    83d0:	ff 1f       	adc	r31, r31
    83d2:	e0 0f       	add	r30, r16
    83d4:	f1 1f       	adc	r31, r17
    83d6:	ee 0f       	add	r30, r30
    83d8:	ff 1f       	adc	r31, r31
    83da:	e9 56       	subi	r30, 0x69	; 105
    83dc:	f7 4d       	sbci	r31, 0xD7	; 215
    83de:	88 1a       	sub	r8, r24
    83e0:	99 0a       	sbc	r9, r25
    83e2:	80 82       	st	Z, r8
    83e4:	91 82       	std	Z+1, r9	; 0x01
	
	token = strtok(NULL,delim);
    83e6:	be 01       	movw	r22, r28
    83e8:	6f 5f       	subi	r22, 0xFF	; 255
    83ea:	7f 4f       	sbci	r23, 0xFF	; 255
    83ec:	80 e0       	ldi	r24, 0x00	; 0
    83ee:	90 e0       	ldi	r25, 0x00	; 0
    83f0:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    83f4:	00 97       	sbiw	r24, 0x00	; 0
    83f6:	49 f4       	brne	.+18     	; 0x840a <handle_adjust_motors+0x132>
    83f8:	88 e1       	ldi	r24, 0x18	; 24
    83fa:	9c e0       	ldi	r25, 0x0C	; 12
    83fc:	9f 93       	push	r25
    83fe:	8f 93       	push	r24
    8400:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    8404:	0f 90       	pop	r0
    8406:	0f 90       	pop	r0
    8408:	8e c0       	rjmp	.+284    	; 0x8526 <handle_adjust_motors+0x24e>
	if(motor_adjusts[direction][1]>=0)
    840a:	f8 01       	movw	r30, r16
    840c:	ee 0f       	add	r30, r30
    840e:	ff 1f       	adc	r31, r31
    8410:	e0 0f       	add	r30, r16
    8412:	f1 1f       	adc	r31, r17
    8414:	ee 0f       	add	r30, r30
    8416:	ff 1f       	adc	r31, r31
    8418:	e9 56       	subi	r30, 0x69	; 105
    841a:	f7 4d       	sbci	r31, 0xD7	; 215
    841c:	82 80       	ldd	r8, Z+2	; 0x02
    841e:	93 80       	ldd	r9, Z+3	; 0x03
    8420:	99 20       	and	r9, r9
    8422:	84 f0       	brlt	.+32     	; 0x8444 <handle_adjust_motors+0x16c>
	motor_adjusts[direction][1]+= atoi(token);
    8424:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8428:	f8 01       	movw	r30, r16
    842a:	ee 0f       	add	r30, r30
    842c:	ff 1f       	adc	r31, r31
    842e:	e0 0f       	add	r30, r16
    8430:	f1 1f       	adc	r31, r17
    8432:	ee 0f       	add	r30, r30
    8434:	ff 1f       	adc	r31, r31
    8436:	e9 56       	subi	r30, 0x69	; 105
    8438:	f7 4d       	sbci	r31, 0xD7	; 215
    843a:	88 0d       	add	r24, r8
    843c:	99 1d       	adc	r25, r9
    843e:	82 83       	std	Z+2, r24	; 0x02
    8440:	93 83       	std	Z+3, r25	; 0x03
    8442:	0f c0       	rjmp	.+30     	; 0x8462 <handle_adjust_motors+0x18a>
	else
	motor_adjusts[direction][1]-= atoi(token);
    8444:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8448:	f8 01       	movw	r30, r16
    844a:	ee 0f       	add	r30, r30
    844c:	ff 1f       	adc	r31, r31
    844e:	e0 0f       	add	r30, r16
    8450:	f1 1f       	adc	r31, r17
    8452:	ee 0f       	add	r30, r30
    8454:	ff 1f       	adc	r31, r31
    8456:	e9 56       	subi	r30, 0x69	; 105
    8458:	f7 4d       	sbci	r31, 0xD7	; 215
    845a:	88 1a       	sub	r8, r24
    845c:	99 0a       	sbc	r9, r25
    845e:	82 82       	std	Z+2, r8	; 0x02
    8460:	93 82       	std	Z+3, r9	; 0x03
	
	token = strtok(NULL,delim);
    8462:	be 01       	movw	r22, r28
    8464:	6f 5f       	subi	r22, 0xFF	; 255
    8466:	7f 4f       	sbci	r23, 0xFF	; 255
    8468:	80 e0       	ldi	r24, 0x00	; 0
    846a:	90 e0       	ldi	r25, 0x00	; 0
    846c:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    8470:	00 97       	sbiw	r24, 0x00	; 0
    8472:	49 f4       	brne	.+18     	; 0x8486 <handle_adjust_motors+0x1ae>
    8474:	83 ef       	ldi	r24, 0xF3	; 243
    8476:	9b e0       	ldi	r25, 0x0B	; 11
    8478:	9f 93       	push	r25
    847a:	8f 93       	push	r24
    847c:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    8480:	0f 90       	pop	r0
    8482:	0f 90       	pop	r0
    8484:	50 c0       	rjmp	.+160    	; 0x8526 <handle_adjust_motors+0x24e>
	if(motor_adjusts[direction][2]>=0)
    8486:	f8 01       	movw	r30, r16
    8488:	ee 0f       	add	r30, r30
    848a:	ff 1f       	adc	r31, r31
    848c:	e0 0f       	add	r30, r16
    848e:	f1 1f       	adc	r31, r17
    8490:	ee 0f       	add	r30, r30
    8492:	ff 1f       	adc	r31, r31
    8494:	e9 56       	subi	r30, 0x69	; 105
    8496:	f7 4d       	sbci	r31, 0xD7	; 215
    8498:	84 80       	ldd	r8, Z+4	; 0x04
    849a:	95 80       	ldd	r9, Z+5	; 0x05
    849c:	99 20       	and	r9, r9
    849e:	84 f0       	brlt	.+32     	; 0x84c0 <handle_adjust_motors+0x1e8>
	motor_adjusts[direction][2]+= atoi(token);
    84a0:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    84a4:	f8 01       	movw	r30, r16
    84a6:	ee 0f       	add	r30, r30
    84a8:	ff 1f       	adc	r31, r31
    84aa:	e0 0f       	add	r30, r16
    84ac:	f1 1f       	adc	r31, r17
    84ae:	ee 0f       	add	r30, r30
    84b0:	ff 1f       	adc	r31, r31
    84b2:	e9 56       	subi	r30, 0x69	; 105
    84b4:	f7 4d       	sbci	r31, 0xD7	; 215
    84b6:	88 0d       	add	r24, r8
    84b8:	99 1d       	adc	r25, r9
    84ba:	84 83       	std	Z+4, r24	; 0x04
    84bc:	95 83       	std	Z+5, r25	; 0x05
    84be:	0f c0       	rjmp	.+30     	; 0x84de <handle_adjust_motors+0x206>
	else
	motor_adjusts[direction][2]-= atoi(token);
    84c0:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    84c4:	f8 01       	movw	r30, r16
    84c6:	ee 0f       	add	r30, r30
    84c8:	ff 1f       	adc	r31, r31
    84ca:	e0 0f       	add	r30, r16
    84cc:	f1 1f       	adc	r31, r17
    84ce:	ee 0f       	add	r30, r30
    84d0:	ff 1f       	adc	r31, r31
    84d2:	e9 56       	subi	r30, 0x69	; 105
    84d4:	f7 4d       	sbci	r31, 0xD7	; 215
    84d6:	88 1a       	sub	r8, r24
    84d8:	99 0a       	sbc	r9, r25
    84da:	84 82       	std	Z+4, r8	; 0x04
    84dc:	95 82       	std	Z+5, r9	; 0x05

	printf_P(PSTR("Got adjust_motors command. direction: %hhu, New Settings: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    84de:	f8 01       	movw	r30, r16
    84e0:	ee 0f       	add	r30, r30
    84e2:	ff 1f       	adc	r31, r31
    84e4:	e0 0f       	add	r30, r16
    84e6:	f1 1f       	adc	r31, r17
    84e8:	ee 0f       	add	r30, r30
    84ea:	ff 1f       	adc	r31, r31
    84ec:	e9 56       	subi	r30, 0x69	; 105
    84ee:	f7 4d       	sbci	r31, 0xD7	; 215
    84f0:	85 81       	ldd	r24, Z+5	; 0x05
    84f2:	8f 93       	push	r24
    84f4:	84 81       	ldd	r24, Z+4	; 0x04
    84f6:	8f 93       	push	r24
    84f8:	83 81       	ldd	r24, Z+3	; 0x03
    84fa:	8f 93       	push	r24
    84fc:	82 81       	ldd	r24, Z+2	; 0x02
    84fe:	8f 93       	push	r24
    8500:	81 81       	ldd	r24, Z+1	; 0x01
    8502:	8f 93       	push	r24
    8504:	80 81       	ld	r24, Z
    8506:	8f 93       	push	r24
    8508:	1f 93       	push	r17
    850a:	0f 93       	push	r16
    850c:	8a ea       	ldi	r24, 0xAA	; 170
    850e:	9b e0       	ldi	r25, 0x0B	; 11
    8510:	9f 93       	push	r25
    8512:	8f 93       	push	r24
    8514:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
	set_rgb(r,g,b);
    8518:	4a 2d       	mov	r20, r10
    851a:	6c 2d       	mov	r22, r12
    851c:	8e 2d       	mov	r24, r14
    851e:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <set_rgb>
    8522:	cd bf       	out	0x3d, r28	; 61
    8524:	de bf       	out	0x3e, r29	; 62
}
    8526:	0f 90       	pop	r0
    8528:	0f 90       	pop	r0
    852a:	df 91       	pop	r29
    852c:	cf 91       	pop	r28
    852e:	1f 91       	pop	r17
    8530:	0f 91       	pop	r16
    8532:	ff 90       	pop	r15
    8534:	ef 90       	pop	r14
    8536:	df 90       	pop	r13
    8538:	cf 90       	pop	r12
    853a:	bf 90       	pop	r11
    853c:	af 90       	pop	r10
    853e:	9f 90       	pop	r9
    8540:	8f 90       	pop	r8
    8542:	08 95       	ret

00008544 <handle_set_mm_per_kilostep>:

void handle_set_mm_per_kilostep(char* command_args){
    8544:	1f 93       	push	r17
    8546:	cf 93       	push	r28
    8548:	df 93       	push	r29
    854a:	1f 92       	push	r1
    854c:	1f 92       	push	r1
    854e:	cd b7       	in	r28, 0x3d	; 61
    8550:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    8552:	20 e2       	ldi	r18, 0x20	; 32
    8554:	30 e0       	ldi	r19, 0x00	; 0
    8556:	29 83       	std	Y+1, r18	; 0x01
    8558:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    855a:	be 01       	movw	r22, r28
    855c:	6f 5f       	subi	r22, 0xFF	; 255
    855e:	7f 4f       	sbci	r23, 0xFF	; 255
    8560:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint8_t direction = token[0]-'0';
    8564:	fc 01       	movw	r30, r24
    8566:	10 81       	ld	r17, Z
    8568:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    856a:	be 01       	movw	r22, r28
    856c:	6f 5f       	subi	r22, 0xFF	; 255
    856e:	7f 4f       	sbci	r23, 0xFF	; 255
    8570:	80 e0       	ldi	r24, 0x00	; 0
    8572:	90 e0       	ldi	r25, 0x00	; 0
    8574:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    8578:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>

	set_mm_per_kilostep(direction, mm_per_kilostep);
    857c:	bc 01       	movw	r22, r24
    857e:	81 2f       	mov	r24, r17
    8580:	0e 94 6e 22 	call	0x44dc	; 0x44dc <set_mm_per_kilostep>
	
}
    8584:	0f 90       	pop	r0
    8586:	0f 90       	pop	r0
    8588:	df 91       	pop	r29
    858a:	cf 91       	pop	r28
    858c:	1f 91       	pop	r17
    858e:	08 95       	ret

00008590 <handle_rnb_broadcast>:

/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
void handle_rnb_broadcast(){
	schedule_task(5,broadcast_rnb_data,NULL);
    8590:	20 e0       	ldi	r18, 0x00	; 0
    8592:	30 e0       	ldi	r19, 0x00	; 0
    8594:	4d eb       	ldi	r20, 0xBD	; 189
    8596:	5c e2       	ldi	r21, 0x2C	; 44
    8598:	65 e0       	ldi	r22, 0x05	; 5
    859a:	70 e0       	ldi	r23, 0x00	; 0
    859c:	80 e0       	ldi	r24, 0x00	; 0
    859e:	90 e0       	ldi	r25, 0x00	; 0
    85a0:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    85a4:	08 95       	ret

000085a6 <handle_set_led>:
}

void handle_set_led(char* command_args){
    85a6:	8f 92       	push	r8
    85a8:	9f 92       	push	r9
    85aa:	af 92       	push	r10
    85ac:	bf 92       	push	r11
    85ae:	cf 92       	push	r12
    85b0:	df 92       	push	r13
    85b2:	ef 92       	push	r14
    85b4:	ff 92       	push	r15
    85b6:	0f 93       	push	r16
    85b8:	1f 93       	push	r17
    85ba:	cf 93       	push	r28
    85bc:	df 93       	push	r29
    85be:	1f 92       	push	r1
    85c0:	1f 92       	push	r1
    85c2:	cd b7       	in	r28, 0x3d	; 61
    85c4:	de b7       	in	r29, 0x3e	; 62
    85c6:	98 2e       	mov	r9, r24
    85c8:	89 2e       	mov	r8, r25
	const char delim[2] = " ";
    85ca:	80 e2       	ldi	r24, 0x20	; 32
    85cc:	90 e0       	ldi	r25, 0x00	; 0
    85ce:	89 83       	std	Y+1, r24	; 0x01
    85d0:	9a 83       	std	Y+2, r25	; 0x02
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    85d2:	be 01       	movw	r22, r28
    85d4:	6f 5f       	subi	r22, 0xFF	; 255
    85d6:	7f 4f       	sbci	r23, 0xFF	; 255
    85d8:	89 2d       	mov	r24, r9
    85da:	98 2d       	mov	r25, r8
    85dc:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
    85e0:	6c 01       	movw	r12, r24
	
	int length = strlen(colors);
    85e2:	fc 01       	movw	r30, r24
    85e4:	01 90       	ld	r0, Z+
    85e6:	00 20       	and	r0, r0
    85e8:	e9 f7       	brne	.-6      	; 0x85e4 <handle_set_led+0x3e>
    85ea:	31 97       	sbiw	r30, 0x01	; 1
    85ec:	7f 01       	movw	r14, r30
    85ee:	e8 1a       	sub	r14, r24
    85f0:	f9 0a       	sbc	r15, r25

	if(strcmp(colors,"hsv")==0){
    85f2:	68 e9       	ldi	r22, 0x98	; 152
    85f4:	73 e2       	ldi	r23, 0x23	; 35
    85f6:	0e 94 fd 53 	call	0xa7fa	; 0xa7fa <strcmp>
    85fa:	89 2b       	or	r24, r25
    85fc:	21 f0       	breq	.+8      	; 0x8606 <handle_set_led+0x60>
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
    85fe:	1e 14       	cp	r1, r14
    8600:	1f 04       	cpc	r1, r15
    8602:	24 f1       	brlt	.+72     	; 0x864c <handle_set_led+0xa6>
    8604:	5b c0       	rjmp	.+182    	; 0x86bc <handle_set_led+0x116>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    8606:	be 01       	movw	r22, r28
    8608:	6f 5f       	subi	r22, 0xFF	; 255
    860a:	7f 4f       	sbci	r23, 0xFF	; 255
    860c:	80 e0       	ldi	r24, 0x00	; 0
    860e:	90 e0       	ldi	r25, 0x00	; 0
    8610:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
		hVal = atoi(token);
    8614:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8618:	8c 01       	movw	r16, r24
		token = strtok(NULL,delim);
    861a:	be 01       	movw	r22, r28
    861c:	6f 5f       	subi	r22, 0xFF	; 255
    861e:	7f 4f       	sbci	r23, 0xFF	; 255
    8620:	80 e0       	ldi	r24, 0x00	; 0
    8622:	90 e0       	ldi	r25, 0x00	; 0
    8624:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
		sVal = atoi(token);
    8628:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    862c:	f8 2e       	mov	r15, r24
		token = strtok(NULL,delim);	
    862e:	be 01       	movw	r22, r28
    8630:	6f 5f       	subi	r22, 0xFF	; 255
    8632:	7f 4f       	sbci	r23, 0xFF	; 255
    8634:	80 e0       	ldi	r24, 0x00	; 0
    8636:	90 e0       	ldi	r25, 0x00	; 0
    8638:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
		vVal = atoi(token);
    863c:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
		set_hsv(hVal,sVal,vVal);
    8640:	48 2f       	mov	r20, r24
    8642:	6f 2d       	mov	r22, r15
    8644:	c8 01       	movw	r24, r16
    8646:	0e 94 75 37 	call	0x6eea	; 0x6eea <set_hsv>
    864a:	54 c0       	rjmp	.+168    	; 0x86f4 <handle_set_led+0x14e>
    864c:	86 01       	movw	r16, r12
    864e:	ec 0c       	add	r14, r12
    8650:	fd 1c       	adc	r15, r13
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    8652:	0f 2e       	mov	r0, r31
    8654:	f0 e4       	ldi	r31, 0x40	; 64
    8656:	cf 2e       	mov	r12, r31
    8658:	f9 e0       	ldi	r31, 0x09	; 9
    865a:	df 2e       	mov	r13, r31
    865c:	f0 2d       	mov	r31, r0
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    865e:	0f 2e       	mov	r0, r31
    8660:	f0 e4       	ldi	r31, 0x40	; 64
    8662:	af 2e       	mov	r10, r31
    8664:	fa e0       	ldi	r31, 0x0A	; 10
    8666:	bf 2e       	mov	r11, r31
    8668:	f0 2d       	mov	r31, r0
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
			token = strtok(NULL,delim);
    866a:	be 01       	movw	r22, r28
    866c:	6f 5f       	subi	r22, 0xFF	; 255
    866e:	7f 4f       	sbci	r23, 0xFF	; 255
    8670:	80 e0       	ldi	r24, 0x00	; 0
    8672:	90 e0       	ldi	r25, 0x00	; 0
    8674:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <strtok>
			if(colors[i]=='r'){
    8678:	f8 01       	movw	r30, r16
    867a:	21 91       	ld	r18, Z+
    867c:	8f 01       	movw	r16, r30
    867e:	22 37       	cpi	r18, 0x72	; 114
    8680:	39 f4       	brne	.+14     	; 0x8690 <handle_set_led+0xea>
				set_red_led(atoi(token));
    8682:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8686:	99 27       	eor	r25, r25

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    8688:	f5 01       	movw	r30, r10
    868a:	82 af       	std	Z+58, r24	; 0x3a
    868c:	93 af       	std	Z+59, r25	; 0x3b
    868e:	12 c0       	rjmp	.+36     	; 0x86b4 <handle_set_led+0x10e>
				successful_read=1;
			}else if(colors[i]=='g'){
    8690:	27 36       	cpi	r18, 0x67	; 103
    8692:	39 f4       	brne	.+14     	; 0x86a2 <handle_set_led+0xfc>
				set_green_led(atoi(token));
    8694:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    8698:	99 27       	eor	r25, r25

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    869a:	f5 01       	movw	r30, r10
    869c:	80 af       	std	Z+56, r24	; 0x38
    869e:	91 af       	std	Z+57, r25	; 0x39
    86a0:	09 c0       	rjmp	.+18     	; 0x86b4 <handle_set_led+0x10e>
				successful_read=1;
			}else if(colors[i]=='b'){
    86a2:	22 36       	cpi	r18, 0x62	; 98
    86a4:	59 f4       	brne	.+22     	; 0x86bc <handle_set_led+0x116>
				set_blue_led(atoi(token));
    86a6:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
    86aa:	9c 01       	movw	r18, r24
    86ac:	33 27       	eor	r19, r19
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    86ae:	f6 01       	movw	r30, r12
    86b0:	20 af       	std	Z+56, r18	; 0x38
    86b2:	31 af       	std	Z+57, r19	; 0x39
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
    86b4:	0e 15       	cp	r16, r14
    86b6:	1f 05       	cpc	r17, r15
    86b8:	c1 f6       	brne	.-80     	; 0x866a <handle_set_led+0xc4>
    86ba:	1c c0       	rjmp	.+56     	; 0x86f4 <handle_set_led+0x14e>
			}
		}
	}

	if(successful_read!=1){
		printf_P(PSTR("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n"),command_args);
    86bc:	8f 92       	push	r8
    86be:	9f 92       	push	r9
    86c0:	8f e5       	ldi	r24, 0x5F	; 95
    86c2:	9b e0       	ldi	r25, 0x0B	; 11
    86c4:	9f 93       	push	r25
    86c6:	8f 93       	push	r24
    86c8:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		printf_P(PSTR("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n"));
    86cc:	8b e1       	ldi	r24, 0x1B	; 27
    86ce:	9b e0       	ldi	r25, 0x0B	; 11
    86d0:	9f 93       	push	r25
    86d2:	8f 93       	push	r24
    86d4:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		printf_P(PSTR("\t order, indicating the brightness of the associated LEDs. Example: \r\n"));
    86d8:	84 ed       	ldi	r24, 0xD4	; 212
    86da:	9a e0       	ldi	r25, 0x0A	; 10
    86dc:	9f 93       	push	r25
    86de:	8f 93       	push	r24
    86e0:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		printf_P(PSTR("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n"));
    86e4:	85 ea       	ldi	r24, 0xA5	; 165
    86e6:	9a e0       	ldi	r25, 0x0A	; 10
    86e8:	9f 93       	push	r25
    86ea:	8f 93       	push	r24
    86ec:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    86f0:	cd bf       	out	0x3d, r28	; 61
    86f2:	de bf       	out	0x3e, r29	; 62
	}
}
    86f4:	0f 90       	pop	r0
    86f6:	0f 90       	pop	r0
    86f8:	df 91       	pop	r29
    86fa:	cf 91       	pop	r28
    86fc:	1f 91       	pop	r17
    86fe:	0f 91       	pop	r16
    8700:	ff 90       	pop	r15
    8702:	ef 90       	pop	r14
    8704:	df 90       	pop	r13
    8706:	cf 90       	pop	r12
    8708:	bf 90       	pop	r11
    870a:	af 90       	pop	r10
    870c:	9f 90       	pop	r9
    870e:	8f 90       	pop	r8
    8710:	08 95       	ret

00008712 <handle_broadcast_id>:

void handle_broadcast_id(){
	schedule_task(5, send_id, NULL);
    8712:	20 e0       	ldi	r18, 0x00	; 0
    8714:	30 e0       	ldi	r19, 0x00	; 0
    8716:	43 e8       	ldi	r20, 0x83	; 131
    8718:	5f e3       	ldi	r21, 0x3F	; 63
    871a:	65 e0       	ldi	r22, 0x05	; 5
    871c:	70 e0       	ldi	r23, 0x00	; 0
    871e:	80 e0       	ldi	r24, 0x00	; 0
    8720:	90 e0       	ldi	r25, 0x00	; 0
    8722:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <schedule_task>
    8726:	08 95       	ret

00008728 <handle_get_id>:
}

void handle_get_id(){
	printf_P(PSTR("My ID is: %04X\r\n"),get_droplet_id());
    8728:	80 91 b1 23 	lds	r24, 0x23B1
    872c:	8f 93       	push	r24
    872e:	80 91 b0 23 	lds	r24, 0x23B0
    8732:	8f 93       	push	r24
    8734:	84 e9       	ldi	r24, 0x94	; 148
    8736:	9a e0       	ldi	r25, 0x0A	; 10
    8738:	9f 93       	push	r25
    873a:	8f 93       	push	r24
    873c:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    8740:	0f 90       	pop	r0
    8742:	0f 90       	pop	r0
    8744:	0f 90       	pop	r0
    8746:	0f 90       	pop	r0
    8748:	08 95       	ret

0000874a <handle_cmd>:
	char msg[5];
	sprintf(msg, "%04X", get_droplet_id());
	ir_send(ALL_DIRS, msg, 4);
}

void handle_cmd(char* command_args){
    874a:	cf 93       	push	r28
    874c:	df 93       	push	r29
    874e:	d8 2f       	mov	r29, r24
    8750:	c9 2f       	mov	r28, r25
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"),(uint8_t*)command_args, strlen(command_args));
    8752:	a8 2f       	mov	r26, r24
    8754:	b9 2f       	mov	r27, r25
    8756:	fd 01       	movw	r30, r26
    8758:	01 90       	ld	r0, Z+
    875a:	00 20       	and	r0, r0
    875c:	e9 f7       	brne	.-6      	; 0x8758 <handle_cmd+0xe>
    875e:	31 97       	sbiw	r30, 0x01	; 1
    8760:	ea 1b       	sub	r30, r26
    8762:	fb 0b       	sbc	r31, r27
    8764:	ff 93       	push	r31
    8766:	ef 93       	push	r30
    8768:	9f 93       	push	r25
    876a:	8f 93       	push	r24
    876c:	88 e6       	ldi	r24, 0x68	; 104
    876e:	9a e0       	ldi	r25, 0x0A	; 10
    8770:	9f 93       	push	r25
    8772:	8f 93       	push	r24
    8774:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    8778:	ad 2f       	mov	r26, r29
    877a:	bc 2f       	mov	r27, r28
    877c:	fd 01       	movw	r30, r26
    877e:	01 90       	ld	r0, Z+
    8780:	00 20       	and	r0, r0
    8782:	e9 f7       	brne	.-6      	; 0x877e <handle_cmd+0x34>
    8784:	31 97       	sbiw	r30, 0x01	; 1
    8786:	af 01       	movw	r20, r30
    8788:	4a 1b       	sub	r20, r26
    878a:	5b 0b       	sbc	r21, r27
    878c:	6d 2f       	mov	r22, r29
    878e:	7c 2f       	mov	r23, r28
    8790:	8f e3       	ldi	r24, 0x3F	; 63
    8792:	0e 94 28 17 	call	0x2e50	; 0x2e50 <ir_cmd>
    8796:	0f 90       	pop	r0
    8798:	0f 90       	pop	r0
    879a:	0f 90       	pop	r0
    879c:	0f 90       	pop	r0
    879e:	0f 90       	pop	r0
    87a0:	0f 90       	pop	r0
	//
	//else
	//{
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}
    87a2:	df 91       	pop	r29
    87a4:	cf 91       	pop	r28
    87a6:	08 95       	ret

000087a8 <handle_targeted_cmd>:

void handle_targeted_cmd(char* command_args){
    87a8:	cf 92       	push	r12
    87aa:	df 92       	push	r13
    87ac:	ef 92       	push	r14
    87ae:	ff 92       	push	r15
    87b0:	0f 93       	push	r16
    87b2:	1f 93       	push	r17
    87b4:	cf 93       	push	r28
    87b6:	df 93       	push	r29
    87b8:	cd b7       	in	r28, 0x3d	; 61
    87ba:	de b7       	in	r29, 0x3e	; 62
    87bc:	a5 97       	sbiw	r28, 0x25	; 37
    87be:	cd bf       	out	0x3d, r28	; 61
    87c0:	de bf       	out	0x3e, r29	; 62
    87c2:	7c 01       	movw	r14, r24
	uint8_t loc = strcspn(command_args, " ");
    87c4:	6a e5       	ldi	r22, 0x5A	; 90
    87c6:	72 e2       	ldi	r23, 0x22	; 34
    87c8:	0e 94 0d 54 	call	0xa81a	; 0xa81a <strcspn>
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    87cc:	8c 01       	movw	r16, r24
    87ce:	11 27       	eor	r17, r17
    87d0:	a8 01       	movw	r20, r16
    87d2:	b7 01       	movw	r22, r14
    87d4:	ce 01       	movw	r24, r28
    87d6:	01 96       	adiw	r24, 0x01	; 1
    87d8:	0e 94 1c 54 	call	0xa838	; 0xa838 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    87dc:	0f 5f       	subi	r16, 0xFF	; 255
    87de:	1f 4f       	sbci	r17, 0xFF	; 255
    87e0:	b7 01       	movw	r22, r14
    87e2:	60 0f       	add	r22, r16
    87e4:	71 1f       	adc	r23, r17
    87e6:	8e 01       	movw	r16, r28
    87e8:	0a 5f       	subi	r16, 0xFA	; 250
    87ea:	1f 4f       	sbci	r17, 0xFF	; 255
    87ec:	c8 01       	movw	r24, r16
    87ee:	0e 94 06 54 	call	0xa80c	; 0xa80c <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    87f2:	40 e1       	ldi	r20, 0x10	; 16
    87f4:	50 e0       	ldi	r21, 0x00	; 0
    87f6:	60 e0       	ldi	r22, 0x00	; 0
    87f8:	70 e0       	ldi	r23, 0x00	; 0
    87fa:	ce 01       	movw	r24, r28
    87fc:	01 96       	adiw	r24, 0x01	; 1
    87fe:	0e 94 a9 51 	call	0xa352	; 0xa352 <strtoul>
    8802:	6b 01       	movw	r12, r22
    8804:	7c 01       	movw	r14, r24
	printf_P(PSTR("command string: %s, length: %d\r\n"),cmdString, strlen(cmdString));
    8806:	f8 01       	movw	r30, r16
    8808:	01 90       	ld	r0, Z+
    880a:	00 20       	and	r0, r0
    880c:	e9 f7       	brne	.-6      	; 0x8808 <handle_targeted_cmd+0x60>
    880e:	31 97       	sbiw	r30, 0x01	; 1
    8810:	e0 1b       	sub	r30, r16
    8812:	f1 0b       	sbc	r31, r17
    8814:	ff 93       	push	r31
    8816:	ef 93       	push	r30
    8818:	1f 93       	push	r17
    881a:	0f 93       	push	r16
    881c:	87 e4       	ldi	r24, 0x47	; 71
    881e:	9a e0       	ldi	r25, 0x0A	; 10
    8820:	9f 93       	push	r25
    8822:	8f 93       	push	r24
    8824:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    8828:	f8 01       	movw	r30, r16
    882a:	01 90       	ld	r0, Z+
    882c:	00 20       	and	r0, r0
    882e:	e9 f7       	brne	.-6      	; 0x882a <handle_targeted_cmd+0x82>
    8830:	31 97       	sbiw	r30, 0x01	; 1
    8832:	af 01       	movw	r20, r30
    8834:	40 1b       	sub	r20, r16
    8836:	51 0b       	sbc	r21, r17
    8838:	96 01       	movw	r18, r12
    883a:	b8 01       	movw	r22, r16
    883c:	8f e3       	ldi	r24, 0x3F	; 63
    883e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <ir_targeted_cmd>
    8842:	0f 90       	pop	r0
    8844:	0f 90       	pop	r0
    8846:	0f 90       	pop	r0
    8848:	0f 90       	pop	r0
    884a:	0f 90       	pop	r0
    884c:	0f 90       	pop	r0
}
    884e:	a5 96       	adiw	r28, 0x25	; 37
    8850:	cd bf       	out	0x3d, r28	; 61
    8852:	de bf       	out	0x3e, r29	; 62
    8854:	df 91       	pop	r29
    8856:	cf 91       	pop	r28
    8858:	1f 91       	pop	r17
    885a:	0f 91       	pop	r16
    885c:	ff 90       	pop	r15
    885e:	ef 90       	pop	r14
    8860:	df 90       	pop	r13
    8862:	cf 90       	pop	r12
    8864:	08 95       	ret

00008866 <handle_shout>:

void handle_shout(char* command_args){
    8866:	fc 01       	movw	r30, r24
	if(strlen(command_args)==0){
    8868:	80 81       	ld	r24, Z
    886a:	88 23       	and	r24, r24
    886c:	e1 f0       	breq	.+56     	; 0x88a6 <handle_shout+0x40>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    886e:	df 01       	movw	r26, r30
    8870:	0d 90       	ld	r0, X+
    8872:	00 20       	and	r0, r0
    8874:	e9 f7       	brne	.-6      	; 0x8870 <handle_shout+0xa>
    8876:	11 97       	sbiw	r26, 0x01	; 1
    8878:	ae 1b       	sub	r26, r30
    887a:	bf 0b       	sbc	r27, r31
    887c:	a9 32       	cpi	r26, 0x29	; 41
    887e:	b1 05       	cpc	r27, r1
    8880:	a0 f0       	brcs	.+40     	; 0x88aa <handle_shout+0x44>
		printf_P(PSTR("Message length was %d chars, which exceeds the maximum of %d"), strlen(command_args), IR_BUFFER_SIZE);
    8882:	1f 92       	push	r1
    8884:	88 e2       	ldi	r24, 0x28	; 40
    8886:	8f 93       	push	r24
    8888:	bf 93       	push	r27
    888a:	af 93       	push	r26
    888c:	8a e0       	ldi	r24, 0x0A	; 10
    888e:	9a e0       	ldi	r25, 0x0A	; 10
    8890:	9f 93       	push	r25
    8892:	8f 93       	push	r24
    8894:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
		return;
    8898:	0f 90       	pop	r0
    889a:	0f 90       	pop	r0
    889c:	0f 90       	pop	r0
    889e:	0f 90       	pop	r0
    88a0:	0f 90       	pop	r0
    88a2:	0f 90       	pop	r0
    88a4:	08 95       	ret
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
}

void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    88a6:	ec e9       	ldi	r30, 0x9C	; 156
    88a8:	f3 e2       	ldi	r31, 0x23	; 35
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %d chars, which exceeds the maximum of %d"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	ir_send(ALL_DIRS, command_args,strlen(command_args));
    88aa:	df 01       	movw	r26, r30
    88ac:	0d 90       	ld	r0, X+
    88ae:	00 20       	and	r0, r0
    88b0:	e9 f7       	brne	.-6      	; 0x88ac <handle_shout+0x46>
    88b2:	11 97       	sbiw	r26, 0x01	; 1
    88b4:	ad 01       	movw	r20, r26
    88b6:	4e 1b       	sub	r20, r30
    88b8:	5f 0b       	sbc	r21, r31
    88ba:	bf 01       	movw	r22, r30
    88bc:	8f e3       	ldi	r24, 0x3F	; 63
    88be:	0e 94 2b 18 	call	0x3056	; 0x3056 <ir_send>
    88c2:	08 95       	ret

000088c4 <handle_msg_test>:
}

void handle_msg_test(char* command_args){
    88c4:	cf 93       	push	r28
    88c6:	df 93       	push	r29
    88c8:	cd b7       	in	r28, 0x3d	; 61
    88ca:	de b7       	in	r29, 0x3e	; 62
    88cc:	60 97       	sbiw	r28, 0x10	; 16
    88ce:	cd bf       	out	0x3d, r28	; 61
    88d0:	de bf       	out	0x3e, r29	; 62
	uint8_t dir_mask = atoi(command_args);
    88d2:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <atoi>
	char msg[16] = "Unique New York.";
    88d6:	90 e1       	ldi	r25, 0x10	; 16
    88d8:	ec e9       	ldi	r30, 0x9C	; 156
    88da:	f3 e2       	ldi	r31, 0x23	; 35
    88dc:	de 01       	movw	r26, r28
    88de:	11 96       	adiw	r26, 0x01	; 1
    88e0:	01 90       	ld	r0, Z+
    88e2:	0d 92       	st	X+, r0
    88e4:	9a 95       	dec	r25
    88e6:	e1 f7       	brne	.-8      	; 0x88e0 <handle_msg_test+0x1c>
	
	ir_send(dir_mask, msg,16);
    88e8:	40 e1       	ldi	r20, 0x10	; 16
    88ea:	be 01       	movw	r22, r28
    88ec:	6f 5f       	subi	r22, 0xFF	; 255
    88ee:	7f 4f       	sbci	r23, 0xFF	; 255
    88f0:	0e 94 2b 18 	call	0x3056	; 0x3056 <ir_send>
}
    88f4:	60 96       	adiw	r28, 0x10	; 16
    88f6:	cd bf       	out	0x3d, r28	; 61
    88f8:	de bf       	out	0x3e, r29	; 62
    88fa:	df 91       	pop	r29
    88fc:	cf 91       	pop	r28
    88fe:	08 95       	ret

00008900 <handle_target>:

void handle_target(char* command_args){
    8900:	ef 92       	push	r14
    8902:	ff 92       	push	r15
    8904:	0f 93       	push	r16
    8906:	1f 93       	push	r17
    8908:	cf 93       	push	r28
    890a:	df 93       	push	r29
    890c:	cd b7       	in	r28, 0x3d	; 61
    890e:	de b7       	in	r29, 0x3e	; 62
    8910:	a5 97       	sbiw	r28, 0x25	; 37
    8912:	cd bf       	out	0x3d, r28	; 61
    8914:	de bf       	out	0x3e, r29	; 62
    8916:	7c 01       	movw	r14, r24
	uint8_t loc = strcspn(command_args, " ");
    8918:	6a e5       	ldi	r22, 0x5A	; 90
    891a:	72 e2       	ldi	r23, 0x22	; 34
    891c:	0e 94 0d 54 	call	0xa81a	; 0xa81a <strcspn>
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    8920:	8c 01       	movw	r16, r24
    8922:	11 27       	eor	r17, r17
    8924:	a8 01       	movw	r20, r16
    8926:	b7 01       	movw	r22, r14
    8928:	ce 01       	movw	r24, r28
    892a:	01 96       	adiw	r24, 0x01	; 1
    892c:	0e 94 1c 54 	call	0xa838	; 0xa838 <strncpy>
	strcpy(msgString, command_args+loc);
    8930:	b7 01       	movw	r22, r14
    8932:	60 0f       	add	r22, r16
    8934:	71 1f       	adc	r23, r17
    8936:	7e 01       	movw	r14, r28
    8938:	86 e0       	ldi	r24, 0x06	; 6
    893a:	e8 0e       	add	r14, r24
    893c:	f1 1c       	adc	r15, r1
    893e:	c7 01       	movw	r24, r14
    8940:	0e 94 06 54 	call	0xa80c	; 0xa80c <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    8944:	40 e1       	ldi	r20, 0x10	; 16
    8946:	50 e0       	ldi	r21, 0x00	; 0
    8948:	60 e0       	ldi	r22, 0x00	; 0
    894a:	70 e0       	ldi	r23, 0x00	; 0
    894c:	ce 01       	movw	r24, r28
    894e:	01 96       	adiw	r24, 0x01	; 1
    8950:	0e 94 a9 51 	call	0xa352	; 0xa352 <strtoul>
	
	//printf("Target: %04X\r\n",target);
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    8954:	f7 01       	movw	r30, r14
    8956:	01 90       	ld	r0, Z+
    8958:	00 20       	and	r0, r0
    895a:	e9 f7       	brne	.-6      	; 0x8956 <handle_target+0x56>
    895c:	31 97       	sbiw	r30, 0x01	; 1
    895e:	af 01       	movw	r20, r30
    8960:	4e 19       	sub	r20, r14
    8962:	5f 09       	sbc	r21, r15
    8964:	9b 01       	movw	r18, r22
    8966:	b7 01       	movw	r22, r14
    8968:	8f e3       	ldi	r24, 0x3F	; 63
    896a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ir_targeted_send>
} 
    896e:	a5 96       	adiw	r28, 0x25	; 37
    8970:	cd bf       	out	0x3d, r28	; 61
    8972:	de bf       	out	0x3e, r29	; 62
    8974:	df 91       	pop	r29
    8976:	cf 91       	pop	r28
    8978:	1f 91       	pop	r17
    897a:	0f 91       	pop	r16
    897c:	ff 90       	pop	r15
    897e:	ef 90       	pop	r14
    8980:	08 95       	ret

00008982 <get_command_word_and_args>:


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
    8982:	cf 93       	push	r28
    8984:	df 93       	push	r29
    8986:	fc 01       	movw	r30, r24
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    8988:	61 15       	cp	r22, r1
    898a:	71 05       	cpc	r23, r1
    898c:	71 f1       	breq	.+92     	; 0x89ea <get_command_word_and_args+0x68>
		if(command[i]=='\0'){
    898e:	90 81       	ld	r25, Z
    8990:	99 23       	and	r25, r25
    8992:	71 f1       	breq	.+92     	; 0x89f0 <get_command_word_and_args+0x6e>
    8994:	df 01       	movw	r26, r30
    8996:	11 96       	adiw	r26, 0x01	; 1
    8998:	6e 0f       	add	r22, r30
    899a:	7f 1f       	adc	r23, r31
    899c:	81 e0       	ldi	r24, 0x01	; 1
    899e:	e0 e0       	ldi	r30, 0x00	; 0
    89a0:	f0 e0       	ldi	r31, 0x00	; 0
    89a2:	03 c0       	rjmp	.+6      	; 0x89aa <get_command_word_and_args+0x28>
    89a4:	9d 91       	ld	r25, X+
    89a6:	99 23       	and	r25, r25
    89a8:	e1 f0       	breq	.+56     	; 0x89e2 <get_command_word_and_args+0x60>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    89aa:	90 32       	cpi	r25, 0x20	; 32
    89ac:	49 f4       	brne	.+18     	; 0x89c0 <get_command_word_and_args+0x3e>
    89ae:	81 30       	cpi	r24, 0x01	; 1
    89b0:	71 f4       	brne	.+28     	; 0x89ce <get_command_word_and_args+0x4c>
			command_word[write_index]='\0';
    89b2:	e4 0f       	add	r30, r20
    89b4:	f5 1f       	adc	r31, r21
    89b6:	10 82       	st	Z, r1
			write_index = 0;
			writing_word_boole = 0;
    89b8:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    89ba:	e0 e0       	ldi	r30, 0x00	; 0
    89bc:	f0 e0       	ldi	r31, 0x00	; 0
			writing_word_boole = 0;
    89be:	0c c0       	rjmp	.+24     	; 0x89d8 <get_command_word_and_args+0x56>
		}else{
			if(writing_word_boole==1){
    89c0:	81 30       	cpi	r24, 0x01	; 1
    89c2:	29 f4       	brne	.+10     	; 0x89ce <get_command_word_and_args+0x4c>
				command_word[write_index] = command[i];
    89c4:	ea 01       	movw	r28, r20
    89c6:	ce 0f       	add	r28, r30
    89c8:	df 1f       	adc	r29, r31
    89ca:	98 83       	st	Y, r25
    89cc:	04 c0       	rjmp	.+8      	; 0x89d6 <get_command_word_and_args+0x54>
			}else{
				command_args[write_index] = command[i];
    89ce:	e9 01       	movw	r28, r18
    89d0:	ce 0f       	add	r28, r30
    89d2:	df 1f       	adc	r29, r31
    89d4:	98 83       	st	Y, r25
			}
			write_index++;
    89d6:	31 96       	adiw	r30, 0x01	; 1

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    89d8:	a6 17       	cp	r26, r22
    89da:	b7 07       	cpc	r27, r23
    89dc:	19 f7       	brne	.-58     	; 0x89a4 <get_command_word_and_args+0x22>
    89de:	bf 01       	movw	r22, r30
    89e0:	01 c0       	rjmp	.+2      	; 0x89e4 <get_command_word_and_args+0x62>
    89e2:	bf 01       	movw	r22, r30
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    89e4:	81 30       	cpi	r24, 0x01	; 1
    89e6:	61 f4       	brne	.+24     	; 0x8a00 <get_command_word_and_args+0x7e>
    89e8:	05 c0       	rjmp	.+10     	; 0x89f4 <get_command_word_and_args+0x72>

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    89ea:	e0 e0       	ldi	r30, 0x00	; 0
    89ec:	f0 e0       	ldi	r31, 0x00	; 0
    89ee:	02 c0       	rjmp	.+4      	; 0x89f4 <get_command_word_and_args+0x72>
		if(command[i]=='\0'){
    89f0:	e0 e0       	ldi	r30, 0x00	; 0
    89f2:	f0 e0       	ldi	r31, 0x00	; 0
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    89f4:	e4 0f       	add	r30, r20
    89f6:	f5 1f       	adc	r31, r21
    89f8:	10 82       	st	Z, r1
		command_args[0] = '\0';
    89fa:	f9 01       	movw	r30, r18
    89fc:	10 82       	st	Z, r1
    89fe:	04 c0       	rjmp	.+8      	; 0x8a08 <get_command_word_and_args+0x86>
	}else{
		command_args[write_index] = '\0';
    8a00:	f9 01       	movw	r30, r18
    8a02:	e6 0f       	add	r30, r22
    8a04:	f7 1f       	adc	r31, r23
    8a06:	10 82       	st	Z, r1
	}
}
    8a08:	df 91       	pop	r29
    8a0a:	cf 91       	pop	r28
    8a0c:	08 95       	ret

00008a0e <handle_serial_command>:
#include "serial_handler.h"

uint8_t user_handle_command(char* command_word, char* command_args) __attribute__((weak));

void handle_serial_command(char* command, uint16_t command_length){
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
    8a12:	cd b7       	in	r28, 0x3d	; 61
    8a14:	de b7       	in	r29, 0x3e	; 62
    8a16:	c0 58       	subi	r28, 0x80	; 128
    8a18:	d1 09       	sbc	r29, r1
    8a1a:	cd bf       	out	0x3d, r28	; 61
    8a1c:	de bf       	out	0x3e, r29	; 62
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    8a1e:	fc 01       	movw	r30, r24
    8a20:	20 81       	ld	r18, Z
    8a22:	22 23       	and	r18, r18
    8a24:	09 f4       	brne	.+2      	; 0x8a28 <handle_serial_command+0x1a>
    8a26:	57 c1       	rjmp	.+686    	; 0x8cd6 <handle_serial_command+0x2c8>
		char command_word[BUFFER_SIZE];
		char command_args[BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
    8a28:	9e 01       	movw	r18, r28
    8a2a:	2f 5f       	subi	r18, 0xFF	; 255
    8a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a2e:	ae 01       	movw	r20, r28
    8a30:	4f 5b       	subi	r20, 0xBF	; 191
    8a32:	5f 4f       	sbci	r21, 0xFF	; 255
    8a34:	0e 94 c1 44 	call	0x8982	; 0x8982 <get_command_word_and_args>
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    8a38:	6d e8       	ldi	r22, 0x8D	; 141
    8a3a:	7e e0       	ldi	r23, 0x0E	; 14
    8a3c:	ce 01       	movw	r24, r28
    8a3e:	8f 5b       	subi	r24, 0xBF	; 191
    8a40:	9f 4f       	sbci	r25, 0xFF	; 255
    8a42:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8a46:	89 2b       	or	r24, r25
    8a48:	29 f4       	brne	.+10     	; 0x8a54 <handle_serial_command+0x46>
    8a4a:	ce 01       	movw	r24, r28
    8a4c:	01 96       	adiw	r24, 0x01	; 1
    8a4e:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <handle_move_steps>
    8a52:	41 c1       	rjmp	.+642    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    8a54:	68 e8       	ldi	r22, 0x88	; 136
    8a56:	7e e0       	ldi	r23, 0x0E	; 14
    8a58:	ce 01       	movw	r24, r28
    8a5a:	8f 5b       	subi	r24, 0xBF	; 191
    8a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a5e:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8a62:	89 2b       	or	r24, r25
    8a64:	29 f4       	brne	.+10     	; 0x8a70 <handle_serial_command+0x62>
    8a66:	ce 01       	movw	r24, r28
    8a68:	01 96       	adiw	r24, 0x01	; 1
    8a6a:	0e 94 2e 40 	call	0x805c	; 0x805c <handle_walk>
    8a6e:	33 c1       	rjmp	.+614    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    8a70:	60 e8       	ldi	r22, 0x80	; 128
    8a72:	7e e0       	ldi	r23, 0x0E	; 14
    8a74:	ce 01       	movw	r24, r28
    8a76:	8f 5b       	subi	r24, 0xBF	; 191
    8a78:	9f 4f       	sbci	r25, 0xFF	; 255
    8a7a:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8a7e:	89 2b       	or	r24, r25
    8a80:	19 f4       	brne	.+6      	; 0x8a88 <handle_serial_command+0x7a>
    8a82:	0e 94 54 40 	call	0x80a8	; 0x80a8 <handle_get_rgb>
    8a86:	27 c1       	rjmp	.+590    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    8a88:	69 e7       	ldi	r22, 0x79	; 121
    8a8a:	7e e0       	ldi	r23, 0x0E	; 14
    8a8c:	ce 01       	movw	r24, r28
    8a8e:	8f 5b       	subi	r24, 0xBF	; 191
    8a90:	9f 4f       	sbci	r25, 0xFF	; 255
    8a92:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8a96:	89 2b       	or	r24, r25
    8a98:	29 f4       	brne	.+10     	; 0x8aa4 <handle_serial_command+0x96>
    8a9a:	ce 01       	movw	r24, r28
    8a9c:	01 96       	adiw	r24, 0x01	; 1
    8a9e:	0e 94 7e 40 	call	0x80fc	; 0x80fc <handle_set_ir>
    8aa2:	19 c1       	rjmp	.+562    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    8aa4:	64 e7       	ldi	r22, 0x74	; 116
    8aa6:	7e e0       	ldi	r23, 0x0E	; 14
    8aa8:	ce 01       	movw	r24, r28
    8aaa:	8f 5b       	subi	r24, 0xBF	; 191
    8aac:	9f 4f       	sbci	r25, 0xFF	; 255
    8aae:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8ab2:	89 2b       	or	r24, r25
    8ab4:	19 f4       	brne	.+6      	; 0x8abc <handle_serial_command+0xae>
    8ab6:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <handle_check_collisions>
    8aba:	0d c1       	rjmp	.+538    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    8abc:	6a e6       	ldi	r22, 0x6A	; 106
    8abe:	7e e0       	ldi	r23, 0x0E	; 14
    8ac0:	ce 01       	movw	r24, r28
    8ac2:	8f 5b       	subi	r24, 0xBF	; 191
    8ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ac6:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8aca:	89 2b       	or	r24, r25
    8acc:	19 f4       	brne	.+6      	; 0x8ad4 <handle_serial_command+0xc6>
    8ace:	0e 94 9d 40 	call	0x813a	; 0x813a <handle_stop_walk>
    8ad2:	01 c1       	rjmp	.+514    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    8ad4:	6f e5       	ldi	r22, 0x5F	; 95
    8ad6:	7e e0       	ldi	r23, 0x0E	; 14
    8ad8:	ce 01       	movw	r24, r28
    8ada:	8f 5b       	subi	r24, 0xBF	; 191
    8adc:	9f 4f       	sbci	r25, 0xFF	; 255
    8ade:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8ae2:	89 2b       	or	r24, r25
    8ae4:	29 f4       	brne	.+10     	; 0x8af0 <handle_serial_command+0xe2>
    8ae6:	ce 01       	movw	r24, r28
    8ae8:	01 96       	adiw	r24, 0x01	; 1
    8aea:	0e 94 a2 40 	call	0x8144	; 0x8144 <handle_set_motors>
    8aee:	f3 c0       	rjmp	.+486    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    8af0:	64 e5       	ldi	r22, 0x54	; 84
    8af2:	7e e0       	ldi	r23, 0x0E	; 14
    8af4:	ce 01       	movw	r24, r28
    8af6:	8f 5b       	subi	r24, 0xBF	; 191
    8af8:	9f 4f       	sbci	r25, 0xFF	; 255
    8afa:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8afe:	89 2b       	or	r24, r25
    8b00:	29 f4       	brne	.+10     	; 0x8b0c <handle_serial_command+0xfe>
    8b02:	ce 01       	movw	r24, r28
    8b04:	01 96       	adiw	r24, 0x01	; 1
    8b06:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <handle_adjust_motors>
    8b0a:	e5 c0       	rjmp	.+458    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    8b0c:	62 e4       	ldi	r22, 0x42	; 66
    8b0e:	7e e0       	ldi	r23, 0x0E	; 14
    8b10:	ce 01       	movw	r24, r28
    8b12:	8f 5b       	subi	r24, 0xBF	; 191
    8b14:	9f 4f       	sbci	r25, 0xFF	; 255
    8b16:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8b1a:	89 2b       	or	r24, r25
    8b1c:	29 f4       	brne	.+10     	; 0x8b28 <handle_serial_command+0x11a>
    8b1e:	ce 01       	movw	r24, r28
    8b20:	01 96       	adiw	r24, 0x01	; 1
    8b22:	0e 94 a2 42 	call	0x8544	; 0x8544 <handle_set_mm_per_kilostep>
    8b26:	d7 c0       	rjmp	.+430    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    8b28:	6c e3       	ldi	r22, 0x3C	; 60
    8b2a:	7e e0       	ldi	r23, 0x0E	; 14
    8b2c:	ce 01       	movw	r24, r28
    8b2e:	8f 5b       	subi	r24, 0xBF	; 191
    8b30:	9f 4f       	sbci	r25, 0xFF	; 255
    8b32:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8b36:	89 2b       	or	r24, r25
    8b38:	19 f4       	brne	.+6      	; 0x8b40 <handle_serial_command+0x132>
    8b3a:	0e 94 c8 42 	call	0x8590	; 0x8590 <handle_rnb_broadcast>
    8b3e:	cb c0       	rjmp	.+406    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    8b40:	64 e3       	ldi	r22, 0x34	; 52
    8b42:	7e e0       	ldi	r23, 0x0E	; 14
    8b44:	ce 01       	movw	r24, r28
    8b46:	8f 5b       	subi	r24, 0xBF	; 191
    8b48:	9f 4f       	sbci	r25, 0xFF	; 255
    8b4a:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8b4e:	89 2b       	or	r24, r25
    8b50:	29 f4       	brne	.+10     	; 0x8b5c <handle_serial_command+0x14e>
    8b52:	ce 01       	movw	r24, r28
    8b54:	01 96       	adiw	r24, 0x01	; 1
    8b56:	0e 94 d3 42 	call	0x85a6	; 0x85a6 <handle_set_led>
    8b5a:	bd c0       	rjmp	.+378    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    8b5c:	6d e2       	ldi	r22, 0x2D	; 45
    8b5e:	7e e0       	ldi	r23, 0x0E	; 14
    8b60:	ce 01       	movw	r24, r28
    8b62:	8f 5b       	subi	r24, 0xBF	; 191
    8b64:	9f 4f       	sbci	r25, 0xFF	; 255
    8b66:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8b6a:	89 2b       	or	r24, r25
    8b6c:	19 f4       	brne	.+6      	; 0x8b74 <handle_serial_command+0x166>
    8b6e:	0e 94 94 43 	call	0x8728	; 0x8728 <handle_get_id>
    8b72:	b1 c0       	rjmp	.+354    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    8b74:	60 e2       	ldi	r22, 0x20	; 32
    8b76:	7e e0       	ldi	r23, 0x0E	; 14
    8b78:	ce 01       	movw	r24, r28
    8b7a:	8f 5b       	subi	r24, 0xBF	; 191
    8b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b7e:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8b82:	89 2b       	or	r24, r25
    8b84:	19 f4       	brne	.+6      	; 0x8b8c <handle_serial_command+0x17e>
    8b86:	0e 94 89 43 	call	0x8712	; 0x8712 <handle_broadcast_id>
    8b8a:	a5 c0       	rjmp	.+330    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    8b8c:	6c e1       	ldi	r22, 0x1C	; 28
    8b8e:	7e e0       	ldi	r23, 0x0E	; 14
    8b90:	ce 01       	movw	r24, r28
    8b92:	8f 5b       	subi	r24, 0xBF	; 191
    8b94:	9f 4f       	sbci	r25, 0xFF	; 255
    8b96:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8b9a:	89 2b       	or	r24, r25
    8b9c:	29 f4       	brne	.+10     	; 0x8ba8 <handle_serial_command+0x19a>
    8b9e:	ce 01       	movw	r24, r28
    8ba0:	01 96       	adiw	r24, 0x01	; 1
    8ba2:	0e 94 a5 43 	call	0x874a	; 0x874a <handle_cmd>
    8ba6:	97 c0       	rjmp	.+302    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    8ba8:	64 e1       	ldi	r22, 0x14	; 20
    8baa:	7e e0       	ldi	r23, 0x0E	; 14
    8bac:	ce 01       	movw	r24, r28
    8bae:	8f 5b       	subi	r24, 0xBF	; 191
    8bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    8bb2:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8bb6:	89 2b       	or	r24, r25
    8bb8:	29 f4       	brne	.+10     	; 0x8bc4 <handle_serial_command+0x1b6>
    8bba:	ce 01       	movw	r24, r28
    8bbc:	01 96       	adiw	r24, 0x01	; 1
    8bbe:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <handle_targeted_cmd>
    8bc2:	89 c0       	rjmp	.+274    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    8bc4:	60 e1       	ldi	r22, 0x10	; 16
    8bc6:	7e e0       	ldi	r23, 0x0E	; 14
    8bc8:	ce 01       	movw	r24, r28
    8bca:	8f 5b       	subi	r24, 0xBF	; 191
    8bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    8bce:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8bd2:	89 2b       	or	r24, r25
    8bd4:	29 f4       	brne	.+10     	; 0x8be0 <handle_serial_command+0x1d2>
    8bd6:	ce 01       	movw	r24, r28
    8bd8:	01 96       	adiw	r24, 0x01	; 1
    8bda:	0e 94 33 44 	call	0x8866	; 0x8866 <handle_shout>
    8bde:	7b c0       	rjmp	.+246    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    8be0:	68 e0       	ldi	r22, 0x08	; 8
    8be2:	7e e0       	ldi	r23, 0x0E	; 14
    8be4:	ce 01       	movw	r24, r28
    8be6:	8f 5b       	subi	r24, 0xBF	; 191
    8be8:	9f 4f       	sbci	r25, 0xFF	; 255
    8bea:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8bee:	89 2b       	or	r24, r25
    8bf0:	29 f4       	brne	.+10     	; 0x8bfc <handle_serial_command+0x1ee>
    8bf2:	ce 01       	movw	r24, r28
    8bf4:	01 96       	adiw	r24, 0x01	; 1
    8bf6:	0e 94 62 44 	call	0x88c4	; 0x88c4 <handle_msg_test>
    8bfa:	6d c0       	rjmp	.+218    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    8bfc:	64 e0       	ldi	r22, 0x04	; 4
    8bfe:	7e e0       	ldi	r23, 0x0E	; 14
    8c00:	ce 01       	movw	r24, r28
    8c02:	8f 5b       	subi	r24, 0xBF	; 191
    8c04:	9f 4f       	sbci	r25, 0xFF	; 255
    8c06:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8c0a:	89 2b       	or	r24, r25
    8c0c:	29 f4       	brne	.+10     	; 0x8c18 <handle_serial_command+0x20a>
    8c0e:	ce 01       	movw	r24, r28
    8c10:	01 96       	adiw	r24, 0x01	; 1
    8c12:	0e 94 80 44 	call	0x8900	; 0x8900 <handle_target>
    8c16:	5f c0       	rjmp	.+190    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
    8c18:	6e ef       	ldi	r22, 0xFE	; 254
    8c1a:	7d e0       	ldi	r23, 0x0D	; 13
    8c1c:	ce 01       	movw	r24, r28
    8c1e:	8f 5b       	subi	r24, 0xBF	; 191
    8c20:	9f 4f       	sbci	r25, 0xFF	; 255
    8c22:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8c26:	89 2b       	or	r24, r25
    8c28:	19 f4       	brne	.+6      	; 0x8c30 <handle_serial_command+0x222>
    8c2a:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <print_task_queue>
    8c2e:	53 c0       	rjmp	.+166    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    8c30:	68 ef       	ldi	r22, 0xF8	; 248
    8c32:	7d e0       	ldi	r23, 0x0D	; 13
    8c34:	ce 01       	movw	r24, r28
    8c36:	8f 5b       	subi	r24, 0xBF	; 191
    8c38:	9f 4f       	sbci	r25, 0xFF	; 255
    8c3a:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8c3e:	89 2b       	or	r24, r25
    8c40:	19 f4       	brne	.+6      	; 0x8c48 <handle_serial_command+0x23a>
		command_args[write_index] = '\0';
	}
}

void handle_reset(){
	droplet_reboot();
    8c42:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <droplet_reboot>
    8c46:	47 c0       	rjmp	.+142    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	write_motor_settings();
    8c48:	63 ee       	ldi	r22, 0xE3	; 227
    8c4a:	7d e0       	ldi	r23, 0x0D	; 13
    8c4c:	ce 01       	movw	r24, r28
    8c4e:	8f 5b       	subi	r24, 0xBF	; 191
    8c50:	9f 4f       	sbci	r25, 0xFF	; 255
    8c52:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8c56:	89 2b       	or	r24, r25
    8c58:	19 f4       	brne	.+6      	; 0x8c60 <handle_serial_command+0x252>
    8c5a:	0e 94 ff 22 	call	0x45fe	; 0x45fe <write_motor_settings>
    8c5e:	3b c0       	rjmp	.+118    	; 0x8cd6 <handle_serial_command+0x2c8>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    8c60:	6e ec       	ldi	r22, 0xCE	; 206
    8c62:	7d e0       	ldi	r23, 0x0D	; 13
    8c64:	ce 01       	movw	r24, r28
    8c66:	8f 5b       	subi	r24, 0xBF	; 191
    8c68:	9f 4f       	sbci	r25, 0xFF	; 255
    8c6a:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strcmp_P>
    8c6e:	89 2b       	or	r24, r25
    8c70:	29 f4       	brne	.+10     	; 0x8c7c <handle_serial_command+0x26e>
																		print_motor_values();
    8c72:	0e 94 4c 23 	call	0x4698	; 0x4698 <print_motor_values>
																		print_dist_per_step();																	
    8c76:	0e 94 ad 23 	call	0x475a	; 0x475a <print_dist_per_step>
    8c7a:	2d c0       	rjmp	.+90     	; 0x8cd6 <handle_serial_command+0x2c8>
		}else if(user_handle_command){ //First, make sure the function is defined
    8c7c:	80 e0       	ldi	r24, 0x00	; 0
    8c7e:	90 e0       	ldi	r25, 0x00	; 0
    8c80:	89 2b       	or	r24, r25
    8c82:	d1 f0       	breq	.+52     	; 0x8cb8 <handle_serial_command+0x2aa>
			if(!user_handle_command(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    8c84:	be 01       	movw	r22, r28
    8c86:	6f 5f       	subi	r22, 0xFF	; 255
    8c88:	7f 4f       	sbci	r23, 0xFF	; 255
    8c8a:	ce 01       	movw	r24, r28
    8c8c:	8f 5b       	subi	r24, 0xBF	; 191
    8c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    8c90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    8c94:	81 11       	cpse	r24, r1
    8c96:	1f c0       	rjmp	.+62     	; 0x8cd6 <handle_serial_command+0x2c8>
    8c98:	ce 01       	movw	r24, r28
    8c9a:	8f 5b       	subi	r24, 0xBF	; 191
    8c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    8c9e:	9f 93       	push	r25
    8ca0:	8f 93       	push	r24
    8ca2:	88 e9       	ldi	r24, 0x98	; 152
    8ca4:	9e e0       	ldi	r25, 0x0E	; 14
    8ca6:	9f 93       	push	r25
    8ca8:	8f 93       	push	r24
    8caa:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    8cae:	0f 90       	pop	r0
    8cb0:	0f 90       	pop	r0
    8cb2:	0f 90       	pop	r0
    8cb4:	0f 90       	pop	r0
    8cb6:	0f c0       	rjmp	.+30     	; 0x8cd6 <handle_serial_command+0x2c8>
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    8cb8:	ce 01       	movw	r24, r28
    8cba:	8f 5b       	subi	r24, 0xBF	; 191
    8cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    8cbe:	9f 93       	push	r25
    8cc0:	8f 93       	push	r24
    8cc2:	88 e9       	ldi	r24, 0x98	; 152
    8cc4:	9e e0       	ldi	r25, 0x0E	; 14
    8cc6:	9f 93       	push	r25
    8cc8:	8f 93       	push	r24
    8cca:	0e 94 b1 54 	call	0xa962	; 0xa962 <printf_P>
    8cce:	0f 90       	pop	r0
    8cd0:	0f 90       	pop	r0
    8cd2:	0f 90       	pop	r0
    8cd4:	0f 90       	pop	r0
	}
}
    8cd6:	c0 58       	subi	r28, 0x80	; 128
    8cd8:	df 4f       	sbci	r29, 0xFF	; 255
    8cda:	cd bf       	out	0x3d, r28	; 61
    8cdc:	de bf       	out	0x3e, r29	; 62
    8cde:	df 91       	pop	r29
    8ce0:	cf 91       	pop	r28
    8ce2:	08 95       	ret

00008ce4 <init>:
 * Any code in this function will be run once, when the robot starts.
 */
uint32_t data = 55;
void init()
{
	writeRead();
    8ce4:	0e 94 82 0c 	call	0x1904	; 0x1904 <writeRead>
    8ce8:	08 95       	ret

00008cea <loop>:
/*
 * The code in this function will be called repeatedly, as fast as it can execute.
 */
int i = 0;
void loop()
{
    8cea:	08 95       	ret

00008cec <handle_msg>:
/*
 * After each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
void handle_msg(ir_msg* msg_struct)
{
    8cec:	08 95       	ret

00008cee <__subsf3>:
    8cee:	50 58       	subi	r21, 0x80	; 128

00008cf0 <__addsf3>:
    8cf0:	bb 27       	eor	r27, r27
    8cf2:	aa 27       	eor	r26, r26
    8cf4:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__addsf3x>
    8cf8:	0c 94 66 49 	jmp	0x92cc	; 0x92cc <__fp_round>
    8cfc:	0e 94 2d 49 	call	0x925a	; 0x925a <__fp_pscA>
    8d00:	38 f0       	brcs	.+14     	; 0x8d10 <__addsf3+0x20>
    8d02:	0e 94 34 49 	call	0x9268	; 0x9268 <__fp_pscB>
    8d06:	20 f0       	brcs	.+8      	; 0x8d10 <__addsf3+0x20>
    8d08:	39 f4       	brne	.+14     	; 0x8d18 <__addsf3+0x28>
    8d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    8d0c:	19 f4       	brne	.+6      	; 0x8d14 <__addsf3+0x24>
    8d0e:	26 f4       	brtc	.+8      	; 0x8d18 <__addsf3+0x28>
    8d10:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    8d14:	0e f4       	brtc	.+2      	; 0x8d18 <__addsf3+0x28>
    8d16:	e0 95       	com	r30
    8d18:	e7 fb       	bst	r30, 7
    8d1a:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>

00008d1e <__addsf3x>:
    8d1e:	e9 2f       	mov	r30, r25
    8d20:	0e 94 8b 49 	call	0x9316	; 0x9316 <__fp_split3>
    8d24:	58 f3       	brcs	.-42     	; 0x8cfc <__addsf3+0xc>
    8d26:	ba 17       	cp	r27, r26
    8d28:	62 07       	cpc	r22, r18
    8d2a:	73 07       	cpc	r23, r19
    8d2c:	84 07       	cpc	r24, r20
    8d2e:	95 07       	cpc	r25, r21
    8d30:	20 f0       	brcs	.+8      	; 0x8d3a <__addsf3x+0x1c>
    8d32:	79 f4       	brne	.+30     	; 0x8d52 <__addsf3x+0x34>
    8d34:	a6 f5       	brtc	.+104    	; 0x8d9e <__addsf3x+0x80>
    8d36:	0c 94 c5 49 	jmp	0x938a	; 0x938a <__fp_zero>
    8d3a:	0e f4       	brtc	.+2      	; 0x8d3e <__addsf3x+0x20>
    8d3c:	e0 95       	com	r30
    8d3e:	0b 2e       	mov	r0, r27
    8d40:	ba 2f       	mov	r27, r26
    8d42:	a0 2d       	mov	r26, r0
    8d44:	0b 01       	movw	r0, r22
    8d46:	b9 01       	movw	r22, r18
    8d48:	90 01       	movw	r18, r0
    8d4a:	0c 01       	movw	r0, r24
    8d4c:	ca 01       	movw	r24, r20
    8d4e:	a0 01       	movw	r20, r0
    8d50:	11 24       	eor	r1, r1
    8d52:	ff 27       	eor	r31, r31
    8d54:	59 1b       	sub	r21, r25
    8d56:	99 f0       	breq	.+38     	; 0x8d7e <__addsf3x+0x60>
    8d58:	59 3f       	cpi	r21, 0xF9	; 249
    8d5a:	50 f4       	brcc	.+20     	; 0x8d70 <__addsf3x+0x52>
    8d5c:	50 3e       	cpi	r21, 0xE0	; 224
    8d5e:	68 f1       	brcs	.+90     	; 0x8dba <__addsf3x+0x9c>
    8d60:	1a 16       	cp	r1, r26
    8d62:	f0 40       	sbci	r31, 0x00	; 0
    8d64:	a2 2f       	mov	r26, r18
    8d66:	23 2f       	mov	r18, r19
    8d68:	34 2f       	mov	r19, r20
    8d6a:	44 27       	eor	r20, r20
    8d6c:	58 5f       	subi	r21, 0xF8	; 248
    8d6e:	f3 cf       	rjmp	.-26     	; 0x8d56 <__addsf3x+0x38>
    8d70:	46 95       	lsr	r20
    8d72:	37 95       	ror	r19
    8d74:	27 95       	ror	r18
    8d76:	a7 95       	ror	r26
    8d78:	f0 40       	sbci	r31, 0x00	; 0
    8d7a:	53 95       	inc	r21
    8d7c:	c9 f7       	brne	.-14     	; 0x8d70 <__addsf3x+0x52>
    8d7e:	7e f4       	brtc	.+30     	; 0x8d9e <__addsf3x+0x80>
    8d80:	1f 16       	cp	r1, r31
    8d82:	ba 0b       	sbc	r27, r26
    8d84:	62 0b       	sbc	r22, r18
    8d86:	73 0b       	sbc	r23, r19
    8d88:	84 0b       	sbc	r24, r20
    8d8a:	ba f0       	brmi	.+46     	; 0x8dba <__addsf3x+0x9c>
    8d8c:	91 50       	subi	r25, 0x01	; 1
    8d8e:	a1 f0       	breq	.+40     	; 0x8db8 <__addsf3x+0x9a>
    8d90:	ff 0f       	add	r31, r31
    8d92:	bb 1f       	adc	r27, r27
    8d94:	66 1f       	adc	r22, r22
    8d96:	77 1f       	adc	r23, r23
    8d98:	88 1f       	adc	r24, r24
    8d9a:	c2 f7       	brpl	.-16     	; 0x8d8c <__addsf3x+0x6e>
    8d9c:	0e c0       	rjmp	.+28     	; 0x8dba <__addsf3x+0x9c>
    8d9e:	ba 0f       	add	r27, r26
    8da0:	62 1f       	adc	r22, r18
    8da2:	73 1f       	adc	r23, r19
    8da4:	84 1f       	adc	r24, r20
    8da6:	48 f4       	brcc	.+18     	; 0x8dba <__addsf3x+0x9c>
    8da8:	87 95       	ror	r24
    8daa:	77 95       	ror	r23
    8dac:	67 95       	ror	r22
    8dae:	b7 95       	ror	r27
    8db0:	f7 95       	ror	r31
    8db2:	9e 3f       	cpi	r25, 0xFE	; 254
    8db4:	08 f0       	brcs	.+2      	; 0x8db8 <__addsf3x+0x9a>
    8db6:	b0 cf       	rjmp	.-160    	; 0x8d18 <__addsf3+0x28>
    8db8:	93 95       	inc	r25
    8dba:	88 0f       	add	r24, r24
    8dbc:	08 f0       	brcs	.+2      	; 0x8dc0 <__addsf3x+0xa2>
    8dbe:	99 27       	eor	r25, r25
    8dc0:	ee 0f       	add	r30, r30
    8dc2:	97 95       	ror	r25
    8dc4:	87 95       	ror	r24
    8dc6:	08 95       	ret
    8dc8:	0e 94 2d 49 	call	0x925a	; 0x925a <__fp_pscA>
    8dcc:	60 f0       	brcs	.+24     	; 0x8de6 <__addsf3x+0xc8>
    8dce:	80 e8       	ldi	r24, 0x80	; 128
    8dd0:	91 e0       	ldi	r25, 0x01	; 1
    8dd2:	09 f4       	brne	.+2      	; 0x8dd6 <__addsf3x+0xb8>
    8dd4:	9e ef       	ldi	r25, 0xFE	; 254
    8dd6:	0e 94 34 49 	call	0x9268	; 0x9268 <__fp_pscB>
    8dda:	28 f0       	brcs	.+10     	; 0x8de6 <__addsf3x+0xc8>
    8ddc:	40 e8       	ldi	r20, 0x80	; 128
    8dde:	51 e0       	ldi	r21, 0x01	; 1
    8de0:	71 f4       	brne	.+28     	; 0x8dfe <atan2+0x10>
    8de2:	5e ef       	ldi	r21, 0xFE	; 254
    8de4:	0c c0       	rjmp	.+24     	; 0x8dfe <atan2+0x10>
    8de6:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    8dea:	0c 94 c5 49 	jmp	0x938a	; 0x938a <__fp_zero>

00008dee <atan2>:
    8dee:	e9 2f       	mov	r30, r25
    8df0:	e0 78       	andi	r30, 0x80	; 128
    8df2:	0e 94 8b 49 	call	0x9316	; 0x9316 <__fp_split3>
    8df6:	40 f3       	brcs	.-48     	; 0x8dc8 <__addsf3x+0xaa>
    8df8:	09 2e       	mov	r0, r25
    8dfa:	05 2a       	or	r0, r21
    8dfc:	b1 f3       	breq	.-20     	; 0x8dea <__addsf3x+0xcc>
    8dfe:	26 17       	cp	r18, r22
    8e00:	37 07       	cpc	r19, r23
    8e02:	48 07       	cpc	r20, r24
    8e04:	59 07       	cpc	r21, r25
    8e06:	38 f0       	brcs	.+14     	; 0x8e16 <atan2+0x28>
    8e08:	0e 2e       	mov	r0, r30
    8e0a:	07 f8       	bld	r0, 7
    8e0c:	e0 25       	eor	r30, r0
    8e0e:	69 f0       	breq	.+26     	; 0x8e2a <atan2+0x3c>
    8e10:	e0 25       	eor	r30, r0
    8e12:	e0 64       	ori	r30, 0x40	; 64
    8e14:	0a c0       	rjmp	.+20     	; 0x8e2a <atan2+0x3c>
    8e16:	ef 63       	ori	r30, 0x3F	; 63
    8e18:	07 f8       	bld	r0, 7
    8e1a:	00 94       	com	r0
    8e1c:	07 fa       	bst	r0, 7
    8e1e:	db 01       	movw	r26, r22
    8e20:	b9 01       	movw	r22, r18
    8e22:	9d 01       	movw	r18, r26
    8e24:	dc 01       	movw	r26, r24
    8e26:	ca 01       	movw	r24, r20
    8e28:	ad 01       	movw	r20, r26
    8e2a:	ef 93       	push	r30
    8e2c:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <__divsf3_pse>
    8e30:	0e 94 66 49 	call	0x92cc	; 0x92cc <__fp_round>
    8e34:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <atan>
    8e38:	5f 91       	pop	r21
    8e3a:	55 23       	and	r21, r21
    8e3c:	39 f0       	breq	.+14     	; 0x8e4c <atan2+0x5e>
    8e3e:	2b ed       	ldi	r18, 0xDB	; 219
    8e40:	3f e0       	ldi	r19, 0x0F	; 15
    8e42:	49 e4       	ldi	r20, 0x49	; 73
    8e44:	50 fd       	sbrc	r21, 0
    8e46:	49 ec       	ldi	r20, 0xC9	; 201
    8e48:	0c 94 78 46 	jmp	0x8cf0	; 0x8cf0 <__addsf3>
    8e4c:	08 95       	ret

00008e4e <atan>:
    8e4e:	df 93       	push	r29
    8e50:	dd 27       	eor	r29, r29
    8e52:	b9 2f       	mov	r27, r25
    8e54:	bf 77       	andi	r27, 0x7F	; 127
    8e56:	40 e8       	ldi	r20, 0x80	; 128
    8e58:	5f e3       	ldi	r21, 0x3F	; 63
    8e5a:	16 16       	cp	r1, r22
    8e5c:	17 06       	cpc	r1, r23
    8e5e:	48 07       	cpc	r20, r24
    8e60:	5b 07       	cpc	r21, r27
    8e62:	18 f4       	brcc	.+6      	; 0x8e6a <atan+0x1c>
    8e64:	d9 2f       	mov	r29, r25
    8e66:	0e 94 3e 4a 	call	0x947c	; 0x947c <inverse>
    8e6a:	9f 93       	push	r25
    8e6c:	8f 93       	push	r24
    8e6e:	7f 93       	push	r23
    8e70:	6f 93       	push	r22
    8e72:	0e 94 8b 4b 	call	0x9716	; 0x9716 <square>
    8e76:	ec e1       	ldi	r30, 0x1C	; 28
    8e78:	f2 e0       	ldi	r31, 0x02	; 2
    8e7a:	0e 94 06 49 	call	0x920c	; 0x920c <__fp_powser>
    8e7e:	0e 94 66 49 	call	0x92cc	; 0x92cc <__fp_round>
    8e82:	2f 91       	pop	r18
    8e84:	3f 91       	pop	r19
    8e86:	4f 91       	pop	r20
    8e88:	5f 91       	pop	r21
    8e8a:	0e 94 93 4a 	call	0x9526	; 0x9526 <__mulsf3x>
    8e8e:	dd 23       	and	r29, r29
    8e90:	51 f0       	breq	.+20     	; 0x8ea6 <atan+0x58>
    8e92:	90 58       	subi	r25, 0x80	; 128
    8e94:	a2 ea       	ldi	r26, 0xA2	; 162
    8e96:	2a ed       	ldi	r18, 0xDA	; 218
    8e98:	3f e0       	ldi	r19, 0x0F	; 15
    8e9a:	49 ec       	ldi	r20, 0xC9	; 201
    8e9c:	5f e3       	ldi	r21, 0x3F	; 63
    8e9e:	d0 78       	andi	r29, 0x80	; 128
    8ea0:	5d 27       	eor	r21, r29
    8ea2:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__addsf3x>
    8ea6:	df 91       	pop	r29
    8ea8:	0c 94 66 49 	jmp	0x92cc	; 0x92cc <__fp_round>

00008eac <ceil>:
    8eac:	0e 94 ad 49 	call	0x935a	; 0x935a <__fp_trunc>
    8eb0:	90 f0       	brcs	.+36     	; 0x8ed6 <ceil+0x2a>
    8eb2:	9f 37       	cpi	r25, 0x7F	; 127
    8eb4:	48 f4       	brcc	.+18     	; 0x8ec8 <ceil+0x1c>
    8eb6:	91 11       	cpse	r25, r1
    8eb8:	16 f4       	brtc	.+4      	; 0x8ebe <ceil+0x12>
    8eba:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>
    8ebe:	60 e0       	ldi	r22, 0x00	; 0
    8ec0:	70 e0       	ldi	r23, 0x00	; 0
    8ec2:	80 e8       	ldi	r24, 0x80	; 128
    8ec4:	9f e3       	ldi	r25, 0x3F	; 63
    8ec6:	08 95       	ret
    8ec8:	26 f0       	brts	.+8      	; 0x8ed2 <ceil+0x26>
    8eca:	1b 16       	cp	r1, r27
    8ecc:	61 1d       	adc	r22, r1
    8ece:	71 1d       	adc	r23, r1
    8ed0:	81 1d       	adc	r24, r1
    8ed2:	0c 94 da 48 	jmp	0x91b4	; 0x91b4 <__fp_mintl>
    8ed6:	0c 94 f5 48 	jmp	0x91ea	; 0x91ea <__fp_mpack>

00008eda <__cmpsf2>:
    8eda:	0e 94 b0 48 	call	0x9160	; 0x9160 <__fp_cmp>
    8ede:	08 f4       	brcc	.+2      	; 0x8ee2 <__cmpsf2+0x8>
    8ee0:	81 e0       	ldi	r24, 0x01	; 1
    8ee2:	08 95       	ret

00008ee4 <cos>:
    8ee4:	0e 94 3d 49 	call	0x927a	; 0x927a <__fp_rempio2>
    8ee8:	e3 95       	inc	r30
    8eea:	0c 94 77 49 	jmp	0x92ee	; 0x92ee <__fp_sinus>

00008eee <__divsf3>:
    8eee:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <__divsf3x>
    8ef2:	0c 94 66 49 	jmp	0x92cc	; 0x92cc <__fp_round>
    8ef6:	0e 94 34 49 	call	0x9268	; 0x9268 <__fp_pscB>
    8efa:	58 f0       	brcs	.+22     	; 0x8f12 <__divsf3+0x24>
    8efc:	0e 94 2d 49 	call	0x925a	; 0x925a <__fp_pscA>
    8f00:	40 f0       	brcs	.+16     	; 0x8f12 <__divsf3+0x24>
    8f02:	29 f4       	brne	.+10     	; 0x8f0e <__divsf3+0x20>
    8f04:	5f 3f       	cpi	r21, 0xFF	; 255
    8f06:	29 f0       	breq	.+10     	; 0x8f12 <__divsf3+0x24>
    8f08:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    8f0c:	51 11       	cpse	r21, r1
    8f0e:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>
    8f12:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>

00008f16 <__divsf3x>:
    8f16:	0e 94 8b 49 	call	0x9316	; 0x9316 <__fp_split3>
    8f1a:	68 f3       	brcs	.-38     	; 0x8ef6 <__divsf3+0x8>

00008f1c <__divsf3_pse>:
    8f1c:	99 23       	and	r25, r25
    8f1e:	b1 f3       	breq	.-20     	; 0x8f0c <__divsf3+0x1e>
    8f20:	55 23       	and	r21, r21
    8f22:	91 f3       	breq	.-28     	; 0x8f08 <__divsf3+0x1a>
    8f24:	95 1b       	sub	r25, r21
    8f26:	55 0b       	sbc	r21, r21
    8f28:	bb 27       	eor	r27, r27
    8f2a:	aa 27       	eor	r26, r26
    8f2c:	62 17       	cp	r22, r18
    8f2e:	73 07       	cpc	r23, r19
    8f30:	84 07       	cpc	r24, r20
    8f32:	38 f0       	brcs	.+14     	; 0x8f42 <__divsf3_pse+0x26>
    8f34:	9f 5f       	subi	r25, 0xFF	; 255
    8f36:	5f 4f       	sbci	r21, 0xFF	; 255
    8f38:	22 0f       	add	r18, r18
    8f3a:	33 1f       	adc	r19, r19
    8f3c:	44 1f       	adc	r20, r20
    8f3e:	aa 1f       	adc	r26, r26
    8f40:	a9 f3       	breq	.-22     	; 0x8f2c <__divsf3_pse+0x10>
    8f42:	35 d0       	rcall	.+106    	; 0x8fae <__divsf3_pse+0x92>
    8f44:	0e 2e       	mov	r0, r30
    8f46:	3a f0       	brmi	.+14     	; 0x8f56 <__divsf3_pse+0x3a>
    8f48:	e0 e8       	ldi	r30, 0x80	; 128
    8f4a:	32 d0       	rcall	.+100    	; 0x8fb0 <__divsf3_pse+0x94>
    8f4c:	91 50       	subi	r25, 0x01	; 1
    8f4e:	50 40       	sbci	r21, 0x00	; 0
    8f50:	e6 95       	lsr	r30
    8f52:	00 1c       	adc	r0, r0
    8f54:	ca f7       	brpl	.-14     	; 0x8f48 <__divsf3_pse+0x2c>
    8f56:	2b d0       	rcall	.+86     	; 0x8fae <__divsf3_pse+0x92>
    8f58:	fe 2f       	mov	r31, r30
    8f5a:	29 d0       	rcall	.+82     	; 0x8fae <__divsf3_pse+0x92>
    8f5c:	66 0f       	add	r22, r22
    8f5e:	77 1f       	adc	r23, r23
    8f60:	88 1f       	adc	r24, r24
    8f62:	bb 1f       	adc	r27, r27
    8f64:	26 17       	cp	r18, r22
    8f66:	37 07       	cpc	r19, r23
    8f68:	48 07       	cpc	r20, r24
    8f6a:	ab 07       	cpc	r26, r27
    8f6c:	b0 e8       	ldi	r27, 0x80	; 128
    8f6e:	09 f0       	breq	.+2      	; 0x8f72 <__divsf3_pse+0x56>
    8f70:	bb 0b       	sbc	r27, r27
    8f72:	80 2d       	mov	r24, r0
    8f74:	bf 01       	movw	r22, r30
    8f76:	ff 27       	eor	r31, r31
    8f78:	93 58       	subi	r25, 0x83	; 131
    8f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    8f7c:	3a f0       	brmi	.+14     	; 0x8f8c <__divsf3_pse+0x70>
    8f7e:	9e 3f       	cpi	r25, 0xFE	; 254
    8f80:	51 05       	cpc	r21, r1
    8f82:	78 f0       	brcs	.+30     	; 0x8fa2 <__divsf3_pse+0x86>
    8f84:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    8f88:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>
    8f8c:	5f 3f       	cpi	r21, 0xFF	; 255
    8f8e:	e4 f3       	brlt	.-8      	; 0x8f88 <__divsf3_pse+0x6c>
    8f90:	98 3e       	cpi	r25, 0xE8	; 232
    8f92:	d4 f3       	brlt	.-12     	; 0x8f88 <__divsf3_pse+0x6c>
    8f94:	86 95       	lsr	r24
    8f96:	77 95       	ror	r23
    8f98:	67 95       	ror	r22
    8f9a:	b7 95       	ror	r27
    8f9c:	f7 95       	ror	r31
    8f9e:	9f 5f       	subi	r25, 0xFF	; 255
    8fa0:	c9 f7       	brne	.-14     	; 0x8f94 <__divsf3_pse+0x78>
    8fa2:	88 0f       	add	r24, r24
    8fa4:	91 1d       	adc	r25, r1
    8fa6:	96 95       	lsr	r25
    8fa8:	87 95       	ror	r24
    8faa:	97 f9       	bld	r25, 7
    8fac:	08 95       	ret
    8fae:	e1 e0       	ldi	r30, 0x01	; 1
    8fb0:	66 0f       	add	r22, r22
    8fb2:	77 1f       	adc	r23, r23
    8fb4:	88 1f       	adc	r24, r24
    8fb6:	bb 1f       	adc	r27, r27
    8fb8:	62 17       	cp	r22, r18
    8fba:	73 07       	cpc	r23, r19
    8fbc:	84 07       	cpc	r24, r20
    8fbe:	ba 07       	cpc	r27, r26
    8fc0:	20 f0       	brcs	.+8      	; 0x8fca <__divsf3_pse+0xae>
    8fc2:	62 1b       	sub	r22, r18
    8fc4:	73 0b       	sbc	r23, r19
    8fc6:	84 0b       	sbc	r24, r20
    8fc8:	ba 0b       	sbc	r27, r26
    8fca:	ee 1f       	adc	r30, r30
    8fcc:	88 f7       	brcc	.-30     	; 0x8fb0 <__divsf3_pse+0x94>
    8fce:	e0 95       	com	r30
    8fd0:	08 95       	ret

00008fd2 <__fixsfsi>:
    8fd2:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__fixunssfsi>
    8fd6:	68 94       	set
    8fd8:	b1 11       	cpse	r27, r1
    8fda:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>
    8fde:	08 95       	ret

00008fe0 <__fixunssfsi>:
    8fe0:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    8fe4:	88 f0       	brcs	.+34     	; 0x9008 <__fixunssfsi+0x28>
    8fe6:	9f 57       	subi	r25, 0x7F	; 127
    8fe8:	98 f0       	brcs	.+38     	; 0x9010 <__fixunssfsi+0x30>
    8fea:	b9 2f       	mov	r27, r25
    8fec:	99 27       	eor	r25, r25
    8fee:	b7 51       	subi	r27, 0x17	; 23
    8ff0:	b0 f0       	brcs	.+44     	; 0x901e <__fixunssfsi+0x3e>
    8ff2:	e1 f0       	breq	.+56     	; 0x902c <__fixunssfsi+0x4c>
    8ff4:	66 0f       	add	r22, r22
    8ff6:	77 1f       	adc	r23, r23
    8ff8:	88 1f       	adc	r24, r24
    8ffa:	99 1f       	adc	r25, r25
    8ffc:	1a f0       	brmi	.+6      	; 0x9004 <__fixunssfsi+0x24>
    8ffe:	ba 95       	dec	r27
    9000:	c9 f7       	brne	.-14     	; 0x8ff4 <__fixunssfsi+0x14>
    9002:	14 c0       	rjmp	.+40     	; 0x902c <__fixunssfsi+0x4c>
    9004:	b1 30       	cpi	r27, 0x01	; 1
    9006:	91 f0       	breq	.+36     	; 0x902c <__fixunssfsi+0x4c>
    9008:	0e 94 c5 49 	call	0x938a	; 0x938a <__fp_zero>
    900c:	b1 e0       	ldi	r27, 0x01	; 1
    900e:	08 95       	ret
    9010:	0c 94 c5 49 	jmp	0x938a	; 0x938a <__fp_zero>
    9014:	67 2f       	mov	r22, r23
    9016:	78 2f       	mov	r23, r24
    9018:	88 27       	eor	r24, r24
    901a:	b8 5f       	subi	r27, 0xF8	; 248
    901c:	39 f0       	breq	.+14     	; 0x902c <__fixunssfsi+0x4c>
    901e:	b9 3f       	cpi	r27, 0xF9	; 249
    9020:	cc f3       	brlt	.-14     	; 0x9014 <__fixunssfsi+0x34>
    9022:	86 95       	lsr	r24
    9024:	77 95       	ror	r23
    9026:	67 95       	ror	r22
    9028:	b3 95       	inc	r27
    902a:	d9 f7       	brne	.-10     	; 0x9022 <__fixunssfsi+0x42>
    902c:	3e f4       	brtc	.+14     	; 0x903c <__fixunssfsi+0x5c>
    902e:	90 95       	com	r25
    9030:	80 95       	com	r24
    9032:	70 95       	com	r23
    9034:	61 95       	neg	r22
    9036:	7f 4f       	sbci	r23, 0xFF	; 255
    9038:	8f 4f       	sbci	r24, 0xFF	; 255
    903a:	9f 4f       	sbci	r25, 0xFF	; 255
    903c:	08 95       	ret

0000903e <__floatunsisf>:
    903e:	e8 94       	clt
    9040:	09 c0       	rjmp	.+18     	; 0x9054 <__floatsisf+0x12>

00009042 <__floatsisf>:
    9042:	97 fb       	bst	r25, 7
    9044:	3e f4       	brtc	.+14     	; 0x9054 <__floatsisf+0x12>
    9046:	90 95       	com	r25
    9048:	80 95       	com	r24
    904a:	70 95       	com	r23
    904c:	61 95       	neg	r22
    904e:	7f 4f       	sbci	r23, 0xFF	; 255
    9050:	8f 4f       	sbci	r24, 0xFF	; 255
    9052:	9f 4f       	sbci	r25, 0xFF	; 255
    9054:	99 23       	and	r25, r25
    9056:	a9 f0       	breq	.+42     	; 0x9082 <__floatsisf+0x40>
    9058:	f9 2f       	mov	r31, r25
    905a:	96 e9       	ldi	r25, 0x96	; 150
    905c:	bb 27       	eor	r27, r27
    905e:	93 95       	inc	r25
    9060:	f6 95       	lsr	r31
    9062:	87 95       	ror	r24
    9064:	77 95       	ror	r23
    9066:	67 95       	ror	r22
    9068:	b7 95       	ror	r27
    906a:	f1 11       	cpse	r31, r1
    906c:	f8 cf       	rjmp	.-16     	; 0x905e <__floatsisf+0x1c>
    906e:	fa f4       	brpl	.+62     	; 0x90ae <__floatsisf+0x6c>
    9070:	bb 0f       	add	r27, r27
    9072:	11 f4       	brne	.+4      	; 0x9078 <__floatsisf+0x36>
    9074:	60 ff       	sbrs	r22, 0
    9076:	1b c0       	rjmp	.+54     	; 0x90ae <__floatsisf+0x6c>
    9078:	6f 5f       	subi	r22, 0xFF	; 255
    907a:	7f 4f       	sbci	r23, 0xFF	; 255
    907c:	8f 4f       	sbci	r24, 0xFF	; 255
    907e:	9f 4f       	sbci	r25, 0xFF	; 255
    9080:	16 c0       	rjmp	.+44     	; 0x90ae <__floatsisf+0x6c>
    9082:	88 23       	and	r24, r24
    9084:	11 f0       	breq	.+4      	; 0x908a <__floatsisf+0x48>
    9086:	96 e9       	ldi	r25, 0x96	; 150
    9088:	11 c0       	rjmp	.+34     	; 0x90ac <__floatsisf+0x6a>
    908a:	77 23       	and	r23, r23
    908c:	21 f0       	breq	.+8      	; 0x9096 <__floatsisf+0x54>
    908e:	9e e8       	ldi	r25, 0x8E	; 142
    9090:	87 2f       	mov	r24, r23
    9092:	76 2f       	mov	r23, r22
    9094:	05 c0       	rjmp	.+10     	; 0x90a0 <__floatsisf+0x5e>
    9096:	66 23       	and	r22, r22
    9098:	71 f0       	breq	.+28     	; 0x90b6 <__floatsisf+0x74>
    909a:	96 e8       	ldi	r25, 0x86	; 134
    909c:	86 2f       	mov	r24, r22
    909e:	70 e0       	ldi	r23, 0x00	; 0
    90a0:	60 e0       	ldi	r22, 0x00	; 0
    90a2:	2a f0       	brmi	.+10     	; 0x90ae <__floatsisf+0x6c>
    90a4:	9a 95       	dec	r25
    90a6:	66 0f       	add	r22, r22
    90a8:	77 1f       	adc	r23, r23
    90aa:	88 1f       	adc	r24, r24
    90ac:	da f7       	brpl	.-10     	; 0x90a4 <__floatsisf+0x62>
    90ae:	88 0f       	add	r24, r24
    90b0:	96 95       	lsr	r25
    90b2:	87 95       	ror	r24
    90b4:	97 f9       	bld	r25, 7
    90b6:	08 95       	ret
    90b8:	0e 94 2d 49 	call	0x925a	; 0x925a <__fp_pscA>
    90bc:	20 f0       	brcs	.+8      	; 0x90c6 <__floatsisf+0x84>
    90be:	19 f0       	breq	.+6      	; 0x90c6 <__floatsisf+0x84>
    90c0:	0e 94 34 49 	call	0x9268	; 0x9268 <__fp_pscB>
    90c4:	50 f4       	brcc	.+20     	; 0x90da <fmod+0xc>
    90c6:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    90ca:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>

000090ce <fmod>:
    90ce:	e9 2f       	mov	r30, r25
    90d0:	0e 94 8b 49 	call	0x9316	; 0x9316 <__fp_split3>
    90d4:	88 f3       	brcs	.-30     	; 0x90b8 <__floatsisf+0x76>
    90d6:	55 23       	and	r21, r21
    90d8:	b1 f3       	breq	.-20     	; 0x90c6 <__floatsisf+0x84>
    90da:	e7 fb       	bst	r30, 7
    90dc:	62 17       	cp	r22, r18
    90de:	73 07       	cpc	r23, r19
    90e0:	84 07       	cpc	r24, r20
    90e2:	95 07       	cpc	r25, r21
    90e4:	a8 f1       	brcs	.+106    	; 0x9150 <fmod+0x82>
    90e6:	89 f3       	breq	.-30     	; 0x90ca <__floatsisf+0x88>
    90e8:	e9 2f       	mov	r30, r25
    90ea:	ff 27       	eor	r31, r31
    90ec:	88 23       	and	r24, r24
    90ee:	2a f0       	brmi	.+10     	; 0x90fa <fmod+0x2c>
    90f0:	31 97       	sbiw	r30, 0x01	; 1
    90f2:	66 0f       	add	r22, r22
    90f4:	77 1f       	adc	r23, r23
    90f6:	88 1f       	adc	r24, r24
    90f8:	da f7       	brpl	.-10     	; 0x90f0 <fmod+0x22>
    90fa:	95 2f       	mov	r25, r21
    90fc:	55 27       	eor	r21, r21
    90fe:	44 23       	and	r20, r20
    9100:	32 f0       	brmi	.+12     	; 0x910e <fmod+0x40>
    9102:	91 50       	subi	r25, 0x01	; 1
    9104:	50 40       	sbci	r21, 0x00	; 0
    9106:	22 0f       	add	r18, r18
    9108:	33 1f       	adc	r19, r19
    910a:	44 1f       	adc	r20, r20
    910c:	d2 f7       	brpl	.-12     	; 0x9102 <fmod+0x34>
    910e:	bb 27       	eor	r27, r27
    9110:	e9 1b       	sub	r30, r25
    9112:	f5 0b       	sbc	r31, r21
    9114:	62 1b       	sub	r22, r18
    9116:	73 0b       	sbc	r23, r19
    9118:	84 0b       	sbc	r24, r20
    911a:	b1 09       	sbc	r27, r1
    911c:	b1 f2       	breq	.-84     	; 0x90ca <__floatsisf+0x88>
    911e:	22 f4       	brpl	.+8      	; 0x9128 <fmod+0x5a>
    9120:	62 0f       	add	r22, r18
    9122:	73 1f       	adc	r23, r19
    9124:	84 1f       	adc	r24, r20
    9126:	b1 1d       	adc	r27, r1
    9128:	31 97       	sbiw	r30, 0x01	; 1
    912a:	2a f0       	brmi	.+10     	; 0x9136 <fmod+0x68>
    912c:	66 0f       	add	r22, r22
    912e:	77 1f       	adc	r23, r23
    9130:	88 1f       	adc	r24, r24
    9132:	bb 1f       	adc	r27, r27
    9134:	ef cf       	rjmp	.-34     	; 0x9114 <fmod+0x46>
    9136:	91 50       	subi	r25, 0x01	; 1
    9138:	50 40       	sbci	r21, 0x00	; 0
    913a:	62 f0       	brmi	.+24     	; 0x9154 <fmod+0x86>
    913c:	41 f0       	breq	.+16     	; 0x914e <fmod+0x80>
    913e:	88 23       	and	r24, r24
    9140:	32 f0       	brmi	.+12     	; 0x914e <fmod+0x80>
    9142:	66 0f       	add	r22, r22
    9144:	77 1f       	adc	r23, r23
    9146:	88 1f       	adc	r24, r24
    9148:	91 50       	subi	r25, 0x01	; 1
    914a:	50 40       	sbci	r21, 0x00	; 0
    914c:	c1 f7       	brne	.-16     	; 0x913e <fmod+0x70>
    914e:	93 95       	inc	r25
    9150:	0c 94 f5 48 	jmp	0x91ea	; 0x91ea <__fp_mpack>
    9154:	86 95       	lsr	r24
    9156:	77 95       	ror	r23
    9158:	67 95       	ror	r22
    915a:	9f 5f       	subi	r25, 0xFF	; 255
    915c:	d9 f7       	brne	.-10     	; 0x9154 <fmod+0x86>
    915e:	f7 cf       	rjmp	.-18     	; 0x914e <fmod+0x80>

00009160 <__fp_cmp>:
    9160:	99 0f       	add	r25, r25
    9162:	00 08       	sbc	r0, r0
    9164:	55 0f       	add	r21, r21
    9166:	aa 0b       	sbc	r26, r26
    9168:	e0 e8       	ldi	r30, 0x80	; 128
    916a:	fe ef       	ldi	r31, 0xFE	; 254
    916c:	16 16       	cp	r1, r22
    916e:	17 06       	cpc	r1, r23
    9170:	e8 07       	cpc	r30, r24
    9172:	f9 07       	cpc	r31, r25
    9174:	c0 f0       	brcs	.+48     	; 0x91a6 <__fp_cmp+0x46>
    9176:	12 16       	cp	r1, r18
    9178:	13 06       	cpc	r1, r19
    917a:	e4 07       	cpc	r30, r20
    917c:	f5 07       	cpc	r31, r21
    917e:	98 f0       	brcs	.+38     	; 0x91a6 <__fp_cmp+0x46>
    9180:	62 1b       	sub	r22, r18
    9182:	73 0b       	sbc	r23, r19
    9184:	84 0b       	sbc	r24, r20
    9186:	95 0b       	sbc	r25, r21
    9188:	39 f4       	brne	.+14     	; 0x9198 <__fp_cmp+0x38>
    918a:	0a 26       	eor	r0, r26
    918c:	61 f0       	breq	.+24     	; 0x91a6 <__fp_cmp+0x46>
    918e:	23 2b       	or	r18, r19
    9190:	24 2b       	or	r18, r20
    9192:	25 2b       	or	r18, r21
    9194:	21 f4       	brne	.+8      	; 0x919e <__fp_cmp+0x3e>
    9196:	08 95       	ret
    9198:	0a 26       	eor	r0, r26
    919a:	09 f4       	brne	.+2      	; 0x919e <__fp_cmp+0x3e>
    919c:	a1 40       	sbci	r26, 0x01	; 1
    919e:	a6 95       	lsr	r26
    91a0:	8f ef       	ldi	r24, 0xFF	; 255
    91a2:	81 1d       	adc	r24, r1
    91a4:	81 1d       	adc	r24, r1
    91a6:	08 95       	ret

000091a8 <__fp_inf>:
    91a8:	97 f9       	bld	r25, 7
    91aa:	9f 67       	ori	r25, 0x7F	; 127
    91ac:	80 e8       	ldi	r24, 0x80	; 128
    91ae:	70 e0       	ldi	r23, 0x00	; 0
    91b0:	60 e0       	ldi	r22, 0x00	; 0
    91b2:	08 95       	ret

000091b4 <__fp_mintl>:
    91b4:	88 23       	and	r24, r24
    91b6:	71 f4       	brne	.+28     	; 0x91d4 <__fp_mintl+0x20>
    91b8:	77 23       	and	r23, r23
    91ba:	21 f0       	breq	.+8      	; 0x91c4 <__fp_mintl+0x10>
    91bc:	98 50       	subi	r25, 0x08	; 8
    91be:	87 2b       	or	r24, r23
    91c0:	76 2f       	mov	r23, r22
    91c2:	07 c0       	rjmp	.+14     	; 0x91d2 <__fp_mintl+0x1e>
    91c4:	66 23       	and	r22, r22
    91c6:	11 f4       	brne	.+4      	; 0x91cc <__fp_mintl+0x18>
    91c8:	99 27       	eor	r25, r25
    91ca:	0d c0       	rjmp	.+26     	; 0x91e6 <__fp_mintl+0x32>
    91cc:	90 51       	subi	r25, 0x10	; 16
    91ce:	86 2b       	or	r24, r22
    91d0:	70 e0       	ldi	r23, 0x00	; 0
    91d2:	60 e0       	ldi	r22, 0x00	; 0
    91d4:	2a f0       	brmi	.+10     	; 0x91e0 <__fp_mintl+0x2c>
    91d6:	9a 95       	dec	r25
    91d8:	66 0f       	add	r22, r22
    91da:	77 1f       	adc	r23, r23
    91dc:	88 1f       	adc	r24, r24
    91de:	da f7       	brpl	.-10     	; 0x91d6 <__fp_mintl+0x22>
    91e0:	88 0f       	add	r24, r24
    91e2:	96 95       	lsr	r25
    91e4:	87 95       	ror	r24
    91e6:	97 f9       	bld	r25, 7
    91e8:	08 95       	ret

000091ea <__fp_mpack>:
    91ea:	9f 3f       	cpi	r25, 0xFF	; 255
    91ec:	31 f0       	breq	.+12     	; 0x91fa <__fp_mpack_finite+0xc>

000091ee <__fp_mpack_finite>:
    91ee:	91 50       	subi	r25, 0x01	; 1
    91f0:	20 f4       	brcc	.+8      	; 0x91fa <__fp_mpack_finite+0xc>
    91f2:	87 95       	ror	r24
    91f4:	77 95       	ror	r23
    91f6:	67 95       	ror	r22
    91f8:	b7 95       	ror	r27
    91fa:	88 0f       	add	r24, r24
    91fc:	91 1d       	adc	r25, r1
    91fe:	96 95       	lsr	r25
    9200:	87 95       	ror	r24
    9202:	97 f9       	bld	r25, 7
    9204:	08 95       	ret

00009206 <__fp_nan>:
    9206:	9f ef       	ldi	r25, 0xFF	; 255
    9208:	80 ec       	ldi	r24, 0xC0	; 192
    920a:	08 95       	ret

0000920c <__fp_powser>:
    920c:	df 93       	push	r29
    920e:	cf 93       	push	r28
    9210:	1f 93       	push	r17
    9212:	0f 93       	push	r16
    9214:	ff 92       	push	r15
    9216:	ef 92       	push	r14
    9218:	df 92       	push	r13
    921a:	7b 01       	movw	r14, r22
    921c:	8c 01       	movw	r16, r24
    921e:	68 94       	set
    9220:	06 c0       	rjmp	.+12     	; 0x922e <__fp_powser+0x22>
    9222:	da 2e       	mov	r13, r26
    9224:	ef 01       	movw	r28, r30
    9226:	0e 94 93 4a 	call	0x9526	; 0x9526 <__mulsf3x>
    922a:	fe 01       	movw	r30, r28
    922c:	e8 94       	clt
    922e:	a5 91       	lpm	r26, Z+
    9230:	25 91       	lpm	r18, Z+
    9232:	35 91       	lpm	r19, Z+
    9234:	45 91       	lpm	r20, Z+
    9236:	55 91       	lpm	r21, Z+
    9238:	a6 f3       	brts	.-24     	; 0x9222 <__fp_powser+0x16>
    923a:	ef 01       	movw	r28, r30
    923c:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__addsf3x>
    9240:	fe 01       	movw	r30, r28
    9242:	97 01       	movw	r18, r14
    9244:	a8 01       	movw	r20, r16
    9246:	da 94       	dec	r13
    9248:	69 f7       	brne	.-38     	; 0x9224 <__fp_powser+0x18>
    924a:	df 90       	pop	r13
    924c:	ef 90       	pop	r14
    924e:	ff 90       	pop	r15
    9250:	0f 91       	pop	r16
    9252:	1f 91       	pop	r17
    9254:	cf 91       	pop	r28
    9256:	df 91       	pop	r29
    9258:	08 95       	ret

0000925a <__fp_pscA>:
    925a:	00 24       	eor	r0, r0
    925c:	0a 94       	dec	r0
    925e:	16 16       	cp	r1, r22
    9260:	17 06       	cpc	r1, r23
    9262:	18 06       	cpc	r1, r24
    9264:	09 06       	cpc	r0, r25
    9266:	08 95       	ret

00009268 <__fp_pscB>:
    9268:	00 24       	eor	r0, r0
    926a:	0a 94       	dec	r0
    926c:	12 16       	cp	r1, r18
    926e:	13 06       	cpc	r1, r19
    9270:	14 06       	cpc	r1, r20
    9272:	05 06       	cpc	r0, r21
    9274:	08 95       	ret
    9276:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>

0000927a <__fp_rempio2>:
    927a:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    927e:	d8 f3       	brcs	.-10     	; 0x9276 <__fp_pscB+0xe>
    9280:	e8 94       	clt
    9282:	e0 e0       	ldi	r30, 0x00	; 0
    9284:	bb 27       	eor	r27, r27
    9286:	9f 57       	subi	r25, 0x7F	; 127
    9288:	f0 f0       	brcs	.+60     	; 0x92c6 <__fp_rempio2+0x4c>
    928a:	2a ed       	ldi	r18, 0xDA	; 218
    928c:	3f e0       	ldi	r19, 0x0F	; 15
    928e:	49 ec       	ldi	r20, 0xC9	; 201
    9290:	06 c0       	rjmp	.+12     	; 0x929e <__fp_rempio2+0x24>
    9292:	ee 0f       	add	r30, r30
    9294:	bb 0f       	add	r27, r27
    9296:	66 1f       	adc	r22, r22
    9298:	77 1f       	adc	r23, r23
    929a:	88 1f       	adc	r24, r24
    929c:	28 f0       	brcs	.+10     	; 0x92a8 <__fp_rempio2+0x2e>
    929e:	b2 3a       	cpi	r27, 0xA2	; 162
    92a0:	62 07       	cpc	r22, r18
    92a2:	73 07       	cpc	r23, r19
    92a4:	84 07       	cpc	r24, r20
    92a6:	28 f0       	brcs	.+10     	; 0x92b2 <__fp_rempio2+0x38>
    92a8:	b2 5a       	subi	r27, 0xA2	; 162
    92aa:	62 0b       	sbc	r22, r18
    92ac:	73 0b       	sbc	r23, r19
    92ae:	84 0b       	sbc	r24, r20
    92b0:	e3 95       	inc	r30
    92b2:	9a 95       	dec	r25
    92b4:	72 f7       	brpl	.-36     	; 0x9292 <__fp_rempio2+0x18>
    92b6:	80 38       	cpi	r24, 0x80	; 128
    92b8:	30 f4       	brcc	.+12     	; 0x92c6 <__fp_rempio2+0x4c>
    92ba:	9a 95       	dec	r25
    92bc:	bb 0f       	add	r27, r27
    92be:	66 1f       	adc	r22, r22
    92c0:	77 1f       	adc	r23, r23
    92c2:	88 1f       	adc	r24, r24
    92c4:	d2 f7       	brpl	.-12     	; 0x92ba <__fp_rempio2+0x40>
    92c6:	90 48       	sbci	r25, 0x80	; 128
    92c8:	0c 94 f7 48 	jmp	0x91ee	; 0x91ee <__fp_mpack_finite>

000092cc <__fp_round>:
    92cc:	09 2e       	mov	r0, r25
    92ce:	03 94       	inc	r0
    92d0:	00 0c       	add	r0, r0
    92d2:	11 f4       	brne	.+4      	; 0x92d8 <__fp_round+0xc>
    92d4:	88 23       	and	r24, r24
    92d6:	52 f0       	brmi	.+20     	; 0x92ec <__fp_round+0x20>
    92d8:	bb 0f       	add	r27, r27
    92da:	40 f4       	brcc	.+16     	; 0x92ec <__fp_round+0x20>
    92dc:	bf 2b       	or	r27, r31
    92de:	11 f4       	brne	.+4      	; 0x92e4 <__fp_round+0x18>
    92e0:	60 ff       	sbrs	r22, 0
    92e2:	04 c0       	rjmp	.+8      	; 0x92ec <__fp_round+0x20>
    92e4:	6f 5f       	subi	r22, 0xFF	; 255
    92e6:	7f 4f       	sbci	r23, 0xFF	; 255
    92e8:	8f 4f       	sbci	r24, 0xFF	; 255
    92ea:	9f 4f       	sbci	r25, 0xFF	; 255
    92ec:	08 95       	ret

000092ee <__fp_sinus>:
    92ee:	ef 93       	push	r30
    92f0:	e0 ff       	sbrs	r30, 0
    92f2:	07 c0       	rjmp	.+14     	; 0x9302 <__fp_sinus+0x14>
    92f4:	a2 ea       	ldi	r26, 0xA2	; 162
    92f6:	2a ed       	ldi	r18, 0xDA	; 218
    92f8:	3f e0       	ldi	r19, 0x0F	; 15
    92fa:	49 ec       	ldi	r20, 0xC9	; 201
    92fc:	5f eb       	ldi	r21, 0xBF	; 191
    92fe:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__addsf3x>
    9302:	0e 94 66 49 	call	0x92cc	; 0x92cc <__fp_round>
    9306:	0f 90       	pop	r0
    9308:	03 94       	inc	r0
    930a:	01 fc       	sbrc	r0, 1
    930c:	90 58       	subi	r25, 0x80	; 128
    930e:	e9 e4       	ldi	r30, 0x49	; 73
    9310:	f2 e0       	ldi	r31, 0x02	; 2
    9312:	0c 94 d5 4b 	jmp	0x97aa	; 0x97aa <__fp_powsodd>

00009316 <__fp_split3>:
    9316:	57 fd       	sbrc	r21, 7
    9318:	90 58       	subi	r25, 0x80	; 128
    931a:	44 0f       	add	r20, r20
    931c:	55 1f       	adc	r21, r21
    931e:	59 f0       	breq	.+22     	; 0x9336 <__fp_splitA+0x10>
    9320:	5f 3f       	cpi	r21, 0xFF	; 255
    9322:	71 f0       	breq	.+28     	; 0x9340 <__fp_splitA+0x1a>
    9324:	47 95       	ror	r20

00009326 <__fp_splitA>:
    9326:	88 0f       	add	r24, r24
    9328:	97 fb       	bst	r25, 7
    932a:	99 1f       	adc	r25, r25
    932c:	61 f0       	breq	.+24     	; 0x9346 <__fp_splitA+0x20>
    932e:	9f 3f       	cpi	r25, 0xFF	; 255
    9330:	79 f0       	breq	.+30     	; 0x9350 <__fp_splitA+0x2a>
    9332:	87 95       	ror	r24
    9334:	08 95       	ret
    9336:	12 16       	cp	r1, r18
    9338:	13 06       	cpc	r1, r19
    933a:	14 06       	cpc	r1, r20
    933c:	55 1f       	adc	r21, r21
    933e:	f2 cf       	rjmp	.-28     	; 0x9324 <__fp_split3+0xe>
    9340:	46 95       	lsr	r20
    9342:	f1 df       	rcall	.-30     	; 0x9326 <__fp_splitA>
    9344:	08 c0       	rjmp	.+16     	; 0x9356 <__fp_splitA+0x30>
    9346:	16 16       	cp	r1, r22
    9348:	17 06       	cpc	r1, r23
    934a:	18 06       	cpc	r1, r24
    934c:	99 1f       	adc	r25, r25
    934e:	f1 cf       	rjmp	.-30     	; 0x9332 <__fp_splitA+0xc>
    9350:	86 95       	lsr	r24
    9352:	71 05       	cpc	r23, r1
    9354:	61 05       	cpc	r22, r1
    9356:	08 94       	sec
    9358:	08 95       	ret

0000935a <__fp_trunc>:
    935a:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    935e:	a0 f0       	brcs	.+40     	; 0x9388 <__fp_trunc+0x2e>
    9360:	be e7       	ldi	r27, 0x7E	; 126
    9362:	b9 17       	cp	r27, r25
    9364:	88 f4       	brcc	.+34     	; 0x9388 <__fp_trunc+0x2e>
    9366:	bb 27       	eor	r27, r27
    9368:	9f 38       	cpi	r25, 0x8F	; 143
    936a:	60 f4       	brcc	.+24     	; 0x9384 <__fp_trunc+0x2a>
    936c:	16 16       	cp	r1, r22
    936e:	b1 1d       	adc	r27, r1
    9370:	67 2f       	mov	r22, r23
    9372:	78 2f       	mov	r23, r24
    9374:	88 27       	eor	r24, r24
    9376:	98 5f       	subi	r25, 0xF8	; 248
    9378:	f7 cf       	rjmp	.-18     	; 0x9368 <__fp_trunc+0xe>
    937a:	86 95       	lsr	r24
    937c:	77 95       	ror	r23
    937e:	67 95       	ror	r22
    9380:	b1 1d       	adc	r27, r1
    9382:	93 95       	inc	r25
    9384:	96 39       	cpi	r25, 0x96	; 150
    9386:	c8 f3       	brcs	.-14     	; 0x937a <__fp_trunc+0x20>
    9388:	08 95       	ret

0000938a <__fp_zero>:
    938a:	e8 94       	clt

0000938c <__fp_szero>:
    938c:	bb 27       	eor	r27, r27
    938e:	66 27       	eor	r22, r22
    9390:	77 27       	eor	r23, r23
    9392:	cb 01       	movw	r24, r22
    9394:	97 f9       	bld	r25, 7
    9396:	08 95       	ret

00009398 <__gesf2>:
    9398:	0e 94 b0 48 	call	0x9160	; 0x9160 <__fp_cmp>
    939c:	08 f4       	brcc	.+2      	; 0x93a0 <__gesf2+0x8>
    939e:	8f ef       	ldi	r24, 0xFF	; 255
    93a0:	08 95       	ret
    93a2:	0e 94 2d 49 	call	0x925a	; 0x925a <__fp_pscA>
    93a6:	29 f0       	breq	.+10     	; 0x93b2 <__gesf2+0x1a>
    93a8:	0e 94 34 49 	call	0x9268	; 0x9268 <__fp_pscB>
    93ac:	11 f0       	breq	.+4      	; 0x93b2 <__gesf2+0x1a>
    93ae:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    93b2:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    93b6:	b9 01       	movw	r22, r18
    93b8:	ca 01       	movw	r24, r20
    93ba:	0c 94 f5 48 	jmp	0x91ea	; 0x91ea <__fp_mpack>

000093be <hypot>:
    93be:	9f 77       	andi	r25, 0x7F	; 127
    93c0:	5f 77       	andi	r21, 0x7F	; 127
    93c2:	0e 94 8b 49 	call	0x9316	; 0x9316 <__fp_split3>
    93c6:	68 f3       	brcs	.-38     	; 0x93a2 <__gesf2+0xa>
    93c8:	99 23       	and	r25, r25
    93ca:	a9 f3       	breq	.-22     	; 0x93b6 <__gesf2+0x1e>
    93cc:	55 23       	and	r21, r21
    93ce:	a9 f3       	breq	.-22     	; 0x93ba <__gesf2+0x22>
    93d0:	ff 27       	eor	r31, r31
    93d2:	95 17       	cp	r25, r21
    93d4:	58 f4       	brcc	.+22     	; 0x93ec <hypot+0x2e>
    93d6:	e5 2f       	mov	r30, r21
    93d8:	e9 1b       	sub	r30, r25
    93da:	ed 30       	cpi	r30, 0x0D	; 13
    93dc:	60 f7       	brcc	.-40     	; 0x93b6 <__gesf2+0x1e>
    93de:	5e 3b       	cpi	r21, 0xBE	; 190
    93e0:	10 f0       	brcs	.+4      	; 0x93e6 <hypot+0x28>
    93e2:	f1 e4       	ldi	r31, 0x41	; 65
    93e4:	1c c0       	rjmp	.+56     	; 0x941e <hypot+0x60>
    93e6:	90 34       	cpi	r25, 0x40	; 64
    93e8:	e0 f4       	brcc	.+56     	; 0x9422 <hypot+0x64>
    93ea:	0a c0       	rjmp	.+20     	; 0x9400 <hypot+0x42>
    93ec:	e9 2f       	mov	r30, r25
    93ee:	e5 1b       	sub	r30, r21
    93f0:	ed 30       	cpi	r30, 0x0D	; 13
    93f2:	18 f7       	brcc	.-58     	; 0x93ba <__gesf2+0x22>
    93f4:	9e 3b       	cpi	r25, 0xBE	; 190
    93f6:	10 f0       	brcs	.+4      	; 0x93fc <hypot+0x3e>
    93f8:	f1 e4       	ldi	r31, 0x41	; 65
    93fa:	11 c0       	rjmp	.+34     	; 0x941e <hypot+0x60>
    93fc:	50 34       	cpi	r21, 0x40	; 64
    93fe:	88 f4       	brcc	.+34     	; 0x9422 <hypot+0x64>
    9400:	f9 ea       	ldi	r31, 0xA9	; 169
    9402:	88 23       	and	r24, r24
    9404:	2a f0       	brmi	.+10     	; 0x9410 <hypot+0x52>
    9406:	9a 95       	dec	r25
    9408:	66 0f       	add	r22, r22
    940a:	77 1f       	adc	r23, r23
    940c:	88 1f       	adc	r24, r24
    940e:	da f7       	brpl	.-10     	; 0x9406 <hypot+0x48>
    9410:	44 23       	and	r20, r20
    9412:	2a f0       	brmi	.+10     	; 0x941e <hypot+0x60>
    9414:	5a 95       	dec	r21
    9416:	22 0f       	add	r18, r18
    9418:	33 1f       	adc	r19, r19
    941a:	44 1f       	adc	r20, r20
    941c:	da f7       	brpl	.-10     	; 0x9414 <hypot+0x56>
    941e:	9f 1b       	sub	r25, r31
    9420:	5f 1b       	sub	r21, r31
    9422:	ff 93       	push	r31
    9424:	1f 93       	push	r17
    9426:	0f 93       	push	r16
    9428:	ff 92       	push	r15
    942a:	ef 92       	push	r14
    942c:	79 01       	movw	r14, r18
    942e:	8a 01       	movw	r16, r20
    9430:	bb 27       	eor	r27, r27
    9432:	ab 2f       	mov	r26, r27
    9434:	9b 01       	movw	r18, r22
    9436:	ac 01       	movw	r20, r24
    9438:	0e 94 96 4a 	call	0x952c	; 0x952c <__mulsf3_pse>
    943c:	97 01       	movw	r18, r14
    943e:	a8 01       	movw	r20, r16
    9440:	bf 93       	push	r27
    9442:	7b 01       	movw	r14, r22
    9444:	8c 01       	movw	r16, r24
    9446:	aa 27       	eor	r26, r26
    9448:	ba 2f       	mov	r27, r26
    944a:	b9 01       	movw	r22, r18
    944c:	ca 01       	movw	r24, r20
    944e:	0e 94 96 4a 	call	0x952c	; 0x952c <__mulsf3_pse>
    9452:	af 91       	pop	r26
    9454:	97 01       	movw	r18, r14
    9456:	a8 01       	movw	r20, r16
    9458:	ef 90       	pop	r14
    945a:	ff 90       	pop	r15
    945c:	0f 91       	pop	r16
    945e:	1f 91       	pop	r17
    9460:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__addsf3x>
    9464:	0e 94 66 49 	call	0x92cc	; 0x92cc <__fp_round>
    9468:	0e 94 4b 4b 	call	0x9696	; 0x9696 <sqrt>
    946c:	4f 91       	pop	r20
    946e:	40 ff       	sbrs	r20, 0
    9470:	08 95       	ret
    9472:	55 27       	eor	r21, r21
    9474:	47 fd       	sbrc	r20, 7
    9476:	50 95       	com	r21
    9478:	0c 94 4a 4a 	jmp	0x9494	; 0x9494 <ldexp>

0000947c <inverse>:
    947c:	9b 01       	movw	r18, r22
    947e:	ac 01       	movw	r20, r24
    9480:	60 e0       	ldi	r22, 0x00	; 0
    9482:	70 e0       	ldi	r23, 0x00	; 0
    9484:	80 e8       	ldi	r24, 0x80	; 128
    9486:	9f e3       	ldi	r25, 0x3F	; 63
    9488:	0c 94 77 47 	jmp	0x8eee	; 0x8eee <__divsf3>
    948c:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    9490:	0c 94 f5 48 	jmp	0x91ea	; 0x91ea <__fp_mpack>

00009494 <ldexp>:
    9494:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    9498:	d8 f3       	brcs	.-10     	; 0x9490 <inverse+0x14>
    949a:	99 23       	and	r25, r25
    949c:	c9 f3       	breq	.-14     	; 0x9490 <inverse+0x14>
    949e:	94 0f       	add	r25, r20
    94a0:	51 1d       	adc	r21, r1
    94a2:	a3 f3       	brvs	.-24     	; 0x948c <inverse+0x10>
    94a4:	91 50       	subi	r25, 0x01	; 1
    94a6:	50 40       	sbci	r21, 0x00	; 0
    94a8:	94 f0       	brlt	.+36     	; 0x94ce <ldexp+0x3a>
    94aa:	59 f0       	breq	.+22     	; 0x94c2 <ldexp+0x2e>
    94ac:	88 23       	and	r24, r24
    94ae:	32 f0       	brmi	.+12     	; 0x94bc <ldexp+0x28>
    94b0:	66 0f       	add	r22, r22
    94b2:	77 1f       	adc	r23, r23
    94b4:	88 1f       	adc	r24, r24
    94b6:	91 50       	subi	r25, 0x01	; 1
    94b8:	50 40       	sbci	r21, 0x00	; 0
    94ba:	c1 f7       	brne	.-16     	; 0x94ac <ldexp+0x18>
    94bc:	9e 3f       	cpi	r25, 0xFE	; 254
    94be:	51 05       	cpc	r21, r1
    94c0:	2c f7       	brge	.-54     	; 0x948c <inverse+0x10>
    94c2:	88 0f       	add	r24, r24
    94c4:	91 1d       	adc	r25, r1
    94c6:	96 95       	lsr	r25
    94c8:	87 95       	ror	r24
    94ca:	97 f9       	bld	r25, 7
    94cc:	08 95       	ret
    94ce:	5f 3f       	cpi	r21, 0xFF	; 255
    94d0:	ac f0       	brlt	.+42     	; 0x94fc <ldexp+0x68>
    94d2:	98 3e       	cpi	r25, 0xE8	; 232
    94d4:	9c f0       	brlt	.+38     	; 0x94fc <ldexp+0x68>
    94d6:	bb 27       	eor	r27, r27
    94d8:	86 95       	lsr	r24
    94da:	77 95       	ror	r23
    94dc:	67 95       	ror	r22
    94de:	b7 95       	ror	r27
    94e0:	08 f4       	brcc	.+2      	; 0x94e4 <ldexp+0x50>
    94e2:	b1 60       	ori	r27, 0x01	; 1
    94e4:	93 95       	inc	r25
    94e6:	c1 f7       	brne	.-16     	; 0x94d8 <ldexp+0x44>
    94e8:	bb 0f       	add	r27, r27
    94ea:	58 f7       	brcc	.-42     	; 0x94c2 <ldexp+0x2e>
    94ec:	11 f4       	brne	.+4      	; 0x94f2 <ldexp+0x5e>
    94ee:	60 ff       	sbrs	r22, 0
    94f0:	e8 cf       	rjmp	.-48     	; 0x94c2 <ldexp+0x2e>
    94f2:	6f 5f       	subi	r22, 0xFF	; 255
    94f4:	7f 4f       	sbci	r23, 0xFF	; 255
    94f6:	8f 4f       	sbci	r24, 0xFF	; 255
    94f8:	9f 4f       	sbci	r25, 0xFF	; 255
    94fa:	e3 cf       	rjmp	.-58     	; 0x94c2 <ldexp+0x2e>
    94fc:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>

00009500 <__mulsf3>:
    9500:	0e 94 93 4a 	call	0x9526	; 0x9526 <__mulsf3x>
    9504:	0c 94 66 49 	jmp	0x92cc	; 0x92cc <__fp_round>
    9508:	0e 94 2d 49 	call	0x925a	; 0x925a <__fp_pscA>
    950c:	38 f0       	brcs	.+14     	; 0x951c <__mulsf3+0x1c>
    950e:	0e 94 34 49 	call	0x9268	; 0x9268 <__fp_pscB>
    9512:	20 f0       	brcs	.+8      	; 0x951c <__mulsf3+0x1c>
    9514:	95 23       	and	r25, r21
    9516:	11 f0       	breq	.+4      	; 0x951c <__mulsf3+0x1c>
    9518:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    951c:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    9520:	11 24       	eor	r1, r1
    9522:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>

00009526 <__mulsf3x>:
    9526:	0e 94 8b 49 	call	0x9316	; 0x9316 <__fp_split3>
    952a:	70 f3       	brcs	.-36     	; 0x9508 <__mulsf3+0x8>

0000952c <__mulsf3_pse>:
    952c:	95 9f       	mul	r25, r21
    952e:	c1 f3       	breq	.-16     	; 0x9520 <__mulsf3+0x20>
    9530:	95 0f       	add	r25, r21
    9532:	50 e0       	ldi	r21, 0x00	; 0
    9534:	55 1f       	adc	r21, r21
    9536:	62 9f       	mul	r22, r18
    9538:	f0 01       	movw	r30, r0
    953a:	72 9f       	mul	r23, r18
    953c:	bb 27       	eor	r27, r27
    953e:	f0 0d       	add	r31, r0
    9540:	b1 1d       	adc	r27, r1
    9542:	63 9f       	mul	r22, r19
    9544:	aa 27       	eor	r26, r26
    9546:	f0 0d       	add	r31, r0
    9548:	b1 1d       	adc	r27, r1
    954a:	aa 1f       	adc	r26, r26
    954c:	64 9f       	mul	r22, r20
    954e:	66 27       	eor	r22, r22
    9550:	b0 0d       	add	r27, r0
    9552:	a1 1d       	adc	r26, r1
    9554:	66 1f       	adc	r22, r22
    9556:	82 9f       	mul	r24, r18
    9558:	22 27       	eor	r18, r18
    955a:	b0 0d       	add	r27, r0
    955c:	a1 1d       	adc	r26, r1
    955e:	62 1f       	adc	r22, r18
    9560:	73 9f       	mul	r23, r19
    9562:	b0 0d       	add	r27, r0
    9564:	a1 1d       	adc	r26, r1
    9566:	62 1f       	adc	r22, r18
    9568:	83 9f       	mul	r24, r19
    956a:	a0 0d       	add	r26, r0
    956c:	61 1d       	adc	r22, r1
    956e:	22 1f       	adc	r18, r18
    9570:	74 9f       	mul	r23, r20
    9572:	33 27       	eor	r19, r19
    9574:	a0 0d       	add	r26, r0
    9576:	61 1d       	adc	r22, r1
    9578:	23 1f       	adc	r18, r19
    957a:	84 9f       	mul	r24, r20
    957c:	60 0d       	add	r22, r0
    957e:	21 1d       	adc	r18, r1
    9580:	82 2f       	mov	r24, r18
    9582:	76 2f       	mov	r23, r22
    9584:	6a 2f       	mov	r22, r26
    9586:	11 24       	eor	r1, r1
    9588:	9f 57       	subi	r25, 0x7F	; 127
    958a:	50 40       	sbci	r21, 0x00	; 0
    958c:	9a f0       	brmi	.+38     	; 0x95b4 <__mulsf3_pse+0x88>
    958e:	f1 f0       	breq	.+60     	; 0x95cc <__mulsf3_pse+0xa0>
    9590:	88 23       	and	r24, r24
    9592:	4a f0       	brmi	.+18     	; 0x95a6 <__mulsf3_pse+0x7a>
    9594:	ee 0f       	add	r30, r30
    9596:	ff 1f       	adc	r31, r31
    9598:	bb 1f       	adc	r27, r27
    959a:	66 1f       	adc	r22, r22
    959c:	77 1f       	adc	r23, r23
    959e:	88 1f       	adc	r24, r24
    95a0:	91 50       	subi	r25, 0x01	; 1
    95a2:	50 40       	sbci	r21, 0x00	; 0
    95a4:	a9 f7       	brne	.-22     	; 0x9590 <__mulsf3_pse+0x64>
    95a6:	9e 3f       	cpi	r25, 0xFE	; 254
    95a8:	51 05       	cpc	r21, r1
    95aa:	80 f0       	brcs	.+32     	; 0x95cc <__mulsf3_pse+0xa0>
    95ac:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    95b0:	0c 94 c6 49 	jmp	0x938c	; 0x938c <__fp_szero>
    95b4:	5f 3f       	cpi	r21, 0xFF	; 255
    95b6:	e4 f3       	brlt	.-8      	; 0x95b0 <__mulsf3_pse+0x84>
    95b8:	98 3e       	cpi	r25, 0xE8	; 232
    95ba:	d4 f3       	brlt	.-12     	; 0x95b0 <__mulsf3_pse+0x84>
    95bc:	86 95       	lsr	r24
    95be:	77 95       	ror	r23
    95c0:	67 95       	ror	r22
    95c2:	b7 95       	ror	r27
    95c4:	f7 95       	ror	r31
    95c6:	e7 95       	ror	r30
    95c8:	9f 5f       	subi	r25, 0xFF	; 255
    95ca:	c1 f7       	brne	.-16     	; 0x95bc <__mulsf3_pse+0x90>
    95cc:	fe 2b       	or	r31, r30
    95ce:	88 0f       	add	r24, r24
    95d0:	91 1d       	adc	r25, r1
    95d2:	96 95       	lsr	r25
    95d4:	87 95       	ror	r24
    95d6:	97 f9       	bld	r25, 7
    95d8:	08 95       	ret

000095da <pow>:
    95da:	fa 01       	movw	r30, r20
    95dc:	ee 0f       	add	r30, r30
    95de:	ff 1f       	adc	r31, r31
    95e0:	30 96       	adiw	r30, 0x00	; 0
    95e2:	21 05       	cpc	r18, r1
    95e4:	31 05       	cpc	r19, r1
    95e6:	a1 f1       	breq	.+104    	; 0x9650 <pow+0x76>
    95e8:	61 15       	cp	r22, r1
    95ea:	71 05       	cpc	r23, r1
    95ec:	61 f4       	brne	.+24     	; 0x9606 <pow+0x2c>
    95ee:	80 38       	cpi	r24, 0x80	; 128
    95f0:	bf e3       	ldi	r27, 0x3F	; 63
    95f2:	9b 07       	cpc	r25, r27
    95f4:	49 f1       	breq	.+82     	; 0x9648 <pow+0x6e>
    95f6:	68 94       	set
    95f8:	90 38       	cpi	r25, 0x80	; 128
    95fa:	81 05       	cpc	r24, r1
    95fc:	61 f0       	breq	.+24     	; 0x9616 <pow+0x3c>
    95fe:	80 38       	cpi	r24, 0x80	; 128
    9600:	bf ef       	ldi	r27, 0xFF	; 255
    9602:	9b 07       	cpc	r25, r27
    9604:	41 f0       	breq	.+16     	; 0x9616 <pow+0x3c>
    9606:	99 23       	and	r25, r25
    9608:	4a f5       	brpl	.+82     	; 0x965c <pow+0x82>
    960a:	ff 3f       	cpi	r31, 0xFF	; 255
    960c:	e1 05       	cpc	r30, r1
    960e:	31 05       	cpc	r19, r1
    9610:	21 05       	cpc	r18, r1
    9612:	19 f1       	breq	.+70     	; 0x965a <pow+0x80>
    9614:	e8 94       	clt
    9616:	08 94       	sec
    9618:	e7 95       	ror	r30
    961a:	d9 01       	movw	r26, r18
    961c:	aa 23       	and	r26, r26
    961e:	29 f4       	brne	.+10     	; 0x962a <pow+0x50>
    9620:	ab 2f       	mov	r26, r27
    9622:	be 2f       	mov	r27, r30
    9624:	f8 5f       	subi	r31, 0xF8	; 248
    9626:	d0 f3       	brcs	.-12     	; 0x961c <pow+0x42>
    9628:	10 c0       	rjmp	.+32     	; 0x964a <pow+0x70>
    962a:	ff 5f       	subi	r31, 0xFF	; 255
    962c:	70 f4       	brcc	.+28     	; 0x964a <pow+0x70>
    962e:	a6 95       	lsr	r26
    9630:	e0 f7       	brcc	.-8      	; 0x962a <pow+0x50>
    9632:	f7 39       	cpi	r31, 0x97	; 151
    9634:	50 f0       	brcs	.+20     	; 0x964a <pow+0x70>
    9636:	19 f0       	breq	.+6      	; 0x963e <pow+0x64>
    9638:	ff 3a       	cpi	r31, 0xAF	; 175
    963a:	38 f4       	brcc	.+14     	; 0x964a <pow+0x70>
    963c:	9f 77       	andi	r25, 0x7F	; 127
    963e:	9f 93       	push	r25
    9640:	0d d0       	rcall	.+26     	; 0x965c <pow+0x82>
    9642:	0f 90       	pop	r0
    9644:	07 fc       	sbrc	r0, 7
    9646:	90 58       	subi	r25, 0x80	; 128
    9648:	08 95       	ret
    964a:	46 f0       	brts	.+16     	; 0x965c <pow+0x82>
    964c:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    9650:	60 e0       	ldi	r22, 0x00	; 0
    9652:	70 e0       	ldi	r23, 0x00	; 0
    9654:	80 e8       	ldi	r24, 0x80	; 128
    9656:	9f e3       	ldi	r25, 0x3F	; 63
    9658:	08 95       	ret
    965a:	4f e7       	ldi	r20, 0x7F	; 127
    965c:	9f 77       	andi	r25, 0x7F	; 127
    965e:	5f 93       	push	r21
    9660:	4f 93       	push	r20
    9662:	3f 93       	push	r19
    9664:	2f 93       	push	r18
    9666:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <log>
    966a:	2f 91       	pop	r18
    966c:	3f 91       	pop	r19
    966e:	4f 91       	pop	r20
    9670:	5f 91       	pop	r21
    9672:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    9676:	0c 94 9c 4b 	jmp	0x9738	; 0x9738 <exp>

0000967a <sin>:
    967a:	9f 93       	push	r25
    967c:	0e 94 3d 49 	call	0x927a	; 0x927a <__fp_rempio2>
    9680:	0f 90       	pop	r0
    9682:	07 fc       	sbrc	r0, 7
    9684:	ee 5f       	subi	r30, 0xFE	; 254
    9686:	0c 94 77 49 	jmp	0x92ee	; 0x92ee <__fp_sinus>
    968a:	19 f4       	brne	.+6      	; 0x9692 <sin+0x18>
    968c:	16 f4       	brtc	.+4      	; 0x9692 <sin+0x18>
    968e:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    9692:	0c 94 f5 48 	jmp	0x91ea	; 0x91ea <__fp_mpack>

00009696 <sqrt>:
    9696:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    969a:	b8 f3       	brcs	.-18     	; 0x968a <sin+0x10>
    969c:	99 23       	and	r25, r25
    969e:	c9 f3       	breq	.-14     	; 0x9692 <sin+0x18>
    96a0:	b6 f3       	brts	.-20     	; 0x968e <sin+0x14>
    96a2:	9f 57       	subi	r25, 0x7F	; 127
    96a4:	55 0b       	sbc	r21, r21
    96a6:	87 ff       	sbrs	r24, 7
    96a8:	0e 94 ce 4b 	call	0x979c	; 0x979c <__fp_norm2>
    96ac:	00 24       	eor	r0, r0
    96ae:	a0 e6       	ldi	r26, 0x60	; 96
    96b0:	40 ea       	ldi	r20, 0xA0	; 160
    96b2:	90 01       	movw	r18, r0
    96b4:	80 58       	subi	r24, 0x80	; 128
    96b6:	56 95       	lsr	r21
    96b8:	97 95       	ror	r25
    96ba:	28 f4       	brcc	.+10     	; 0x96c6 <sqrt+0x30>
    96bc:	80 5c       	subi	r24, 0xC0	; 192
    96be:	66 0f       	add	r22, r22
    96c0:	77 1f       	adc	r23, r23
    96c2:	88 1f       	adc	r24, r24
    96c4:	20 f0       	brcs	.+8      	; 0x96ce <sqrt+0x38>
    96c6:	26 17       	cp	r18, r22
    96c8:	37 07       	cpc	r19, r23
    96ca:	48 07       	cpc	r20, r24
    96cc:	30 f4       	brcc	.+12     	; 0x96da <sqrt+0x44>
    96ce:	62 1b       	sub	r22, r18
    96d0:	73 0b       	sbc	r23, r19
    96d2:	84 0b       	sbc	r24, r20
    96d4:	20 29       	or	r18, r0
    96d6:	31 29       	or	r19, r1
    96d8:	4a 2b       	or	r20, r26
    96da:	a6 95       	lsr	r26
    96dc:	17 94       	ror	r1
    96de:	07 94       	ror	r0
    96e0:	20 25       	eor	r18, r0
    96e2:	31 25       	eor	r19, r1
    96e4:	4a 27       	eor	r20, r26
    96e6:	58 f7       	brcc	.-42     	; 0x96be <sqrt+0x28>
    96e8:	66 0f       	add	r22, r22
    96ea:	77 1f       	adc	r23, r23
    96ec:	88 1f       	adc	r24, r24
    96ee:	20 f0       	brcs	.+8      	; 0x96f8 <sqrt+0x62>
    96f0:	26 17       	cp	r18, r22
    96f2:	37 07       	cpc	r19, r23
    96f4:	48 07       	cpc	r20, r24
    96f6:	30 f4       	brcc	.+12     	; 0x9704 <sqrt+0x6e>
    96f8:	62 0b       	sbc	r22, r18
    96fa:	73 0b       	sbc	r23, r19
    96fc:	84 0b       	sbc	r24, r20
    96fe:	20 0d       	add	r18, r0
    9700:	31 1d       	adc	r19, r1
    9702:	41 1d       	adc	r20, r1
    9704:	a0 95       	com	r26
    9706:	81 f7       	brne	.-32     	; 0x96e8 <sqrt+0x52>
    9708:	b9 01       	movw	r22, r18
    970a:	84 2f       	mov	r24, r20
    970c:	91 58       	subi	r25, 0x81	; 129
    970e:	88 0f       	add	r24, r24
    9710:	96 95       	lsr	r25
    9712:	87 95       	ror	r24
    9714:	08 95       	ret

00009716 <square>:
    9716:	9b 01       	movw	r18, r22
    9718:	ac 01       	movw	r20, r24
    971a:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <__mulsf3>

0000971e <__unordsf2>:
    971e:	0e 94 b0 48 	call	0x9160	; 0x9160 <__fp_cmp>
    9722:	88 0b       	sbc	r24, r24
    9724:	99 0b       	sbc	r25, r25
    9726:	08 95       	ret
    9728:	29 f4       	brne	.+10     	; 0x9734 <__unordsf2+0x16>
    972a:	16 f0       	brts	.+4      	; 0x9730 <__unordsf2+0x12>
    972c:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>
    9730:	0c 94 c5 49 	jmp	0x938a	; 0x938a <__fp_zero>
    9734:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>

00009738 <exp>:
    9738:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    973c:	a8 f3       	brcs	.-22     	; 0x9728 <__unordsf2+0xa>
    973e:	96 38       	cpi	r25, 0x86	; 134
    9740:	a0 f7       	brcc	.-24     	; 0x972a <__unordsf2+0xc>
    9742:	07 f8       	bld	r0, 7
    9744:	0f 92       	push	r0
    9746:	e8 94       	clt
    9748:	2b e3       	ldi	r18, 0x3B	; 59
    974a:	3a ea       	ldi	r19, 0xAA	; 170
    974c:	48 eb       	ldi	r20, 0xB8	; 184
    974e:	5f e7       	ldi	r21, 0x7F	; 127
    9750:	0e 94 96 4a 	call	0x952c	; 0x952c <__mulsf3_pse>
    9754:	0f 92       	push	r0
    9756:	0f 92       	push	r0
    9758:	0f 92       	push	r0
    975a:	4d b7       	in	r20, 0x3d	; 61
    975c:	5e b7       	in	r21, 0x3e	; 62
    975e:	0f 92       	push	r0
    9760:	0e 94 39 4c 	call	0x9872	; 0x9872 <modf>
    9764:	e7 e6       	ldi	r30, 0x67	; 103
    9766:	f2 e0       	ldi	r31, 0x02	; 2
    9768:	0e 94 06 49 	call	0x920c	; 0x920c <__fp_powser>
    976c:	4f 91       	pop	r20
    976e:	5f 91       	pop	r21
    9770:	ef 91       	pop	r30
    9772:	ff 91       	pop	r31
    9774:	e5 95       	asr	r30
    9776:	ee 1f       	adc	r30, r30
    9778:	ff 1f       	adc	r31, r31
    977a:	49 f0       	breq	.+18     	; 0x978e <exp+0x56>
    977c:	fe 57       	subi	r31, 0x7E	; 126
    977e:	e0 68       	ori	r30, 0x80	; 128
    9780:	44 27       	eor	r20, r20
    9782:	ee 0f       	add	r30, r30
    9784:	44 1f       	adc	r20, r20
    9786:	fa 95       	dec	r31
    9788:	e1 f7       	brne	.-8      	; 0x9782 <exp+0x4a>
    978a:	41 95       	neg	r20
    978c:	55 0b       	sbc	r21, r21
    978e:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ldexp>
    9792:	0f 90       	pop	r0
    9794:	07 fe       	sbrs	r0, 7
    9796:	0c 94 3e 4a 	jmp	0x947c	; 0x947c <inverse>
    979a:	08 95       	ret

0000979c <__fp_norm2>:
    979c:	91 50       	subi	r25, 0x01	; 1
    979e:	50 40       	sbci	r21, 0x00	; 0
    97a0:	66 0f       	add	r22, r22
    97a2:	77 1f       	adc	r23, r23
    97a4:	88 1f       	adc	r24, r24
    97a6:	d2 f7       	brpl	.-12     	; 0x979c <__fp_norm2>
    97a8:	08 95       	ret

000097aa <__fp_powsodd>:
    97aa:	9f 93       	push	r25
    97ac:	8f 93       	push	r24
    97ae:	7f 93       	push	r23
    97b0:	6f 93       	push	r22
    97b2:	ff 93       	push	r31
    97b4:	ef 93       	push	r30
    97b6:	9b 01       	movw	r18, r22
    97b8:	ac 01       	movw	r20, r24
    97ba:	0e 94 80 4a 	call	0x9500	; 0x9500 <__mulsf3>
    97be:	ef 91       	pop	r30
    97c0:	ff 91       	pop	r31
    97c2:	0e 94 06 49 	call	0x920c	; 0x920c <__fp_powser>
    97c6:	2f 91       	pop	r18
    97c8:	3f 91       	pop	r19
    97ca:	4f 91       	pop	r20
    97cc:	5f 91       	pop	r21
    97ce:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <__mulsf3>
    97d2:	16 f0       	brts	.+4      	; 0x97d8 <__fp_powsodd+0x2e>
    97d4:	0c 94 f5 48 	jmp	0x91ea	; 0x91ea <__fp_mpack>
    97d8:	0c 94 03 49 	jmp	0x9206	; 0x9206 <__fp_nan>
    97dc:	68 94       	set
    97de:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__fp_inf>

000097e2 <log>:
    97e2:	0e 94 93 49 	call	0x9326	; 0x9326 <__fp_splitA>
    97e6:	a8 f3       	brcs	.-22     	; 0x97d2 <__fp_powsodd+0x28>
    97e8:	99 23       	and	r25, r25
    97ea:	c1 f3       	breq	.-16     	; 0x97dc <__fp_powsodd+0x32>
    97ec:	ae f3       	brts	.-22     	; 0x97d8 <__fp_powsodd+0x2e>
    97ee:	df 93       	push	r29
    97f0:	cf 93       	push	r28
    97f2:	1f 93       	push	r17
    97f4:	0f 93       	push	r16
    97f6:	ff 92       	push	r15
    97f8:	c9 2f       	mov	r28, r25
    97fa:	dd 27       	eor	r29, r29
    97fc:	88 23       	and	r24, r24
    97fe:	2a f0       	brmi	.+10     	; 0x980a <log+0x28>
    9800:	21 97       	sbiw	r28, 0x01	; 1
    9802:	66 0f       	add	r22, r22
    9804:	77 1f       	adc	r23, r23
    9806:	88 1f       	adc	r24, r24
    9808:	da f7       	brpl	.-10     	; 0x9800 <log+0x1e>
    980a:	20 e0       	ldi	r18, 0x00	; 0
    980c:	30 e0       	ldi	r19, 0x00	; 0
    980e:	40 e8       	ldi	r20, 0x80	; 128
    9810:	5f eb       	ldi	r21, 0xBF	; 191
    9812:	9f e3       	ldi	r25, 0x3F	; 63
    9814:	88 39       	cpi	r24, 0x98	; 152
    9816:	20 f0       	brcs	.+8      	; 0x9820 <log+0x3e>
    9818:	80 3e       	cpi	r24, 0xE0	; 224
    981a:	38 f0       	brcs	.+14     	; 0x982a <log+0x48>
    981c:	21 96       	adiw	r28, 0x01	; 1
    981e:	8f 77       	andi	r24, 0x7F	; 127
    9820:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    9824:	ef e8       	ldi	r30, 0x8F	; 143
    9826:	f2 e0       	ldi	r31, 0x02	; 2
    9828:	04 c0       	rjmp	.+8      	; 0x9832 <log+0x50>
    982a:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <__addsf3>
    982e:	ec eb       	ldi	r30, 0xBC	; 188
    9830:	f2 e0       	ldi	r31, 0x02	; 2
    9832:	0e 94 06 49 	call	0x920c	; 0x920c <__fp_powser>
    9836:	8b 01       	movw	r16, r22
    9838:	be 01       	movw	r22, r28
    983a:	ec 01       	movw	r28, r24
    983c:	fb 2e       	mov	r15, r27
    983e:	6f 57       	subi	r22, 0x7F	; 127
    9840:	71 09       	sbc	r23, r1
    9842:	75 95       	asr	r23
    9844:	77 1f       	adc	r23, r23
    9846:	88 0b       	sbc	r24, r24
    9848:	99 0b       	sbc	r25, r25
    984a:	0e 94 21 48 	call	0x9042	; 0x9042 <__floatsisf>
    984e:	28 e1       	ldi	r18, 0x18	; 24
    9850:	32 e7       	ldi	r19, 0x72	; 114
    9852:	41 e3       	ldi	r20, 0x31	; 49
    9854:	5f e3       	ldi	r21, 0x3F	; 63
    9856:	0e 94 93 4a 	call	0x9526	; 0x9526 <__mulsf3x>
    985a:	af 2d       	mov	r26, r15
    985c:	98 01       	movw	r18, r16
    985e:	ae 01       	movw	r20, r28
    9860:	ff 90       	pop	r15
    9862:	0f 91       	pop	r16
    9864:	1f 91       	pop	r17
    9866:	cf 91       	pop	r28
    9868:	df 91       	pop	r29
    986a:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__addsf3x>
    986e:	0c 94 66 49 	jmp	0x92cc	; 0x92cc <__fp_round>

00009872 <modf>:
    9872:	fa 01       	movw	r30, r20
    9874:	dc 01       	movw	r26, r24
    9876:	aa 0f       	add	r26, r26
    9878:	bb 1f       	adc	r27, r27
    987a:	9b 01       	movw	r18, r22
    987c:	ac 01       	movw	r20, r24
    987e:	bf 57       	subi	r27, 0x7F	; 127
    9880:	28 f4       	brcc	.+10     	; 0x988c <modf+0x1a>
    9882:	22 27       	eor	r18, r18
    9884:	33 27       	eor	r19, r19
    9886:	44 27       	eor	r20, r20
    9888:	50 78       	andi	r21, 0x80	; 128
    988a:	20 c0       	rjmp	.+64     	; 0x98cc <modf+0x5a>
    988c:	b7 51       	subi	r27, 0x17	; 23
    988e:	90 f4       	brcc	.+36     	; 0x98b4 <modf+0x42>
    9890:	ab 2f       	mov	r26, r27
    9892:	00 24       	eor	r0, r0
    9894:	46 95       	lsr	r20
    9896:	37 95       	ror	r19
    9898:	27 95       	ror	r18
    989a:	01 1c       	adc	r0, r1
    989c:	a3 95       	inc	r26
    989e:	d2 f3       	brmi	.-12     	; 0x9894 <modf+0x22>
    98a0:	00 20       	and	r0, r0
    98a2:	71 f0       	breq	.+28     	; 0x98c0 <modf+0x4e>
    98a4:	22 0f       	add	r18, r18
    98a6:	33 1f       	adc	r19, r19
    98a8:	44 1f       	adc	r20, r20
    98aa:	b3 95       	inc	r27
    98ac:	da f3       	brmi	.-10     	; 0x98a4 <modf+0x32>
    98ae:	0e d0       	rcall	.+28     	; 0x98cc <modf+0x5a>
    98b0:	0c 94 77 46 	jmp	0x8cee	; 0x8cee <__subsf3>
    98b4:	61 30       	cpi	r22, 0x01	; 1
    98b6:	71 05       	cpc	r23, r1
    98b8:	a0 e8       	ldi	r26, 0x80	; 128
    98ba:	8a 07       	cpc	r24, r26
    98bc:	b9 46       	sbci	r27, 0x69	; 105
    98be:	30 f4       	brcc	.+12     	; 0x98cc <modf+0x5a>
    98c0:	9b 01       	movw	r18, r22
    98c2:	ac 01       	movw	r20, r24
    98c4:	66 27       	eor	r22, r22
    98c6:	77 27       	eor	r23, r23
    98c8:	88 27       	eor	r24, r24
    98ca:	90 78       	andi	r25, 0x80	; 128
    98cc:	30 96       	adiw	r30, 0x00	; 0
    98ce:	21 f0       	breq	.+8      	; 0x98d8 <modf+0x66>
    98d0:	20 83       	st	Z, r18
    98d2:	31 83       	std	Z+1, r19	; 0x01
    98d4:	42 83       	std	Z+2, r20	; 0x02
    98d6:	53 83       	std	Z+3, r21	; 0x03
    98d8:	08 95       	ret

000098da <vfprintf>:
    98da:	2f 92       	push	r2
    98dc:	3f 92       	push	r3
    98de:	4f 92       	push	r4
    98e0:	5f 92       	push	r5
    98e2:	6f 92       	push	r6
    98e4:	7f 92       	push	r7
    98e6:	8f 92       	push	r8
    98e8:	9f 92       	push	r9
    98ea:	af 92       	push	r10
    98ec:	bf 92       	push	r11
    98ee:	cf 92       	push	r12
    98f0:	df 92       	push	r13
    98f2:	ef 92       	push	r14
    98f4:	ff 92       	push	r15
    98f6:	0f 93       	push	r16
    98f8:	1f 93       	push	r17
    98fa:	cf 93       	push	r28
    98fc:	df 93       	push	r29
    98fe:	cd b7       	in	r28, 0x3d	; 61
    9900:	de b7       	in	r29, 0x3e	; 62
    9902:	63 97       	sbiw	r28, 0x13	; 19
    9904:	cd bf       	out	0x3d, r28	; 61
    9906:	de bf       	out	0x3e, r29	; 62
    9908:	6c 01       	movw	r12, r24
    990a:	4b 01       	movw	r8, r22
    990c:	2a 01       	movw	r4, r20
    990e:	fc 01       	movw	r30, r24
    9910:	16 82       	std	Z+6, r1	; 0x06
    9912:	17 82       	std	Z+7, r1	; 0x07
    9914:	83 81       	ldd	r24, Z+3	; 0x03
    9916:	81 ff       	sbrs	r24, 1
    9918:	43 c3       	rjmp	.+1670   	; 0x9fa0 <vfprintf+0x6c6>
    991a:	ae 01       	movw	r20, r28
    991c:	4f 5f       	subi	r20, 0xFF	; 255
    991e:	5f 4f       	sbci	r21, 0xFF	; 255
    9920:	3a 01       	movw	r6, r20
    9922:	f6 01       	movw	r30, r12
    9924:	93 81       	ldd	r25, Z+3	; 0x03
    9926:	f4 01       	movw	r30, r8
    9928:	93 fd       	sbrc	r25, 3
    992a:	85 91       	lpm	r24, Z+
    992c:	93 ff       	sbrs	r25, 3
    992e:	81 91       	ld	r24, Z+
    9930:	4f 01       	movw	r8, r30
    9932:	88 23       	and	r24, r24
    9934:	09 f4       	brne	.+2      	; 0x9938 <vfprintf+0x5e>
    9936:	30 c3       	rjmp	.+1632   	; 0x9f98 <vfprintf+0x6be>
    9938:	85 32       	cpi	r24, 0x25	; 37
    993a:	39 f4       	brne	.+14     	; 0x994a <vfprintf+0x70>
    993c:	93 fd       	sbrc	r25, 3
    993e:	85 91       	lpm	r24, Z+
    9940:	93 ff       	sbrs	r25, 3
    9942:	81 91       	ld	r24, Z+
    9944:	4f 01       	movw	r8, r30
    9946:	85 32       	cpi	r24, 0x25	; 37
    9948:	39 f4       	brne	.+14     	; 0x9958 <vfprintf+0x7e>
    994a:	b6 01       	movw	r22, r12
    994c:	90 e0       	ldi	r25, 0x00	; 0
    994e:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9952:	52 01       	movw	r10, r4
    9954:	25 01       	movw	r4, r10
    9956:	e5 cf       	rjmp	.-54     	; 0x9922 <vfprintf+0x48>
    9958:	10 e0       	ldi	r17, 0x00	; 0
    995a:	f1 2c       	mov	r15, r1
    995c:	20 e0       	ldi	r18, 0x00	; 0
    995e:	20 32       	cpi	r18, 0x20	; 32
    9960:	a0 f4       	brcc	.+40     	; 0x998a <vfprintf+0xb0>
    9962:	8b 32       	cpi	r24, 0x2B	; 43
    9964:	69 f0       	breq	.+26     	; 0x9980 <vfprintf+0xa6>
    9966:	30 f4       	brcc	.+12     	; 0x9974 <vfprintf+0x9a>
    9968:	80 32       	cpi	r24, 0x20	; 32
    996a:	59 f0       	breq	.+22     	; 0x9982 <vfprintf+0xa8>
    996c:	83 32       	cpi	r24, 0x23	; 35
    996e:	69 f4       	brne	.+26     	; 0x998a <vfprintf+0xb0>
    9970:	20 61       	ori	r18, 0x10	; 16
    9972:	2c c0       	rjmp	.+88     	; 0x99cc <vfprintf+0xf2>
    9974:	8d 32       	cpi	r24, 0x2D	; 45
    9976:	39 f0       	breq	.+14     	; 0x9986 <vfprintf+0xac>
    9978:	80 33       	cpi	r24, 0x30	; 48
    997a:	39 f4       	brne	.+14     	; 0x998a <vfprintf+0xb0>
    997c:	21 60       	ori	r18, 0x01	; 1
    997e:	26 c0       	rjmp	.+76     	; 0x99cc <vfprintf+0xf2>
    9980:	22 60       	ori	r18, 0x02	; 2
    9982:	24 60       	ori	r18, 0x04	; 4
    9984:	23 c0       	rjmp	.+70     	; 0x99cc <vfprintf+0xf2>
    9986:	28 60       	ori	r18, 0x08	; 8
    9988:	21 c0       	rjmp	.+66     	; 0x99cc <vfprintf+0xf2>
    998a:	27 fd       	sbrc	r18, 7
    998c:	27 c0       	rjmp	.+78     	; 0x99dc <vfprintf+0x102>
    998e:	30 ed       	ldi	r19, 0xD0	; 208
    9990:	38 0f       	add	r19, r24
    9992:	3a 30       	cpi	r19, 0x0A	; 10
    9994:	78 f4       	brcc	.+30     	; 0x99b4 <vfprintf+0xda>
    9996:	26 ff       	sbrs	r18, 6
    9998:	06 c0       	rjmp	.+12     	; 0x99a6 <vfprintf+0xcc>
    999a:	fa e0       	ldi	r31, 0x0A	; 10
    999c:	1f 9f       	mul	r17, r31
    999e:	30 0d       	add	r19, r0
    99a0:	11 24       	eor	r1, r1
    99a2:	13 2f       	mov	r17, r19
    99a4:	13 c0       	rjmp	.+38     	; 0x99cc <vfprintf+0xf2>
    99a6:	4a e0       	ldi	r20, 0x0A	; 10
    99a8:	f4 9e       	mul	r15, r20
    99aa:	30 0d       	add	r19, r0
    99ac:	11 24       	eor	r1, r1
    99ae:	f3 2e       	mov	r15, r19
    99b0:	20 62       	ori	r18, 0x20	; 32
    99b2:	0c c0       	rjmp	.+24     	; 0x99cc <vfprintf+0xf2>
    99b4:	8e 32       	cpi	r24, 0x2E	; 46
    99b6:	21 f4       	brne	.+8      	; 0x99c0 <vfprintf+0xe6>
    99b8:	26 fd       	sbrc	r18, 6
    99ba:	ee c2       	rjmp	.+1500   	; 0x9f98 <vfprintf+0x6be>
    99bc:	20 64       	ori	r18, 0x40	; 64
    99be:	06 c0       	rjmp	.+12     	; 0x99cc <vfprintf+0xf2>
    99c0:	8c 36       	cpi	r24, 0x6C	; 108
    99c2:	11 f4       	brne	.+4      	; 0x99c8 <vfprintf+0xee>
    99c4:	20 68       	ori	r18, 0x80	; 128
    99c6:	02 c0       	rjmp	.+4      	; 0x99cc <vfprintf+0xf2>
    99c8:	88 36       	cpi	r24, 0x68	; 104
    99ca:	41 f4       	brne	.+16     	; 0x99dc <vfprintf+0x102>
    99cc:	f4 01       	movw	r30, r8
    99ce:	93 fd       	sbrc	r25, 3
    99d0:	85 91       	lpm	r24, Z+
    99d2:	93 ff       	sbrs	r25, 3
    99d4:	81 91       	ld	r24, Z+
    99d6:	4f 01       	movw	r8, r30
    99d8:	81 11       	cpse	r24, r1
    99da:	c1 cf       	rjmp	.-126    	; 0x995e <vfprintf+0x84>
    99dc:	9b eb       	ldi	r25, 0xBB	; 187
    99de:	98 0f       	add	r25, r24
    99e0:	93 30       	cpi	r25, 0x03	; 3
    99e2:	18 f4       	brcc	.+6      	; 0x99ea <vfprintf+0x110>
    99e4:	20 61       	ori	r18, 0x10	; 16
    99e6:	80 5e       	subi	r24, 0xE0	; 224
    99e8:	06 c0       	rjmp	.+12     	; 0x99f6 <vfprintf+0x11c>
    99ea:	9b e9       	ldi	r25, 0x9B	; 155
    99ec:	98 0f       	add	r25, r24
    99ee:	93 30       	cpi	r25, 0x03	; 3
    99f0:	08 f0       	brcs	.+2      	; 0x99f4 <vfprintf+0x11a>
    99f2:	71 c1       	rjmp	.+738    	; 0x9cd6 <vfprintf+0x3fc>
    99f4:	2f 7e       	andi	r18, 0xEF	; 239
    99f6:	26 ff       	sbrs	r18, 6
    99f8:	16 e0       	ldi	r17, 0x06	; 6
    99fa:	2f 73       	andi	r18, 0x3F	; 63
    99fc:	32 2e       	mov	r3, r18
    99fe:	85 36       	cpi	r24, 0x65	; 101
    9a00:	19 f4       	brne	.+6      	; 0x9a08 <vfprintf+0x12e>
    9a02:	20 64       	ori	r18, 0x40	; 64
    9a04:	32 2e       	mov	r3, r18
    9a06:	08 c0       	rjmp	.+16     	; 0x9a18 <vfprintf+0x13e>
    9a08:	86 36       	cpi	r24, 0x66	; 102
    9a0a:	21 f4       	brne	.+8      	; 0x9a14 <vfprintf+0x13a>
    9a0c:	f2 2f       	mov	r31, r18
    9a0e:	f0 68       	ori	r31, 0x80	; 128
    9a10:	3f 2e       	mov	r3, r31
    9a12:	02 c0       	rjmp	.+4      	; 0x9a18 <vfprintf+0x13e>
    9a14:	11 11       	cpse	r17, r1
    9a16:	11 50       	subi	r17, 0x01	; 1
    9a18:	37 fe       	sbrs	r3, 7
    9a1a:	07 c0       	rjmp	.+14     	; 0x9a2a <vfprintf+0x150>
    9a1c:	1c 33       	cpi	r17, 0x3C	; 60
    9a1e:	50 f4       	brcc	.+20     	; 0x9a34 <vfprintf+0x15a>
    9a20:	ee 24       	eor	r14, r14
    9a22:	e3 94       	inc	r14
    9a24:	e1 0e       	add	r14, r17
    9a26:	27 e0       	ldi	r18, 0x07	; 7
    9a28:	0b c0       	rjmp	.+22     	; 0x9a40 <vfprintf+0x166>
    9a2a:	18 30       	cpi	r17, 0x08	; 8
    9a2c:	38 f0       	brcs	.+14     	; 0x9a3c <vfprintf+0x162>
    9a2e:	27 e0       	ldi	r18, 0x07	; 7
    9a30:	17 e0       	ldi	r17, 0x07	; 7
    9a32:	05 c0       	rjmp	.+10     	; 0x9a3e <vfprintf+0x164>
    9a34:	27 e0       	ldi	r18, 0x07	; 7
    9a36:	4c e3       	ldi	r20, 0x3C	; 60
    9a38:	e4 2e       	mov	r14, r20
    9a3a:	02 c0       	rjmp	.+4      	; 0x9a40 <vfprintf+0x166>
    9a3c:	21 2f       	mov	r18, r17
    9a3e:	e1 2c       	mov	r14, r1
    9a40:	52 01       	movw	r10, r4
    9a42:	44 e0       	ldi	r20, 0x04	; 4
    9a44:	a4 0e       	add	r10, r20
    9a46:	b1 1c       	adc	r11, r1
    9a48:	f2 01       	movw	r30, r4
    9a4a:	60 81       	ld	r22, Z
    9a4c:	71 81       	ldd	r23, Z+1	; 0x01
    9a4e:	82 81       	ldd	r24, Z+2	; 0x02
    9a50:	93 81       	ldd	r25, Z+3	; 0x03
    9a52:	0e 2d       	mov	r16, r14
    9a54:	a3 01       	movw	r20, r6
    9a56:	0e 94 fb 52 	call	0xa5f6	; 0xa5f6 <__ftoa_engine>
    9a5a:	2c 01       	movw	r4, r24
    9a5c:	09 81       	ldd	r16, Y+1	; 0x01
    9a5e:	00 ff       	sbrs	r16, 0
    9a60:	02 c0       	rjmp	.+4      	; 0x9a66 <vfprintf+0x18c>
    9a62:	03 ff       	sbrs	r16, 3
    9a64:	07 c0       	rjmp	.+14     	; 0x9a74 <vfprintf+0x19a>
    9a66:	31 fc       	sbrc	r3, 1
    9a68:	08 c0       	rjmp	.+16     	; 0x9a7a <vfprintf+0x1a0>
    9a6a:	32 fe       	sbrs	r3, 2
    9a6c:	09 c0       	rjmp	.+18     	; 0x9a80 <vfprintf+0x1a6>
    9a6e:	30 e2       	ldi	r19, 0x20	; 32
    9a70:	23 2e       	mov	r2, r19
    9a72:	07 c0       	rjmp	.+14     	; 0x9a82 <vfprintf+0x1a8>
    9a74:	2d e2       	ldi	r18, 0x2D	; 45
    9a76:	22 2e       	mov	r2, r18
    9a78:	04 c0       	rjmp	.+8      	; 0x9a82 <vfprintf+0x1a8>
    9a7a:	9b e2       	ldi	r25, 0x2B	; 43
    9a7c:	29 2e       	mov	r2, r25
    9a7e:	01 c0       	rjmp	.+2      	; 0x9a82 <vfprintf+0x1a8>
    9a80:	21 2c       	mov	r2, r1
    9a82:	80 2f       	mov	r24, r16
    9a84:	8c 70       	andi	r24, 0x0C	; 12
    9a86:	19 f0       	breq	.+6      	; 0x9a8e <vfprintf+0x1b4>
    9a88:	21 10       	cpse	r2, r1
    9a8a:	68 c2       	rjmp	.+1232   	; 0x9f5c <vfprintf+0x682>
    9a8c:	a8 c2       	rjmp	.+1360   	; 0x9fde <vfprintf+0x704>
    9a8e:	37 fe       	sbrs	r3, 7
    9a90:	0f c0       	rjmp	.+30     	; 0x9ab0 <vfprintf+0x1d6>
    9a92:	e4 0c       	add	r14, r4
    9a94:	04 ff       	sbrs	r16, 4
    9a96:	04 c0       	rjmp	.+8      	; 0x9aa0 <vfprintf+0x1c6>
    9a98:	8a 81       	ldd	r24, Y+2	; 0x02
    9a9a:	81 33       	cpi	r24, 0x31	; 49
    9a9c:	09 f4       	brne	.+2      	; 0x9aa0 <vfprintf+0x1c6>
    9a9e:	ea 94       	dec	r14
    9aa0:	1e 14       	cp	r1, r14
    9aa2:	74 f5       	brge	.+92     	; 0x9b00 <vfprintf+0x226>
    9aa4:	f8 e0       	ldi	r31, 0x08	; 8
    9aa6:	fe 15       	cp	r31, r14
    9aa8:	78 f5       	brcc	.+94     	; 0x9b08 <vfprintf+0x22e>
    9aaa:	88 e0       	ldi	r24, 0x08	; 8
    9aac:	e8 2e       	mov	r14, r24
    9aae:	2c c0       	rjmp	.+88     	; 0x9b08 <vfprintf+0x22e>
    9ab0:	36 fc       	sbrc	r3, 6
    9ab2:	2a c0       	rjmp	.+84     	; 0x9b08 <vfprintf+0x22e>
    9ab4:	81 2f       	mov	r24, r17
    9ab6:	90 e0       	ldi	r25, 0x00	; 0
    9ab8:	84 15       	cp	r24, r4
    9aba:	95 05       	cpc	r25, r5
    9abc:	9c f0       	brlt	.+38     	; 0x9ae4 <vfprintf+0x20a>
    9abe:	2c ef       	ldi	r18, 0xFC	; 252
    9ac0:	42 16       	cp	r4, r18
    9ac2:	2f ef       	ldi	r18, 0xFF	; 255
    9ac4:	52 06       	cpc	r5, r18
    9ac6:	74 f0       	brlt	.+28     	; 0x9ae4 <vfprintf+0x20a>
    9ac8:	43 2d       	mov	r20, r3
    9aca:	40 68       	ori	r20, 0x80	; 128
    9acc:	34 2e       	mov	r3, r20
    9ace:	0a c0       	rjmp	.+20     	; 0x9ae4 <vfprintf+0x20a>
    9ad0:	e2 e0       	ldi	r30, 0x02	; 2
    9ad2:	f0 e0       	ldi	r31, 0x00	; 0
    9ad4:	ec 0f       	add	r30, r28
    9ad6:	fd 1f       	adc	r31, r29
    9ad8:	e1 0f       	add	r30, r17
    9ada:	f1 1d       	adc	r31, r1
    9adc:	80 81       	ld	r24, Z
    9ade:	80 33       	cpi	r24, 0x30	; 48
    9ae0:	19 f4       	brne	.+6      	; 0x9ae8 <vfprintf+0x20e>
    9ae2:	11 50       	subi	r17, 0x01	; 1
    9ae4:	11 11       	cpse	r17, r1
    9ae6:	f4 cf       	rjmp	.-24     	; 0x9ad0 <vfprintf+0x1f6>
    9ae8:	37 fe       	sbrs	r3, 7
    9aea:	0e c0       	rjmp	.+28     	; 0x9b08 <vfprintf+0x22e>
    9aec:	ee 24       	eor	r14, r14
    9aee:	e3 94       	inc	r14
    9af0:	e1 0e       	add	r14, r17
    9af2:	81 2f       	mov	r24, r17
    9af4:	90 e0       	ldi	r25, 0x00	; 0
    9af6:	48 16       	cp	r4, r24
    9af8:	59 06       	cpc	r5, r25
    9afa:	2c f4       	brge	.+10     	; 0x9b06 <vfprintf+0x22c>
    9afc:	14 19       	sub	r17, r4
    9afe:	04 c0       	rjmp	.+8      	; 0x9b08 <vfprintf+0x22e>
    9b00:	ee 24       	eor	r14, r14
    9b02:	e3 94       	inc	r14
    9b04:	01 c0       	rjmp	.+2      	; 0x9b08 <vfprintf+0x22e>
    9b06:	10 e0       	ldi	r17, 0x00	; 0
    9b08:	37 fe       	sbrs	r3, 7
    9b0a:	06 c0       	rjmp	.+12     	; 0x9b18 <vfprintf+0x23e>
    9b0c:	14 14       	cp	r1, r4
    9b0e:	15 04       	cpc	r1, r5
    9b10:	34 f4       	brge	.+12     	; 0x9b1e <vfprintf+0x244>
    9b12:	c2 01       	movw	r24, r4
    9b14:	01 96       	adiw	r24, 0x01	; 1
    9b16:	05 c0       	rjmp	.+10     	; 0x9b22 <vfprintf+0x248>
    9b18:	85 e0       	ldi	r24, 0x05	; 5
    9b1a:	90 e0       	ldi	r25, 0x00	; 0
    9b1c:	02 c0       	rjmp	.+4      	; 0x9b22 <vfprintf+0x248>
    9b1e:	81 e0       	ldi	r24, 0x01	; 1
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	21 10       	cpse	r2, r1
    9b24:	01 96       	adiw	r24, 0x01	; 1
    9b26:	11 23       	and	r17, r17
    9b28:	31 f0       	breq	.+12     	; 0x9b36 <vfprintf+0x25c>
    9b2a:	21 2f       	mov	r18, r17
    9b2c:	30 e0       	ldi	r19, 0x00	; 0
    9b2e:	2f 5f       	subi	r18, 0xFF	; 255
    9b30:	3f 4f       	sbci	r19, 0xFF	; 255
    9b32:	82 0f       	add	r24, r18
    9b34:	93 1f       	adc	r25, r19
    9b36:	2f 2d       	mov	r18, r15
    9b38:	30 e0       	ldi	r19, 0x00	; 0
    9b3a:	82 17       	cp	r24, r18
    9b3c:	93 07       	cpc	r25, r19
    9b3e:	14 f4       	brge	.+4      	; 0x9b44 <vfprintf+0x26a>
    9b40:	f8 1a       	sub	r15, r24
    9b42:	01 c0       	rjmp	.+2      	; 0x9b46 <vfprintf+0x26c>
    9b44:	f1 2c       	mov	r15, r1
    9b46:	83 2d       	mov	r24, r3
    9b48:	89 70       	andi	r24, 0x09	; 9
    9b4a:	49 f4       	brne	.+18     	; 0x9b5e <vfprintf+0x284>
    9b4c:	ff 20       	and	r15, r15
    9b4e:	39 f0       	breq	.+14     	; 0x9b5e <vfprintf+0x284>
    9b50:	b6 01       	movw	r22, r12
    9b52:	80 e2       	ldi	r24, 0x20	; 32
    9b54:	90 e0       	ldi	r25, 0x00	; 0
    9b56:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9b5a:	fa 94       	dec	r15
    9b5c:	f7 cf       	rjmp	.-18     	; 0x9b4c <vfprintf+0x272>
    9b5e:	22 20       	and	r2, r2
    9b60:	29 f0       	breq	.+10     	; 0x9b6c <vfprintf+0x292>
    9b62:	b6 01       	movw	r22, r12
    9b64:	82 2d       	mov	r24, r2
    9b66:	90 e0       	ldi	r25, 0x00	; 0
    9b68:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9b6c:	33 fc       	sbrc	r3, 3
    9b6e:	09 c0       	rjmp	.+18     	; 0x9b82 <vfprintf+0x2a8>
    9b70:	ff 20       	and	r15, r15
    9b72:	39 f0       	breq	.+14     	; 0x9b82 <vfprintf+0x2a8>
    9b74:	b6 01       	movw	r22, r12
    9b76:	80 e3       	ldi	r24, 0x30	; 48
    9b78:	90 e0       	ldi	r25, 0x00	; 0
    9b7a:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9b7e:	fa 94       	dec	r15
    9b80:	f7 cf       	rjmp	.-18     	; 0x9b70 <vfprintf+0x296>
    9b82:	37 fe       	sbrs	r3, 7
    9b84:	5a c0       	rjmp	.+180    	; 0x9c3a <vfprintf+0x360>
    9b86:	94 2d       	mov	r25, r4
    9b88:	85 2d       	mov	r24, r5
    9b8a:	57 fe       	sbrs	r5, 7
    9b8c:	02 c0       	rjmp	.+4      	; 0x9b92 <vfprintf+0x2b8>
    9b8e:	90 e0       	ldi	r25, 0x00	; 0
    9b90:	80 e0       	ldi	r24, 0x00	; 0
    9b92:	29 2e       	mov	r2, r25
    9b94:	38 2e       	mov	r3, r24
    9b96:	20 e0       	ldi	r18, 0x00	; 0
    9b98:	30 e0       	ldi	r19, 0x00	; 0
    9b9a:	a2 01       	movw	r20, r4
    9b9c:	4e 19       	sub	r20, r14
    9b9e:	51 09       	sbc	r21, r1
    9ba0:	4c 87       	std	Y+12, r20	; 0x0c
    9ba2:	5d 87       	std	Y+13, r21	; 0x0d
    9ba4:	a2 01       	movw	r20, r4
    9ba6:	42 19       	sub	r20, r2
    9ba8:	53 09       	sbc	r21, r3
    9baa:	4e 87       	std	Y+14, r20	; 0x0e
    9bac:	5f 87       	std	Y+15, r21	; 0x0f
    9bae:	61 2f       	mov	r22, r17
    9bb0:	70 e0       	ldi	r23, 0x00	; 0
    9bb2:	44 27       	eor	r20, r20
    9bb4:	55 27       	eor	r21, r21
    9bb6:	46 1b       	sub	r20, r22
    9bb8:	57 0b       	sbc	r21, r23
    9bba:	48 8b       	std	Y+16, r20	; 0x10
    9bbc:	59 8b       	std	Y+17, r21	; 0x11
    9bbe:	5f ef       	ldi	r21, 0xFF	; 255
    9bc0:	25 16       	cp	r2, r21
    9bc2:	35 06       	cpc	r3, r21
    9bc4:	49 f4       	brne	.+18     	; 0x9bd8 <vfprintf+0x2fe>
    9bc6:	b6 01       	movw	r22, r12
    9bc8:	8e e2       	ldi	r24, 0x2E	; 46
    9bca:	90 e0       	ldi	r25, 0x00	; 0
    9bcc:	2a 8b       	std	Y+18, r18	; 0x12
    9bce:	3b 8b       	std	Y+19, r19	; 0x13
    9bd0:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9bd4:	3b 89       	ldd	r19, Y+19	; 0x13
    9bd6:	2a 89       	ldd	r18, Y+18	; 0x12
    9bd8:	42 14       	cp	r4, r2
    9bda:	53 04       	cpc	r5, r3
    9bdc:	6c f0       	brlt	.+26     	; 0x9bf8 <vfprintf+0x31e>
    9bde:	4c 85       	ldd	r20, Y+12	; 0x0c
    9be0:	5d 85       	ldd	r21, Y+13	; 0x0d
    9be2:	42 15       	cp	r20, r2
    9be4:	53 05       	cpc	r21, r3
    9be6:	44 f4       	brge	.+16     	; 0x9bf8 <vfprintf+0x31e>
    9be8:	ee 85       	ldd	r30, Y+14	; 0x0e
    9bea:	ff 85       	ldd	r31, Y+15	; 0x0f
    9bec:	e2 0f       	add	r30, r18
    9bee:	f3 1f       	adc	r31, r19
    9bf0:	e6 0d       	add	r30, r6
    9bf2:	f7 1d       	adc	r31, r7
    9bf4:	81 81       	ldd	r24, Z+1	; 0x01
    9bf6:	01 c0       	rjmp	.+2      	; 0x9bfa <vfprintf+0x320>
    9bf8:	80 e3       	ldi	r24, 0x30	; 48
    9bfa:	51 e0       	ldi	r21, 0x01	; 1
    9bfc:	25 1a       	sub	r2, r21
    9bfe:	31 08       	sbc	r3, r1
    9c00:	2f 5f       	subi	r18, 0xFF	; 255
    9c02:	3f 4f       	sbci	r19, 0xFF	; 255
    9c04:	48 89       	ldd	r20, Y+16	; 0x10
    9c06:	59 89       	ldd	r21, Y+17	; 0x11
    9c08:	24 16       	cp	r2, r20
    9c0a:	35 06       	cpc	r3, r21
    9c0c:	4c f0       	brlt	.+18     	; 0x9c20 <vfprintf+0x346>
    9c0e:	b6 01       	movw	r22, r12
    9c10:	90 e0       	ldi	r25, 0x00	; 0
    9c12:	2a 8b       	std	Y+18, r18	; 0x12
    9c14:	3b 8b       	std	Y+19, r19	; 0x13
    9c16:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9c1a:	2a 89       	ldd	r18, Y+18	; 0x12
    9c1c:	3b 89       	ldd	r19, Y+19	; 0x13
    9c1e:	cf cf       	rjmp	.-98     	; 0x9bbe <vfprintf+0x2e4>
    9c20:	24 14       	cp	r2, r4
    9c22:	35 04       	cpc	r3, r5
    9c24:	39 f4       	brne	.+14     	; 0x9c34 <vfprintf+0x35a>
    9c26:	9a 81       	ldd	r25, Y+2	; 0x02
    9c28:	96 33       	cpi	r25, 0x36	; 54
    9c2a:	18 f4       	brcc	.+6      	; 0x9c32 <vfprintf+0x358>
    9c2c:	95 33       	cpi	r25, 0x35	; 53
    9c2e:	11 f4       	brne	.+4      	; 0x9c34 <vfprintf+0x35a>
    9c30:	04 ff       	sbrs	r16, 4
    9c32:	81 e3       	ldi	r24, 0x31	; 49
    9c34:	b6 01       	movw	r22, r12
    9c36:	90 e0       	ldi	r25, 0x00	; 0
    9c38:	4b c0       	rjmp	.+150    	; 0x9cd0 <vfprintf+0x3f6>
    9c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    9c3c:	81 33       	cpi	r24, 0x31	; 49
    9c3e:	09 f0       	breq	.+2      	; 0x9c42 <vfprintf+0x368>
    9c40:	0f 7e       	andi	r16, 0xEF	; 239
    9c42:	b6 01       	movw	r22, r12
    9c44:	90 e0       	ldi	r25, 0x00	; 0
    9c46:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9c4a:	11 11       	cpse	r17, r1
    9c4c:	05 c0       	rjmp	.+10     	; 0x9c58 <vfprintf+0x37e>
    9c4e:	34 fc       	sbrc	r3, 4
    9c50:	18 c0       	rjmp	.+48     	; 0x9c82 <vfprintf+0x3a8>
    9c52:	85 e6       	ldi	r24, 0x65	; 101
    9c54:	90 e0       	ldi	r25, 0x00	; 0
    9c56:	17 c0       	rjmp	.+46     	; 0x9c86 <vfprintf+0x3ac>
    9c58:	b6 01       	movw	r22, r12
    9c5a:	8e e2       	ldi	r24, 0x2E	; 46
    9c5c:	90 e0       	ldi	r25, 0x00	; 0
    9c5e:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9c62:	82 e0       	ldi	r24, 0x02	; 2
    9c64:	ee 24       	eor	r14, r14
    9c66:	e3 94       	inc	r14
    9c68:	e8 0e       	add	r14, r24
    9c6a:	f3 01       	movw	r30, r6
    9c6c:	e8 0f       	add	r30, r24
    9c6e:	f1 1d       	adc	r31, r1
    9c70:	80 81       	ld	r24, Z
    9c72:	b6 01       	movw	r22, r12
    9c74:	90 e0       	ldi	r25, 0x00	; 0
    9c76:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9c7a:	11 50       	subi	r17, 0x01	; 1
    9c7c:	8e 2d       	mov	r24, r14
    9c7e:	91 f7       	brne	.-28     	; 0x9c64 <vfprintf+0x38a>
    9c80:	e6 cf       	rjmp	.-52     	; 0x9c4e <vfprintf+0x374>
    9c82:	85 e4       	ldi	r24, 0x45	; 69
    9c84:	90 e0       	ldi	r25, 0x00	; 0
    9c86:	b6 01       	movw	r22, r12
    9c88:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9c8c:	57 fc       	sbrc	r5, 7
    9c8e:	05 c0       	rjmp	.+10     	; 0x9c9a <vfprintf+0x3c0>
    9c90:	41 14       	cp	r4, r1
    9c92:	51 04       	cpc	r5, r1
    9c94:	39 f4       	brne	.+14     	; 0x9ca4 <vfprintf+0x3ca>
    9c96:	04 ff       	sbrs	r16, 4
    9c98:	05 c0       	rjmp	.+10     	; 0x9ca4 <vfprintf+0x3ca>
    9c9a:	51 94       	neg	r5
    9c9c:	41 94       	neg	r4
    9c9e:	51 08       	sbc	r5, r1
    9ca0:	8d e2       	ldi	r24, 0x2D	; 45
    9ca2:	01 c0       	rjmp	.+2      	; 0x9ca6 <vfprintf+0x3cc>
    9ca4:	8b e2       	ldi	r24, 0x2B	; 43
    9ca6:	b6 01       	movw	r22, r12
    9ca8:	90 e0       	ldi	r25, 0x00	; 0
    9caa:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9cae:	80 e3       	ldi	r24, 0x30	; 48
    9cb0:	9a e0       	ldi	r25, 0x0A	; 10
    9cb2:	49 16       	cp	r4, r25
    9cb4:	51 04       	cpc	r5, r1
    9cb6:	2c f0       	brlt	.+10     	; 0x9cc2 <vfprintf+0x3e8>
    9cb8:	8f 5f       	subi	r24, 0xFF	; 255
    9cba:	5a e0       	ldi	r21, 0x0A	; 10
    9cbc:	45 1a       	sub	r4, r21
    9cbe:	51 08       	sbc	r5, r1
    9cc0:	f7 cf       	rjmp	.-18     	; 0x9cb0 <vfprintf+0x3d6>
    9cc2:	b6 01       	movw	r22, r12
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9cca:	b6 01       	movw	r22, r12
    9ccc:	c2 01       	movw	r24, r4
    9cce:	c0 96       	adiw	r24, 0x30	; 48
    9cd0:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9cd4:	57 c1       	rjmp	.+686    	; 0x9f84 <vfprintf+0x6aa>
    9cd6:	83 36       	cpi	r24, 0x63	; 99
    9cd8:	31 f0       	breq	.+12     	; 0x9ce6 <vfprintf+0x40c>
    9cda:	83 37       	cpi	r24, 0x73	; 115
    9cdc:	79 f0       	breq	.+30     	; 0x9cfc <vfprintf+0x422>
    9cde:	83 35       	cpi	r24, 0x53	; 83
    9ce0:	09 f0       	breq	.+2      	; 0x9ce4 <vfprintf+0x40a>
    9ce2:	58 c0       	rjmp	.+176    	; 0x9d94 <vfprintf+0x4ba>
    9ce4:	21 c0       	rjmp	.+66     	; 0x9d28 <vfprintf+0x44e>
    9ce6:	52 01       	movw	r10, r4
    9ce8:	e2 e0       	ldi	r30, 0x02	; 2
    9cea:	ae 0e       	add	r10, r30
    9cec:	b1 1c       	adc	r11, r1
    9cee:	f2 01       	movw	r30, r4
    9cf0:	80 81       	ld	r24, Z
    9cf2:	89 83       	std	Y+1, r24	; 0x01
    9cf4:	01 e0       	ldi	r16, 0x01	; 1
    9cf6:	10 e0       	ldi	r17, 0x00	; 0
    9cf8:	23 01       	movw	r4, r6
    9cfa:	14 c0       	rjmp	.+40     	; 0x9d24 <vfprintf+0x44a>
    9cfc:	52 01       	movw	r10, r4
    9cfe:	f2 e0       	ldi	r31, 0x02	; 2
    9d00:	af 0e       	add	r10, r31
    9d02:	b1 1c       	adc	r11, r1
    9d04:	f2 01       	movw	r30, r4
    9d06:	40 80       	ld	r4, Z
    9d08:	51 80       	ldd	r5, Z+1	; 0x01
    9d0a:	26 ff       	sbrs	r18, 6
    9d0c:	03 c0       	rjmp	.+6      	; 0x9d14 <vfprintf+0x43a>
    9d0e:	61 2f       	mov	r22, r17
    9d10:	70 e0       	ldi	r23, 0x00	; 0
    9d12:	02 c0       	rjmp	.+4      	; 0x9d18 <vfprintf+0x43e>
    9d14:	6f ef       	ldi	r22, 0xFF	; 255
    9d16:	7f ef       	ldi	r23, 0xFF	; 255
    9d18:	c2 01       	movw	r24, r4
    9d1a:	2a 8b       	std	Y+18, r18	; 0x12
    9d1c:	0e 94 2b 54 	call	0xa856	; 0xa856 <strnlen>
    9d20:	8c 01       	movw	r16, r24
    9d22:	2a 89       	ldd	r18, Y+18	; 0x12
    9d24:	2f 77       	andi	r18, 0x7F	; 127
    9d26:	15 c0       	rjmp	.+42     	; 0x9d52 <vfprintf+0x478>
    9d28:	52 01       	movw	r10, r4
    9d2a:	f2 e0       	ldi	r31, 0x02	; 2
    9d2c:	af 0e       	add	r10, r31
    9d2e:	b1 1c       	adc	r11, r1
    9d30:	f2 01       	movw	r30, r4
    9d32:	40 80       	ld	r4, Z
    9d34:	51 80       	ldd	r5, Z+1	; 0x01
    9d36:	26 ff       	sbrs	r18, 6
    9d38:	03 c0       	rjmp	.+6      	; 0x9d40 <vfprintf+0x466>
    9d3a:	61 2f       	mov	r22, r17
    9d3c:	70 e0       	ldi	r23, 0x00	; 0
    9d3e:	02 c0       	rjmp	.+4      	; 0x9d44 <vfprintf+0x46a>
    9d40:	6f ef       	ldi	r22, 0xFF	; 255
    9d42:	7f ef       	ldi	r23, 0xFF	; 255
    9d44:	c2 01       	movw	r24, r4
    9d46:	2a 8b       	std	Y+18, r18	; 0x12
    9d48:	0e 94 e5 53 	call	0xa7ca	; 0xa7ca <strnlen_P>
    9d4c:	8c 01       	movw	r16, r24
    9d4e:	2a 89       	ldd	r18, Y+18	; 0x12
    9d50:	20 68       	ori	r18, 0x80	; 128
    9d52:	32 2e       	mov	r3, r18
    9d54:	23 fd       	sbrc	r18, 3
    9d56:	1a c0       	rjmp	.+52     	; 0x9d8c <vfprintf+0x4b2>
    9d58:	8f 2d       	mov	r24, r15
    9d5a:	90 e0       	ldi	r25, 0x00	; 0
    9d5c:	08 17       	cp	r16, r24
    9d5e:	19 07       	cpc	r17, r25
    9d60:	a8 f4       	brcc	.+42     	; 0x9d8c <vfprintf+0x4b2>
    9d62:	b6 01       	movw	r22, r12
    9d64:	80 e2       	ldi	r24, 0x20	; 32
    9d66:	90 e0       	ldi	r25, 0x00	; 0
    9d68:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9d6c:	fa 94       	dec	r15
    9d6e:	f4 cf       	rjmp	.-24     	; 0x9d58 <vfprintf+0x47e>
    9d70:	f2 01       	movw	r30, r4
    9d72:	37 fc       	sbrc	r3, 7
    9d74:	85 91       	lpm	r24, Z+
    9d76:	37 fe       	sbrs	r3, 7
    9d78:	81 91       	ld	r24, Z+
    9d7a:	2f 01       	movw	r4, r30
    9d7c:	b6 01       	movw	r22, r12
    9d7e:	90 e0       	ldi	r25, 0x00	; 0
    9d80:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9d84:	f1 10       	cpse	r15, r1
    9d86:	fa 94       	dec	r15
    9d88:	01 50       	subi	r16, 0x01	; 1
    9d8a:	11 09       	sbc	r17, r1
    9d8c:	01 15       	cp	r16, r1
    9d8e:	11 05       	cpc	r17, r1
    9d90:	79 f7       	brne	.-34     	; 0x9d70 <vfprintf+0x496>
    9d92:	f8 c0       	rjmp	.+496    	; 0x9f84 <vfprintf+0x6aa>
    9d94:	84 36       	cpi	r24, 0x64	; 100
    9d96:	11 f0       	breq	.+4      	; 0x9d9c <vfprintf+0x4c2>
    9d98:	89 36       	cpi	r24, 0x69	; 105
    9d9a:	59 f5       	brne	.+86     	; 0x9df2 <vfprintf+0x518>
    9d9c:	52 01       	movw	r10, r4
    9d9e:	27 ff       	sbrs	r18, 7
    9da0:	09 c0       	rjmp	.+18     	; 0x9db4 <vfprintf+0x4da>
    9da2:	f4 e0       	ldi	r31, 0x04	; 4
    9da4:	af 0e       	add	r10, r31
    9da6:	b1 1c       	adc	r11, r1
    9da8:	f2 01       	movw	r30, r4
    9daa:	60 81       	ld	r22, Z
    9dac:	71 81       	ldd	r23, Z+1	; 0x01
    9dae:	82 81       	ldd	r24, Z+2	; 0x02
    9db0:	93 81       	ldd	r25, Z+3	; 0x03
    9db2:	0a c0       	rjmp	.+20     	; 0x9dc8 <vfprintf+0x4ee>
    9db4:	f2 e0       	ldi	r31, 0x02	; 2
    9db6:	af 0e       	add	r10, r31
    9db8:	b1 1c       	adc	r11, r1
    9dba:	f2 01       	movw	r30, r4
    9dbc:	60 81       	ld	r22, Z
    9dbe:	71 81       	ldd	r23, Z+1	; 0x01
    9dc0:	07 2e       	mov	r0, r23
    9dc2:	00 0c       	add	r0, r0
    9dc4:	88 0b       	sbc	r24, r24
    9dc6:	99 0b       	sbc	r25, r25
    9dc8:	2f 76       	andi	r18, 0x6F	; 111
    9dca:	32 2e       	mov	r3, r18
    9dcc:	97 ff       	sbrs	r25, 7
    9dce:	09 c0       	rjmp	.+18     	; 0x9de2 <vfprintf+0x508>
    9dd0:	90 95       	com	r25
    9dd2:	80 95       	com	r24
    9dd4:	70 95       	com	r23
    9dd6:	61 95       	neg	r22
    9dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    9dda:	8f 4f       	sbci	r24, 0xFF	; 255
    9ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    9dde:	20 68       	ori	r18, 0x80	; 128
    9de0:	32 2e       	mov	r3, r18
    9de2:	2a e0       	ldi	r18, 0x0A	; 10
    9de4:	30 e0       	ldi	r19, 0x00	; 0
    9de6:	a3 01       	movw	r20, r6
    9de8:	0e 94 39 55 	call	0xaa72	; 0xaa72 <__ultoa_invert>
    9dec:	e8 2e       	mov	r14, r24
    9dee:	e6 18       	sub	r14, r6
    9df0:	3f c0       	rjmp	.+126    	; 0x9e70 <vfprintf+0x596>
    9df2:	02 2f       	mov	r16, r18
    9df4:	85 37       	cpi	r24, 0x75	; 117
    9df6:	21 f4       	brne	.+8      	; 0x9e00 <vfprintf+0x526>
    9df8:	0f 7e       	andi	r16, 0xEF	; 239
    9dfa:	2a e0       	ldi	r18, 0x0A	; 10
    9dfc:	30 e0       	ldi	r19, 0x00	; 0
    9dfe:	1d c0       	rjmp	.+58     	; 0x9e3a <vfprintf+0x560>
    9e00:	09 7f       	andi	r16, 0xF9	; 249
    9e02:	8f 36       	cpi	r24, 0x6F	; 111
    9e04:	91 f0       	breq	.+36     	; 0x9e2a <vfprintf+0x550>
    9e06:	18 f4       	brcc	.+6      	; 0x9e0e <vfprintf+0x534>
    9e08:	88 35       	cpi	r24, 0x58	; 88
    9e0a:	59 f0       	breq	.+22     	; 0x9e22 <vfprintf+0x548>
    9e0c:	c5 c0       	rjmp	.+394    	; 0x9f98 <vfprintf+0x6be>
    9e0e:	80 37       	cpi	r24, 0x70	; 112
    9e10:	19 f0       	breq	.+6      	; 0x9e18 <vfprintf+0x53e>
    9e12:	88 37       	cpi	r24, 0x78	; 120
    9e14:	11 f0       	breq	.+4      	; 0x9e1a <vfprintf+0x540>
    9e16:	c0 c0       	rjmp	.+384    	; 0x9f98 <vfprintf+0x6be>
    9e18:	00 61       	ori	r16, 0x10	; 16
    9e1a:	04 ff       	sbrs	r16, 4
    9e1c:	09 c0       	rjmp	.+18     	; 0x9e30 <vfprintf+0x556>
    9e1e:	04 60       	ori	r16, 0x04	; 4
    9e20:	07 c0       	rjmp	.+14     	; 0x9e30 <vfprintf+0x556>
    9e22:	24 ff       	sbrs	r18, 4
    9e24:	08 c0       	rjmp	.+16     	; 0x9e36 <vfprintf+0x55c>
    9e26:	06 60       	ori	r16, 0x06	; 6
    9e28:	06 c0       	rjmp	.+12     	; 0x9e36 <vfprintf+0x55c>
    9e2a:	28 e0       	ldi	r18, 0x08	; 8
    9e2c:	30 e0       	ldi	r19, 0x00	; 0
    9e2e:	05 c0       	rjmp	.+10     	; 0x9e3a <vfprintf+0x560>
    9e30:	20 e1       	ldi	r18, 0x10	; 16
    9e32:	30 e0       	ldi	r19, 0x00	; 0
    9e34:	02 c0       	rjmp	.+4      	; 0x9e3a <vfprintf+0x560>
    9e36:	20 e1       	ldi	r18, 0x10	; 16
    9e38:	32 e0       	ldi	r19, 0x02	; 2
    9e3a:	52 01       	movw	r10, r4
    9e3c:	07 ff       	sbrs	r16, 7
    9e3e:	09 c0       	rjmp	.+18     	; 0x9e52 <vfprintf+0x578>
    9e40:	f4 e0       	ldi	r31, 0x04	; 4
    9e42:	af 0e       	add	r10, r31
    9e44:	b1 1c       	adc	r11, r1
    9e46:	f2 01       	movw	r30, r4
    9e48:	60 81       	ld	r22, Z
    9e4a:	71 81       	ldd	r23, Z+1	; 0x01
    9e4c:	82 81       	ldd	r24, Z+2	; 0x02
    9e4e:	93 81       	ldd	r25, Z+3	; 0x03
    9e50:	08 c0       	rjmp	.+16     	; 0x9e62 <vfprintf+0x588>
    9e52:	f2 e0       	ldi	r31, 0x02	; 2
    9e54:	af 0e       	add	r10, r31
    9e56:	b1 1c       	adc	r11, r1
    9e58:	f2 01       	movw	r30, r4
    9e5a:	60 81       	ld	r22, Z
    9e5c:	71 81       	ldd	r23, Z+1	; 0x01
    9e5e:	80 e0       	ldi	r24, 0x00	; 0
    9e60:	90 e0       	ldi	r25, 0x00	; 0
    9e62:	a3 01       	movw	r20, r6
    9e64:	0e 94 39 55 	call	0xaa72	; 0xaa72 <__ultoa_invert>
    9e68:	e8 2e       	mov	r14, r24
    9e6a:	e6 18       	sub	r14, r6
    9e6c:	0f 77       	andi	r16, 0x7F	; 127
    9e6e:	30 2e       	mov	r3, r16
    9e70:	36 fe       	sbrs	r3, 6
    9e72:	0b c0       	rjmp	.+22     	; 0x9e8a <vfprintf+0x5b0>
    9e74:	33 2d       	mov	r19, r3
    9e76:	3e 7f       	andi	r19, 0xFE	; 254
    9e78:	e1 16       	cp	r14, r17
    9e7a:	50 f4       	brcc	.+20     	; 0x9e90 <vfprintf+0x5b6>
    9e7c:	34 fe       	sbrs	r3, 4
    9e7e:	0a c0       	rjmp	.+20     	; 0x9e94 <vfprintf+0x5ba>
    9e80:	32 fc       	sbrc	r3, 2
    9e82:	08 c0       	rjmp	.+16     	; 0x9e94 <vfprintf+0x5ba>
    9e84:	33 2d       	mov	r19, r3
    9e86:	3e 7e       	andi	r19, 0xEE	; 238
    9e88:	05 c0       	rjmp	.+10     	; 0x9e94 <vfprintf+0x5ba>
    9e8a:	0e 2d       	mov	r16, r14
    9e8c:	33 2d       	mov	r19, r3
    9e8e:	03 c0       	rjmp	.+6      	; 0x9e96 <vfprintf+0x5bc>
    9e90:	0e 2d       	mov	r16, r14
    9e92:	01 c0       	rjmp	.+2      	; 0x9e96 <vfprintf+0x5bc>
    9e94:	01 2f       	mov	r16, r17
    9e96:	34 ff       	sbrs	r19, 4
    9e98:	0c c0       	rjmp	.+24     	; 0x9eb2 <vfprintf+0x5d8>
    9e9a:	fe 01       	movw	r30, r28
    9e9c:	ee 0d       	add	r30, r14
    9e9e:	f1 1d       	adc	r31, r1
    9ea0:	80 81       	ld	r24, Z
    9ea2:	80 33       	cpi	r24, 0x30	; 48
    9ea4:	11 f4       	brne	.+4      	; 0x9eaa <vfprintf+0x5d0>
    9ea6:	39 7e       	andi	r19, 0xE9	; 233
    9ea8:	08 c0       	rjmp	.+16     	; 0x9eba <vfprintf+0x5e0>
    9eaa:	32 ff       	sbrs	r19, 2
    9eac:	05 c0       	rjmp	.+10     	; 0x9eb8 <vfprintf+0x5de>
    9eae:	0e 5f       	subi	r16, 0xFE	; 254
    9eb0:	04 c0       	rjmp	.+8      	; 0x9eba <vfprintf+0x5e0>
    9eb2:	83 2f       	mov	r24, r19
    9eb4:	86 78       	andi	r24, 0x86	; 134
    9eb6:	09 f0       	breq	.+2      	; 0x9eba <vfprintf+0x5e0>
    9eb8:	0f 5f       	subi	r16, 0xFF	; 255
    9eba:	33 fd       	sbrc	r19, 3
    9ebc:	13 c0       	rjmp	.+38     	; 0x9ee4 <vfprintf+0x60a>
    9ebe:	30 ff       	sbrs	r19, 0
    9ec0:	06 c0       	rjmp	.+12     	; 0x9ece <vfprintf+0x5f4>
    9ec2:	1e 2d       	mov	r17, r14
    9ec4:	0f 15       	cp	r16, r15
    9ec6:	18 f4       	brcc	.+6      	; 0x9ece <vfprintf+0x5f4>
    9ec8:	1f 0d       	add	r17, r15
    9eca:	10 1b       	sub	r17, r16
    9ecc:	0f 2d       	mov	r16, r15
    9ece:	0f 15       	cp	r16, r15
    9ed0:	68 f4       	brcc	.+26     	; 0x9eec <vfprintf+0x612>
    9ed2:	b6 01       	movw	r22, r12
    9ed4:	80 e2       	ldi	r24, 0x20	; 32
    9ed6:	90 e0       	ldi	r25, 0x00	; 0
    9ed8:	3b 8b       	std	Y+19, r19	; 0x13
    9eda:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9ede:	0f 5f       	subi	r16, 0xFF	; 255
    9ee0:	3b 89       	ldd	r19, Y+19	; 0x13
    9ee2:	f5 cf       	rjmp	.-22     	; 0x9ece <vfprintf+0x5f4>
    9ee4:	0f 15       	cp	r16, r15
    9ee6:	10 f4       	brcc	.+4      	; 0x9eec <vfprintf+0x612>
    9ee8:	f0 1a       	sub	r15, r16
    9eea:	01 c0       	rjmp	.+2      	; 0x9eee <vfprintf+0x614>
    9eec:	f1 2c       	mov	r15, r1
    9eee:	34 ff       	sbrs	r19, 4
    9ef0:	12 c0       	rjmp	.+36     	; 0x9f16 <vfprintf+0x63c>
    9ef2:	b6 01       	movw	r22, r12
    9ef4:	80 e3       	ldi	r24, 0x30	; 48
    9ef6:	90 e0       	ldi	r25, 0x00	; 0
    9ef8:	3b 8b       	std	Y+19, r19	; 0x13
    9efa:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9efe:	3b 89       	ldd	r19, Y+19	; 0x13
    9f00:	32 ff       	sbrs	r19, 2
    9f02:	17 c0       	rjmp	.+46     	; 0x9f32 <vfprintf+0x658>
    9f04:	31 fd       	sbrc	r19, 1
    9f06:	03 c0       	rjmp	.+6      	; 0x9f0e <vfprintf+0x634>
    9f08:	88 e7       	ldi	r24, 0x78	; 120
    9f0a:	90 e0       	ldi	r25, 0x00	; 0
    9f0c:	02 c0       	rjmp	.+4      	; 0x9f12 <vfprintf+0x638>
    9f0e:	88 e5       	ldi	r24, 0x58	; 88
    9f10:	90 e0       	ldi	r25, 0x00	; 0
    9f12:	b6 01       	movw	r22, r12
    9f14:	0c c0       	rjmp	.+24     	; 0x9f2e <vfprintf+0x654>
    9f16:	83 2f       	mov	r24, r19
    9f18:	86 78       	andi	r24, 0x86	; 134
    9f1a:	59 f0       	breq	.+22     	; 0x9f32 <vfprintf+0x658>
    9f1c:	31 ff       	sbrs	r19, 1
    9f1e:	02 c0       	rjmp	.+4      	; 0x9f24 <vfprintf+0x64a>
    9f20:	8b e2       	ldi	r24, 0x2B	; 43
    9f22:	01 c0       	rjmp	.+2      	; 0x9f26 <vfprintf+0x64c>
    9f24:	80 e2       	ldi	r24, 0x20	; 32
    9f26:	37 fd       	sbrc	r19, 7
    9f28:	8d e2       	ldi	r24, 0x2D	; 45
    9f2a:	b6 01       	movw	r22, r12
    9f2c:	90 e0       	ldi	r25, 0x00	; 0
    9f2e:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9f32:	e1 16       	cp	r14, r17
    9f34:	38 f4       	brcc	.+14     	; 0x9f44 <vfprintf+0x66a>
    9f36:	b6 01       	movw	r22, r12
    9f38:	80 e3       	ldi	r24, 0x30	; 48
    9f3a:	90 e0       	ldi	r25, 0x00	; 0
    9f3c:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9f40:	11 50       	subi	r17, 0x01	; 1
    9f42:	f7 cf       	rjmp	.-18     	; 0x9f32 <vfprintf+0x658>
    9f44:	ea 94       	dec	r14
    9f46:	f3 01       	movw	r30, r6
    9f48:	ee 0d       	add	r30, r14
    9f4a:	f1 1d       	adc	r31, r1
    9f4c:	80 81       	ld	r24, Z
    9f4e:	b6 01       	movw	r22, r12
    9f50:	90 e0       	ldi	r25, 0x00	; 0
    9f52:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9f56:	e1 10       	cpse	r14, r1
    9f58:	f5 cf       	rjmp	.-22     	; 0x9f44 <vfprintf+0x66a>
    9f5a:	14 c0       	rjmp	.+40     	; 0x9f84 <vfprintf+0x6aa>
    9f5c:	f4 e0       	ldi	r31, 0x04	; 4
    9f5e:	ff 15       	cp	r31, r15
    9f60:	58 f5       	brcc	.+86     	; 0x9fb8 <vfprintf+0x6de>
    9f62:	84 e0       	ldi	r24, 0x04	; 4
    9f64:	f8 1a       	sub	r15, r24
    9f66:	33 fe       	sbrs	r3, 3
    9f68:	1e c0       	rjmp	.+60     	; 0x9fa6 <vfprintf+0x6cc>
    9f6a:	21 10       	cpse	r2, r1
    9f6c:	26 c0       	rjmp	.+76     	; 0x9fba <vfprintf+0x6e0>
    9f6e:	03 ff       	sbrs	r16, 3
    9f70:	2a c0       	rjmp	.+84     	; 0x9fc6 <vfprintf+0x6ec>
    9f72:	0a eb       	ldi	r16, 0xBA	; 186
    9f74:	1e e0       	ldi	r17, 0x0E	; 14
    9f76:	f3 2d       	mov	r31, r3
    9f78:	f0 71       	andi	r31, 0x10	; 16
    9f7a:	3f 2e       	mov	r3, r31
    9f7c:	f8 01       	movw	r30, r16
    9f7e:	84 91       	lpm	r24, Z
    9f80:	81 11       	cpse	r24, r1
    9f82:	24 c0       	rjmp	.+72     	; 0x9fcc <vfprintf+0x6f2>
    9f84:	ff 20       	and	r15, r15
    9f86:	09 f4       	brne	.+2      	; 0x9f8a <vfprintf+0x6b0>
    9f88:	e5 cc       	rjmp	.-1590   	; 0x9954 <vfprintf+0x7a>
    9f8a:	b6 01       	movw	r22, r12
    9f8c:	80 e2       	ldi	r24, 0x20	; 32
    9f8e:	90 e0       	ldi	r25, 0x00	; 0
    9f90:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9f94:	fa 94       	dec	r15
    9f96:	f6 cf       	rjmp	.-20     	; 0x9f84 <vfprintf+0x6aa>
    9f98:	f6 01       	movw	r30, r12
    9f9a:	86 81       	ldd	r24, Z+6	; 0x06
    9f9c:	97 81       	ldd	r25, Z+7	; 0x07
    9f9e:	26 c0       	rjmp	.+76     	; 0x9fec <vfprintf+0x712>
    9fa0:	8f ef       	ldi	r24, 0xFF	; 255
    9fa2:	9f ef       	ldi	r25, 0xFF	; 255
    9fa4:	23 c0       	rjmp	.+70     	; 0x9fec <vfprintf+0x712>
    9fa6:	b6 01       	movw	r22, r12
    9fa8:	80 e2       	ldi	r24, 0x20	; 32
    9faa:	90 e0       	ldi	r25, 0x00	; 0
    9fac:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9fb0:	fa 94       	dec	r15
    9fb2:	f1 10       	cpse	r15, r1
    9fb4:	f8 cf       	rjmp	.-16     	; 0x9fa6 <vfprintf+0x6cc>
    9fb6:	d9 cf       	rjmp	.-78     	; 0x9f6a <vfprintf+0x690>
    9fb8:	f1 2c       	mov	r15, r1
    9fba:	b6 01       	movw	r22, r12
    9fbc:	82 2d       	mov	r24, r2
    9fbe:	90 e0       	ldi	r25, 0x00	; 0
    9fc0:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9fc4:	d4 cf       	rjmp	.-88     	; 0x9f6e <vfprintf+0x694>
    9fc6:	0e eb       	ldi	r16, 0xBE	; 190
    9fc8:	1e e0       	ldi	r17, 0x0E	; 14
    9fca:	d5 cf       	rjmp	.-86     	; 0x9f76 <vfprintf+0x69c>
    9fcc:	31 10       	cpse	r3, r1
    9fce:	80 52       	subi	r24, 0x20	; 32
    9fd0:	b6 01       	movw	r22, r12
    9fd2:	90 e0       	ldi	r25, 0x00	; 0
    9fd4:	0e 94 65 54 	call	0xa8ca	; 0xa8ca <fputc>
    9fd8:	0f 5f       	subi	r16, 0xFF	; 255
    9fda:	1f 4f       	sbci	r17, 0xFF	; 255
    9fdc:	cf cf       	rjmp	.-98     	; 0x9f7c <vfprintf+0x6a2>
    9fde:	23 e0       	ldi	r18, 0x03	; 3
    9fe0:	2f 15       	cp	r18, r15
    9fe2:	10 f4       	brcc	.+4      	; 0x9fe8 <vfprintf+0x70e>
    9fe4:	83 e0       	ldi	r24, 0x03	; 3
    9fe6:	be cf       	rjmp	.-132    	; 0x9f64 <vfprintf+0x68a>
    9fe8:	f1 2c       	mov	r15, r1
    9fea:	c1 cf       	rjmp	.-126    	; 0x9f6e <vfprintf+0x694>
    9fec:	63 96       	adiw	r28, 0x13	; 19
    9fee:	cd bf       	out	0x3d, r28	; 61
    9ff0:	de bf       	out	0x3e, r29	; 62
    9ff2:	df 91       	pop	r29
    9ff4:	cf 91       	pop	r28
    9ff6:	1f 91       	pop	r17
    9ff8:	0f 91       	pop	r16
    9ffa:	ff 90       	pop	r15
    9ffc:	ef 90       	pop	r14
    9ffe:	df 90       	pop	r13
    a000:	cf 90       	pop	r12
    a002:	bf 90       	pop	r11
    a004:	af 90       	pop	r10
    a006:	9f 90       	pop	r9
    a008:	8f 90       	pop	r8
    a00a:	7f 90       	pop	r7
    a00c:	6f 90       	pop	r6
    a00e:	5f 90       	pop	r5
    a010:	4f 90       	pop	r4
    a012:	3f 90       	pop	r3
    a014:	2f 90       	pop	r2
    a016:	08 95       	ret

0000a018 <__udivmodhi4>:
    a018:	aa 1b       	sub	r26, r26
    a01a:	bb 1b       	sub	r27, r27
    a01c:	51 e1       	ldi	r21, 0x11	; 17
    a01e:	07 c0       	rjmp	.+14     	; 0xa02e <__udivmodhi4_ep>

0000a020 <__udivmodhi4_loop>:
    a020:	aa 1f       	adc	r26, r26
    a022:	bb 1f       	adc	r27, r27
    a024:	a6 17       	cp	r26, r22
    a026:	b7 07       	cpc	r27, r23
    a028:	10 f0       	brcs	.+4      	; 0xa02e <__udivmodhi4_ep>
    a02a:	a6 1b       	sub	r26, r22
    a02c:	b7 0b       	sbc	r27, r23

0000a02e <__udivmodhi4_ep>:
    a02e:	88 1f       	adc	r24, r24
    a030:	99 1f       	adc	r25, r25
    a032:	5a 95       	dec	r21
    a034:	a9 f7       	brne	.-22     	; 0xa020 <__udivmodhi4_loop>
    a036:	80 95       	com	r24
    a038:	90 95       	com	r25
    a03a:	bc 01       	movw	r22, r24
    a03c:	cd 01       	movw	r24, r26
    a03e:	08 95       	ret

0000a040 <__divmodhi4>:
    a040:	97 fb       	bst	r25, 7
    a042:	07 2e       	mov	r0, r23
    a044:	16 f4       	brtc	.+4      	; 0xa04a <__divmodhi4+0xa>
    a046:	00 94       	com	r0
    a048:	07 d0       	rcall	.+14     	; 0xa058 <__divmodhi4_neg1>
    a04a:	77 fd       	sbrc	r23, 7
    a04c:	09 d0       	rcall	.+18     	; 0xa060 <__divmodhi4_neg2>
    a04e:	0e 94 0c 50 	call	0xa018	; 0xa018 <__udivmodhi4>
    a052:	07 fc       	sbrc	r0, 7
    a054:	05 d0       	rcall	.+10     	; 0xa060 <__divmodhi4_neg2>
    a056:	3e f4       	brtc	.+14     	; 0xa066 <__divmodhi4_exit>

0000a058 <__divmodhi4_neg1>:
    a058:	90 95       	com	r25
    a05a:	81 95       	neg	r24
    a05c:	9f 4f       	sbci	r25, 0xFF	; 255
    a05e:	08 95       	ret

0000a060 <__divmodhi4_neg2>:
    a060:	70 95       	com	r23
    a062:	61 95       	neg	r22
    a064:	7f 4f       	sbci	r23, 0xFF	; 255

0000a066 <__divmodhi4_exit>:
    a066:	08 95       	ret

0000a068 <__udivmodsi4>:
    a068:	a1 e2       	ldi	r26, 0x21	; 33
    a06a:	1a 2e       	mov	r1, r26
    a06c:	aa 1b       	sub	r26, r26
    a06e:	bb 1b       	sub	r27, r27
    a070:	fd 01       	movw	r30, r26
    a072:	0d c0       	rjmp	.+26     	; 0xa08e <__udivmodsi4_ep>

0000a074 <__udivmodsi4_loop>:
    a074:	aa 1f       	adc	r26, r26
    a076:	bb 1f       	adc	r27, r27
    a078:	ee 1f       	adc	r30, r30
    a07a:	ff 1f       	adc	r31, r31
    a07c:	a2 17       	cp	r26, r18
    a07e:	b3 07       	cpc	r27, r19
    a080:	e4 07       	cpc	r30, r20
    a082:	f5 07       	cpc	r31, r21
    a084:	20 f0       	brcs	.+8      	; 0xa08e <__udivmodsi4_ep>
    a086:	a2 1b       	sub	r26, r18
    a088:	b3 0b       	sbc	r27, r19
    a08a:	e4 0b       	sbc	r30, r20
    a08c:	f5 0b       	sbc	r31, r21

0000a08e <__udivmodsi4_ep>:
    a08e:	66 1f       	adc	r22, r22
    a090:	77 1f       	adc	r23, r23
    a092:	88 1f       	adc	r24, r24
    a094:	99 1f       	adc	r25, r25
    a096:	1a 94       	dec	r1
    a098:	69 f7       	brne	.-38     	; 0xa074 <__udivmodsi4_loop>
    a09a:	60 95       	com	r22
    a09c:	70 95       	com	r23
    a09e:	80 95       	com	r24
    a0a0:	90 95       	com	r25
    a0a2:	9b 01       	movw	r18, r22
    a0a4:	ac 01       	movw	r20, r24
    a0a6:	bd 01       	movw	r22, r26
    a0a8:	cf 01       	movw	r24, r30
    a0aa:	08 95       	ret

0000a0ac <__tablejump2__>:
    a0ac:	ee 0f       	add	r30, r30
    a0ae:	ff 1f       	adc	r31, r31
    a0b0:	88 1f       	adc	r24, r24
    a0b2:	8b bf       	out	0x3b, r24	; 59
    a0b4:	07 90       	elpm	r0, Z+
    a0b6:	f6 91       	elpm	r31, Z
    a0b8:	e0 2d       	mov	r30, r0
    a0ba:	19 94       	eijmp

0000a0bc <__mulhisi3>:
    a0bc:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <__umulhisi3>
    a0c0:	33 23       	and	r19, r19
    a0c2:	12 f4       	brpl	.+4      	; 0xa0c8 <__mulhisi3+0xc>
    a0c4:	8a 1b       	sub	r24, r26
    a0c6:	9b 0b       	sbc	r25, r27
    a0c8:	0c 94 77 50 	jmp	0xa0ee	; 0xa0ee <__usmulhisi3_tail>

0000a0cc <__umulhisi3>:
    a0cc:	a2 9f       	mul	r26, r18
    a0ce:	b0 01       	movw	r22, r0
    a0d0:	b3 9f       	mul	r27, r19
    a0d2:	c0 01       	movw	r24, r0
    a0d4:	a3 9f       	mul	r26, r19
    a0d6:	70 0d       	add	r23, r0
    a0d8:	81 1d       	adc	r24, r1
    a0da:	11 24       	eor	r1, r1
    a0dc:	91 1d       	adc	r25, r1
    a0de:	b2 9f       	mul	r27, r18
    a0e0:	70 0d       	add	r23, r0
    a0e2:	81 1d       	adc	r24, r1
    a0e4:	11 24       	eor	r1, r1
    a0e6:	91 1d       	adc	r25, r1
    a0e8:	08 95       	ret

0000a0ea <__usmulhisi3>:
    a0ea:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <__umulhisi3>

0000a0ee <__usmulhisi3_tail>:
    a0ee:	b7 ff       	sbrs	r27, 7
    a0f0:	08 95       	ret
    a0f2:	82 1b       	sub	r24, r18
    a0f4:	93 0b       	sbc	r25, r19
    a0f6:	08 95       	ret

0000a0f8 <malloc>:
    a0f8:	cf 93       	push	r28
    a0fa:	df 93       	push	r29
    a0fc:	82 30       	cpi	r24, 0x02	; 2
    a0fe:	91 05       	cpc	r25, r1
    a100:	10 f4       	brcc	.+4      	; 0xa106 <malloc+0xe>
    a102:	82 e0       	ldi	r24, 0x02	; 2
    a104:	90 e0       	ldi	r25, 0x00	; 0
    a106:	e0 91 22 2d 	lds	r30, 0x2D22
    a10a:	f0 91 23 2d 	lds	r31, 0x2D23
    a10e:	20 e0       	ldi	r18, 0x00	; 0
    a110:	30 e0       	ldi	r19, 0x00	; 0
    a112:	c0 e0       	ldi	r28, 0x00	; 0
    a114:	d0 e0       	ldi	r29, 0x00	; 0
    a116:	30 97       	sbiw	r30, 0x00	; 0
    a118:	11 f1       	breq	.+68     	; 0xa15e <malloc+0x66>
    a11a:	40 81       	ld	r20, Z
    a11c:	51 81       	ldd	r21, Z+1	; 0x01
    a11e:	48 17       	cp	r20, r24
    a120:	59 07       	cpc	r21, r25
    a122:	c0 f0       	brcs	.+48     	; 0xa154 <malloc+0x5c>
    a124:	48 17       	cp	r20, r24
    a126:	59 07       	cpc	r21, r25
    a128:	61 f4       	brne	.+24     	; 0xa142 <malloc+0x4a>
    a12a:	82 81       	ldd	r24, Z+2	; 0x02
    a12c:	93 81       	ldd	r25, Z+3	; 0x03
    a12e:	20 97       	sbiw	r28, 0x00	; 0
    a130:	19 f0       	breq	.+6      	; 0xa138 <malloc+0x40>
    a132:	8a 83       	std	Y+2, r24	; 0x02
    a134:	9b 83       	std	Y+3, r25	; 0x03
    a136:	2b c0       	rjmp	.+86     	; 0xa18e <malloc+0x96>
    a138:	80 93 22 2d 	sts	0x2D22, r24
    a13c:	90 93 23 2d 	sts	0x2D23, r25
    a140:	26 c0       	rjmp	.+76     	; 0xa18e <malloc+0x96>
    a142:	21 15       	cp	r18, r1
    a144:	31 05       	cpc	r19, r1
    a146:	19 f0       	breq	.+6      	; 0xa14e <malloc+0x56>
    a148:	42 17       	cp	r20, r18
    a14a:	53 07       	cpc	r21, r19
    a14c:	18 f4       	brcc	.+6      	; 0xa154 <malloc+0x5c>
    a14e:	9a 01       	movw	r18, r20
    a150:	be 01       	movw	r22, r28
    a152:	df 01       	movw	r26, r30
    a154:	ef 01       	movw	r28, r30
    a156:	02 80       	ldd	r0, Z+2	; 0x02
    a158:	f3 81       	ldd	r31, Z+3	; 0x03
    a15a:	e0 2d       	mov	r30, r0
    a15c:	dc cf       	rjmp	.-72     	; 0xa116 <malloc+0x1e>
    a15e:	21 15       	cp	r18, r1
    a160:	31 05       	cpc	r19, r1
    a162:	09 f1       	breq	.+66     	; 0xa1a6 <malloc+0xae>
    a164:	28 1b       	sub	r18, r24
    a166:	39 0b       	sbc	r19, r25
    a168:	24 30       	cpi	r18, 0x04	; 4
    a16a:	31 05       	cpc	r19, r1
    a16c:	90 f4       	brcc	.+36     	; 0xa192 <malloc+0x9a>
    a16e:	12 96       	adiw	r26, 0x02	; 2
    a170:	8d 91       	ld	r24, X+
    a172:	9c 91       	ld	r25, X
    a174:	13 97       	sbiw	r26, 0x03	; 3
    a176:	61 15       	cp	r22, r1
    a178:	71 05       	cpc	r23, r1
    a17a:	21 f0       	breq	.+8      	; 0xa184 <malloc+0x8c>
    a17c:	fb 01       	movw	r30, r22
    a17e:	82 83       	std	Z+2, r24	; 0x02
    a180:	93 83       	std	Z+3, r25	; 0x03
    a182:	04 c0       	rjmp	.+8      	; 0xa18c <malloc+0x94>
    a184:	80 93 22 2d 	sts	0x2D22, r24
    a188:	90 93 23 2d 	sts	0x2D23, r25
    a18c:	fd 01       	movw	r30, r26
    a18e:	32 96       	adiw	r30, 0x02	; 2
    a190:	44 c0       	rjmp	.+136    	; 0xa21a <malloc+0x122>
    a192:	fd 01       	movw	r30, r26
    a194:	e2 0f       	add	r30, r18
    a196:	f3 1f       	adc	r31, r19
    a198:	81 93       	st	Z+, r24
    a19a:	91 93       	st	Z+, r25
    a19c:	22 50       	subi	r18, 0x02	; 2
    a19e:	31 09       	sbc	r19, r1
    a1a0:	2d 93       	st	X+, r18
    a1a2:	3c 93       	st	X, r19
    a1a4:	3a c0       	rjmp	.+116    	; 0xa21a <malloc+0x122>
    a1a6:	20 91 20 2d 	lds	r18, 0x2D20
    a1aa:	30 91 21 2d 	lds	r19, 0x2D21
    a1ae:	23 2b       	or	r18, r19
    a1b0:	41 f4       	brne	.+16     	; 0xa1c2 <malloc+0xca>
    a1b2:	20 91 02 20 	lds	r18, 0x2002
    a1b6:	30 91 03 20 	lds	r19, 0x2003
    a1ba:	20 93 20 2d 	sts	0x2D20, r18
    a1be:	30 93 21 2d 	sts	0x2D21, r19
    a1c2:	20 91 00 20 	lds	r18, 0x2000
    a1c6:	30 91 01 20 	lds	r19, 0x2001
    a1ca:	21 15       	cp	r18, r1
    a1cc:	31 05       	cpc	r19, r1
    a1ce:	41 f4       	brne	.+16     	; 0xa1e0 <malloc+0xe8>
    a1d0:	2d b7       	in	r18, 0x3d	; 61
    a1d2:	3e b7       	in	r19, 0x3e	; 62
    a1d4:	40 91 04 20 	lds	r20, 0x2004
    a1d8:	50 91 05 20 	lds	r21, 0x2005
    a1dc:	24 1b       	sub	r18, r20
    a1de:	35 0b       	sbc	r19, r21
    a1e0:	e0 91 20 2d 	lds	r30, 0x2D20
    a1e4:	f0 91 21 2d 	lds	r31, 0x2D21
    a1e8:	e2 17       	cp	r30, r18
    a1ea:	f3 07       	cpc	r31, r19
    a1ec:	a0 f4       	brcc	.+40     	; 0xa216 <malloc+0x11e>
    a1ee:	2e 1b       	sub	r18, r30
    a1f0:	3f 0b       	sbc	r19, r31
    a1f2:	28 17       	cp	r18, r24
    a1f4:	39 07       	cpc	r19, r25
    a1f6:	78 f0       	brcs	.+30     	; 0xa216 <malloc+0x11e>
    a1f8:	ac 01       	movw	r20, r24
    a1fa:	4e 5f       	subi	r20, 0xFE	; 254
    a1fc:	5f 4f       	sbci	r21, 0xFF	; 255
    a1fe:	24 17       	cp	r18, r20
    a200:	35 07       	cpc	r19, r21
    a202:	48 f0       	brcs	.+18     	; 0xa216 <malloc+0x11e>
    a204:	4e 0f       	add	r20, r30
    a206:	5f 1f       	adc	r21, r31
    a208:	40 93 20 2d 	sts	0x2D20, r20
    a20c:	50 93 21 2d 	sts	0x2D21, r21
    a210:	81 93       	st	Z+, r24
    a212:	91 93       	st	Z+, r25
    a214:	02 c0       	rjmp	.+4      	; 0xa21a <malloc+0x122>
    a216:	e0 e0       	ldi	r30, 0x00	; 0
    a218:	f0 e0       	ldi	r31, 0x00	; 0
    a21a:	cf 01       	movw	r24, r30
    a21c:	df 91       	pop	r29
    a21e:	cf 91       	pop	r28
    a220:	08 95       	ret

0000a222 <free>:
    a222:	0f 93       	push	r16
    a224:	1f 93       	push	r17
    a226:	cf 93       	push	r28
    a228:	df 93       	push	r29
    a22a:	00 97       	sbiw	r24, 0x00	; 0
    a22c:	09 f4       	brne	.+2      	; 0xa230 <free+0xe>
    a22e:	8c c0       	rjmp	.+280    	; 0xa348 <free+0x126>
    a230:	fc 01       	movw	r30, r24
    a232:	32 97       	sbiw	r30, 0x02	; 2
    a234:	12 82       	std	Z+2, r1	; 0x02
    a236:	13 82       	std	Z+3, r1	; 0x03
    a238:	00 91 22 2d 	lds	r16, 0x2D22
    a23c:	10 91 23 2d 	lds	r17, 0x2D23
    a240:	01 15       	cp	r16, r1
    a242:	11 05       	cpc	r17, r1
    a244:	81 f4       	brne	.+32     	; 0xa266 <free+0x44>
    a246:	20 81       	ld	r18, Z
    a248:	31 81       	ldd	r19, Z+1	; 0x01
    a24a:	82 0f       	add	r24, r18
    a24c:	93 1f       	adc	r25, r19
    a24e:	20 91 20 2d 	lds	r18, 0x2D20
    a252:	30 91 21 2d 	lds	r19, 0x2D21
    a256:	28 17       	cp	r18, r24
    a258:	39 07       	cpc	r19, r25
    a25a:	79 f5       	brne	.+94     	; 0xa2ba <free+0x98>
    a25c:	e0 93 20 2d 	sts	0x2D20, r30
    a260:	f0 93 21 2d 	sts	0x2D21, r31
    a264:	71 c0       	rjmp	.+226    	; 0xa348 <free+0x126>
    a266:	d8 01       	movw	r26, r16
    a268:	40 e0       	ldi	r20, 0x00	; 0
    a26a:	50 e0       	ldi	r21, 0x00	; 0
    a26c:	ae 17       	cp	r26, r30
    a26e:	bf 07       	cpc	r27, r31
    a270:	50 f4       	brcc	.+20     	; 0xa286 <free+0x64>
    a272:	12 96       	adiw	r26, 0x02	; 2
    a274:	2d 91       	ld	r18, X+
    a276:	3c 91       	ld	r19, X
    a278:	13 97       	sbiw	r26, 0x03	; 3
    a27a:	ad 01       	movw	r20, r26
    a27c:	21 15       	cp	r18, r1
    a27e:	31 05       	cpc	r19, r1
    a280:	09 f1       	breq	.+66     	; 0xa2c4 <free+0xa2>
    a282:	d9 01       	movw	r26, r18
    a284:	f3 cf       	rjmp	.-26     	; 0xa26c <free+0x4a>
    a286:	9d 01       	movw	r18, r26
    a288:	da 01       	movw	r26, r20
    a28a:	22 83       	std	Z+2, r18	; 0x02
    a28c:	33 83       	std	Z+3, r19	; 0x03
    a28e:	60 81       	ld	r22, Z
    a290:	71 81       	ldd	r23, Z+1	; 0x01
    a292:	86 0f       	add	r24, r22
    a294:	97 1f       	adc	r25, r23
    a296:	82 17       	cp	r24, r18
    a298:	93 07       	cpc	r25, r19
    a29a:	69 f4       	brne	.+26     	; 0xa2b6 <free+0x94>
    a29c:	ec 01       	movw	r28, r24
    a29e:	28 81       	ld	r18, Y
    a2a0:	39 81       	ldd	r19, Y+1	; 0x01
    a2a2:	26 0f       	add	r18, r22
    a2a4:	37 1f       	adc	r19, r23
    a2a6:	2e 5f       	subi	r18, 0xFE	; 254
    a2a8:	3f 4f       	sbci	r19, 0xFF	; 255
    a2aa:	20 83       	st	Z, r18
    a2ac:	31 83       	std	Z+1, r19	; 0x01
    a2ae:	8a 81       	ldd	r24, Y+2	; 0x02
    a2b0:	9b 81       	ldd	r25, Y+3	; 0x03
    a2b2:	82 83       	std	Z+2, r24	; 0x02
    a2b4:	93 83       	std	Z+3, r25	; 0x03
    a2b6:	45 2b       	or	r20, r21
    a2b8:	29 f4       	brne	.+10     	; 0xa2c4 <free+0xa2>
    a2ba:	e0 93 22 2d 	sts	0x2D22, r30
    a2be:	f0 93 23 2d 	sts	0x2D23, r31
    a2c2:	42 c0       	rjmp	.+132    	; 0xa348 <free+0x126>
    a2c4:	12 96       	adiw	r26, 0x02	; 2
    a2c6:	ed 93       	st	X+, r30
    a2c8:	fc 93       	st	X, r31
    a2ca:	13 97       	sbiw	r26, 0x03	; 3
    a2cc:	ed 01       	movw	r28, r26
    a2ce:	49 91       	ld	r20, Y+
    a2d0:	59 91       	ld	r21, Y+
    a2d2:	9e 01       	movw	r18, r28
    a2d4:	24 0f       	add	r18, r20
    a2d6:	35 1f       	adc	r19, r21
    a2d8:	e2 17       	cp	r30, r18
    a2da:	f3 07       	cpc	r31, r19
    a2dc:	71 f4       	brne	.+28     	; 0xa2fa <free+0xd8>
    a2de:	80 81       	ld	r24, Z
    a2e0:	91 81       	ldd	r25, Z+1	; 0x01
    a2e2:	84 0f       	add	r24, r20
    a2e4:	95 1f       	adc	r25, r21
    a2e6:	02 96       	adiw	r24, 0x02	; 2
    a2e8:	8d 93       	st	X+, r24
    a2ea:	9c 93       	st	X, r25
    a2ec:	11 97       	sbiw	r26, 0x01	; 1
    a2ee:	82 81       	ldd	r24, Z+2	; 0x02
    a2f0:	93 81       	ldd	r25, Z+3	; 0x03
    a2f2:	12 96       	adiw	r26, 0x02	; 2
    a2f4:	8d 93       	st	X+, r24
    a2f6:	9c 93       	st	X, r25
    a2f8:	13 97       	sbiw	r26, 0x03	; 3
    a2fa:	e0 e0       	ldi	r30, 0x00	; 0
    a2fc:	f0 e0       	ldi	r31, 0x00	; 0
    a2fe:	d8 01       	movw	r26, r16
    a300:	12 96       	adiw	r26, 0x02	; 2
    a302:	8d 91       	ld	r24, X+
    a304:	9c 91       	ld	r25, X
    a306:	13 97       	sbiw	r26, 0x03	; 3
    a308:	00 97       	sbiw	r24, 0x00	; 0
    a30a:	19 f0       	breq	.+6      	; 0xa312 <free+0xf0>
    a30c:	f8 01       	movw	r30, r16
    a30e:	8c 01       	movw	r16, r24
    a310:	f6 cf       	rjmp	.-20     	; 0xa2fe <free+0xdc>
    a312:	8d 91       	ld	r24, X+
    a314:	9c 91       	ld	r25, X
    a316:	98 01       	movw	r18, r16
    a318:	2e 5f       	subi	r18, 0xFE	; 254
    a31a:	3f 4f       	sbci	r19, 0xFF	; 255
    a31c:	82 0f       	add	r24, r18
    a31e:	93 1f       	adc	r25, r19
    a320:	20 91 20 2d 	lds	r18, 0x2D20
    a324:	30 91 21 2d 	lds	r19, 0x2D21
    a328:	28 17       	cp	r18, r24
    a32a:	39 07       	cpc	r19, r25
    a32c:	69 f4       	brne	.+26     	; 0xa348 <free+0x126>
    a32e:	30 97       	sbiw	r30, 0x00	; 0
    a330:	29 f4       	brne	.+10     	; 0xa33c <free+0x11a>
    a332:	10 92 22 2d 	sts	0x2D22, r1
    a336:	10 92 23 2d 	sts	0x2D23, r1
    a33a:	02 c0       	rjmp	.+4      	; 0xa340 <free+0x11e>
    a33c:	12 82       	std	Z+2, r1	; 0x02
    a33e:	13 82       	std	Z+3, r1	; 0x03
    a340:	00 93 20 2d 	sts	0x2D20, r16
    a344:	10 93 21 2d 	sts	0x2D21, r17
    a348:	df 91       	pop	r29
    a34a:	cf 91       	pop	r28
    a34c:	1f 91       	pop	r17
    a34e:	0f 91       	pop	r16
    a350:	08 95       	ret

0000a352 <strtoul>:
    a352:	2f 92       	push	r2
    a354:	3f 92       	push	r3
    a356:	4f 92       	push	r4
    a358:	5f 92       	push	r5
    a35a:	6f 92       	push	r6
    a35c:	7f 92       	push	r7
    a35e:	8f 92       	push	r8
    a360:	9f 92       	push	r9
    a362:	af 92       	push	r10
    a364:	bf 92       	push	r11
    a366:	cf 92       	push	r12
    a368:	df 92       	push	r13
    a36a:	ef 92       	push	r14
    a36c:	ff 92       	push	r15
    a36e:	0f 93       	push	r16
    a370:	1f 93       	push	r17
    a372:	cf 93       	push	r28
    a374:	df 93       	push	r29
    a376:	00 d0       	rcall	.+0      	; 0xa378 <strtoul+0x26>
    a378:	00 d0       	rcall	.+0      	; 0xa37a <strtoul+0x28>
    a37a:	cd b7       	in	r28, 0x3d	; 61
    a37c:	de b7       	in	r29, 0x3e	; 62
    a37e:	5c 01       	movw	r10, r24
    a380:	6b 01       	movw	r12, r22
    a382:	7a 01       	movw	r14, r20
    a384:	61 15       	cp	r22, r1
    a386:	71 05       	cpc	r23, r1
    a388:	19 f0       	breq	.+6      	; 0xa390 <strtoul+0x3e>
    a38a:	db 01       	movw	r26, r22
    a38c:	8d 93       	st	X+, r24
    a38e:	9c 93       	st	X, r25
    a390:	e1 14       	cp	r14, r1
    a392:	f1 04       	cpc	r15, r1
    a394:	29 f0       	breq	.+10     	; 0xa3a0 <strtoul+0x4e>
    a396:	c7 01       	movw	r24, r14
    a398:	02 97       	sbiw	r24, 0x02	; 2
    a39a:	83 97       	sbiw	r24, 0x23	; 35
    a39c:	08 f0       	brcs	.+2      	; 0xa3a0 <strtoul+0x4e>
    a39e:	dc c0       	rjmp	.+440    	; 0xa558 <strtoul+0x206>
    a3a0:	35 01       	movw	r6, r10
    a3a2:	bf ef       	ldi	r27, 0xFF	; 255
    a3a4:	6b 1a       	sub	r6, r27
    a3a6:	7b 0a       	sbc	r7, r27
    a3a8:	f5 01       	movw	r30, r10
    a3aa:	10 81       	ld	r17, Z
    a3ac:	81 2f       	mov	r24, r17
    a3ae:	90 e0       	ldi	r25, 0x00	; 0
    a3b0:	0e 94 d3 53 	call	0xa7a6	; 0xa7a6 <isspace>
    a3b4:	89 2b       	or	r24, r25
    a3b6:	11 f0       	breq	.+4      	; 0xa3bc <strtoul+0x6a>
    a3b8:	53 01       	movw	r10, r6
    a3ba:	f2 cf       	rjmp	.-28     	; 0xa3a0 <strtoul+0x4e>
    a3bc:	1d 32       	cpi	r17, 0x2D	; 45
    a3be:	49 f4       	brne	.+18     	; 0xa3d2 <strtoul+0x80>
    a3c0:	35 01       	movw	r6, r10
    a3c2:	f2 e0       	ldi	r31, 0x02	; 2
    a3c4:	6f 0e       	add	r6, r31
    a3c6:	71 1c       	adc	r7, r1
    a3c8:	d5 01       	movw	r26, r10
    a3ca:	11 96       	adiw	r26, 0x01	; 1
    a3cc:	1c 91       	ld	r17, X
    a3ce:	01 e0       	ldi	r16, 0x01	; 1
    a3d0:	09 c0       	rjmp	.+18     	; 0xa3e4 <strtoul+0x92>
    a3d2:	1b 32       	cpi	r17, 0x2B	; 43
    a3d4:	31 f4       	brne	.+12     	; 0xa3e2 <strtoul+0x90>
    a3d6:	35 01       	movw	r6, r10
    a3d8:	b2 e0       	ldi	r27, 0x02	; 2
    a3da:	6b 0e       	add	r6, r27
    a3dc:	71 1c       	adc	r7, r1
    a3de:	f5 01       	movw	r30, r10
    a3e0:	11 81       	ldd	r17, Z+1	; 0x01
    a3e2:	00 e0       	ldi	r16, 0x00	; 0
    a3e4:	e1 14       	cp	r14, r1
    a3e6:	f1 04       	cpc	r15, r1
    a3e8:	09 f4       	brne	.+2      	; 0xa3ec <strtoul+0x9a>
    a3ea:	c4 c0       	rjmp	.+392    	; 0xa574 <strtoul+0x222>
    a3ec:	f0 e1       	ldi	r31, 0x10	; 16
    a3ee:	ef 16       	cp	r14, r31
    a3f0:	f1 04       	cpc	r15, r1
    a3f2:	89 f4       	brne	.+34     	; 0xa416 <strtoul+0xc4>
    a3f4:	10 33       	cpi	r17, 0x30	; 48
    a3f6:	99 f5       	brne	.+102    	; 0xa45e <strtoul+0x10c>
    a3f8:	d3 01       	movw	r26, r6
    a3fa:	8c 91       	ld	r24, X
    a3fc:	8f 7d       	andi	r24, 0xDF	; 223
    a3fe:	88 35       	cpi	r24, 0x58	; 88
    a400:	09 f0       	breq	.+2      	; 0xa404 <strtoul+0xb2>
    a402:	b2 c0       	rjmp	.+356    	; 0xa568 <strtoul+0x216>
    a404:	11 96       	adiw	r26, 0x01	; 1
    a406:	1c 91       	ld	r17, X
    a408:	b2 e0       	ldi	r27, 0x02	; 2
    a40a:	6b 0e       	add	r6, r27
    a40c:	71 1c       	adc	r7, r1
    a40e:	02 60       	ori	r16, 0x02	; 2
    a410:	50 e1       	ldi	r21, 0x10	; 16
    a412:	e5 2e       	mov	r14, r21
    a414:	f1 2c       	mov	r15, r1
    a416:	ea e0       	ldi	r30, 0x0A	; 10
    a418:	ee 16       	cp	r14, r30
    a41a:	f1 04       	cpc	r15, r1
    a41c:	09 f4       	brne	.+2      	; 0xa420 <strtoul+0xce>
    a41e:	b0 c0       	rjmp	.+352    	; 0xa580 <strtoul+0x22e>
    a420:	f0 e1       	ldi	r31, 0x10	; 16
    a422:	ef 16       	cp	r14, r31
    a424:	f1 04       	cpc	r15, r1
    a426:	d9 f0       	breq	.+54     	; 0xa45e <strtoul+0x10c>
    a428:	28 e0       	ldi	r18, 0x08	; 8
    a42a:	e2 16       	cp	r14, r18
    a42c:	f1 04       	cpc	r15, r1
    a42e:	51 f4       	brne	.+20     	; 0xa444 <strtoul+0xf2>
    a430:	38 e0       	ldi	r19, 0x08	; 8
    a432:	e3 2e       	mov	r14, r19
    a434:	f1 2c       	mov	r15, r1
    a436:	88 24       	eor	r8, r8
    a438:	8a 94       	dec	r8
    a43a:	98 2c       	mov	r9, r8
    a43c:	a8 2c       	mov	r10, r8
    a43e:	4f e1       	ldi	r20, 0x1F	; 31
    a440:	b4 2e       	mov	r11, r20
    a442:	13 c0       	rjmp	.+38     	; 0xa46a <strtoul+0x118>
    a444:	6f ef       	ldi	r22, 0xFF	; 255
    a446:	7f ef       	ldi	r23, 0xFF	; 255
    a448:	cb 01       	movw	r24, r22
    a44a:	97 01       	movw	r18, r14
    a44c:	0f 2c       	mov	r0, r15
    a44e:	00 0c       	add	r0, r0
    a450:	44 0b       	sbc	r20, r20
    a452:	55 0b       	sbc	r21, r21
    a454:	0e 94 34 50 	call	0xa068	; 0xa068 <__udivmodsi4>
    a458:	49 01       	movw	r8, r18
    a45a:	5a 01       	movw	r10, r20
    a45c:	06 c0       	rjmp	.+12     	; 0xa46a <strtoul+0x118>
    a45e:	88 24       	eor	r8, r8
    a460:	8a 94       	dec	r8
    a462:	98 2c       	mov	r9, r8
    a464:	a8 2c       	mov	r10, r8
    a466:	2f e0       	ldi	r18, 0x0F	; 15
    a468:	b2 2e       	mov	r11, r18
    a46a:	6d 82       	std	Y+5, r6	; 0x05
    a46c:	7e 82       	std	Y+6, r7	; 0x06
    a46e:	60 e0       	ldi	r22, 0x00	; 0
    a470:	20 e0       	ldi	r18, 0x00	; 0
    a472:	30 e0       	ldi	r19, 0x00	; 0
    a474:	a9 01       	movw	r20, r18
    a476:	27 01       	movw	r4, r14
    a478:	0f 2c       	mov	r0, r15
    a47a:	00 0c       	add	r0, r0
    a47c:	66 08       	sbc	r6, r6
    a47e:	77 08       	sbc	r7, r7
    a480:	2d 80       	ldd	r2, Y+5	; 0x05
    a482:	3e 80       	ldd	r3, Y+6	; 0x06
    a484:	e0 ed       	ldi	r30, 0xD0	; 208
    a486:	e1 0f       	add	r30, r17
    a488:	ea 30       	cpi	r30, 0x0A	; 10
    a48a:	60 f0       	brcs	.+24     	; 0xa4a4 <strtoul+0x152>
    a48c:	8f eb       	ldi	r24, 0xBF	; 191
    a48e:	81 0f       	add	r24, r17
    a490:	8a 31       	cpi	r24, 0x1A	; 26
    a492:	10 f4       	brcc	.+4      	; 0xa498 <strtoul+0x146>
    a494:	e9 ec       	ldi	r30, 0xC9	; 201
    a496:	05 c0       	rjmp	.+10     	; 0xa4a2 <strtoul+0x150>
    a498:	8f e9       	ldi	r24, 0x9F	; 159
    a49a:	81 0f       	add	r24, r17
    a49c:	8a 31       	cpi	r24, 0x1A	; 26
    a49e:	90 f5       	brcc	.+100    	; 0xa504 <strtoul+0x1b2>
    a4a0:	e9 ea       	ldi	r30, 0xA9	; 169
    a4a2:	e1 0f       	add	r30, r17
    a4a4:	8e 2f       	mov	r24, r30
    a4a6:	90 e0       	ldi	r25, 0x00	; 0
    a4a8:	8e 15       	cp	r24, r14
    a4aa:	9f 05       	cpc	r25, r15
    a4ac:	5c f5       	brge	.+86     	; 0xa504 <strtoul+0x1b2>
    a4ae:	6f 3f       	cpi	r22, 0xFF	; 255
    a4b0:	09 f1       	breq	.+66     	; 0xa4f4 <strtoul+0x1a2>
    a4b2:	82 16       	cp	r8, r18
    a4b4:	93 06       	cpc	r9, r19
    a4b6:	a4 06       	cpc	r10, r20
    a4b8:	b5 06       	cpc	r11, r21
    a4ba:	d8 f0       	brcs	.+54     	; 0xa4f2 <strtoul+0x1a0>
    a4bc:	c3 01       	movw	r24, r6
    a4be:	b2 01       	movw	r22, r4
    a4c0:	0e 94 9a 55 	call	0xab34	; 0xab34 <__mulsi3>
    a4c4:	2e 2f       	mov	r18, r30
    a4c6:	30 e0       	ldi	r19, 0x00	; 0
    a4c8:	40 e0       	ldi	r20, 0x00	; 0
    a4ca:	50 e0       	ldi	r21, 0x00	; 0
    a4cc:	29 83       	std	Y+1, r18	; 0x01
    a4ce:	3a 83       	std	Y+2, r19	; 0x02
    a4d0:	4b 83       	std	Y+3, r20	; 0x03
    a4d2:	5c 83       	std	Y+4, r21	; 0x04
    a4d4:	26 0f       	add	r18, r22
    a4d6:	37 1f       	adc	r19, r23
    a4d8:	48 1f       	adc	r20, r24
    a4da:	59 1f       	adc	r21, r25
    a4dc:	89 81       	ldd	r24, Y+1	; 0x01
    a4de:	9a 81       	ldd	r25, Y+2	; 0x02
    a4e0:	ab 81       	ldd	r26, Y+3	; 0x03
    a4e2:	bc 81       	ldd	r27, Y+4	; 0x04
    a4e4:	28 17       	cp	r18, r24
    a4e6:	39 07       	cpc	r19, r25
    a4e8:	4a 07       	cpc	r20, r26
    a4ea:	5b 07       	cpc	r21, r27
    a4ec:	10 f0       	brcs	.+4      	; 0xa4f2 <strtoul+0x1a0>
    a4ee:	61 e0       	ldi	r22, 0x01	; 1
    a4f0:	01 c0       	rjmp	.+2      	; 0xa4f4 <strtoul+0x1a2>
    a4f2:	6f ef       	ldi	r22, 0xFF	; 255
    a4f4:	ed 81       	ldd	r30, Y+5	; 0x05
    a4f6:	fe 81       	ldd	r31, Y+6	; 0x06
    a4f8:	31 96       	adiw	r30, 0x01	; 1
    a4fa:	ed 83       	std	Y+5, r30	; 0x05
    a4fc:	fe 83       	std	Y+6, r31	; 0x06
    a4fe:	d1 01       	movw	r26, r2
    a500:	1c 91       	ld	r17, X
    a502:	be cf       	rjmp	.-132    	; 0xa480 <strtoul+0x12e>
    a504:	c1 14       	cp	r12, r1
    a506:	d1 04       	cpc	r13, r1
    a508:	89 f0       	breq	.+34     	; 0xa52c <strtoul+0x1da>
    a50a:	66 23       	and	r22, r22
    a50c:	39 f0       	breq	.+14     	; 0xa51c <strtoul+0x1ca>
    a50e:	8d 81       	ldd	r24, Y+5	; 0x05
    a510:	9e 81       	ldd	r25, Y+6	; 0x06
    a512:	01 97       	sbiw	r24, 0x01	; 1
    a514:	f6 01       	movw	r30, r12
    a516:	80 83       	st	Z, r24
    a518:	91 83       	std	Z+1, r25	; 0x01
    a51a:	08 c0       	rjmp	.+16     	; 0xa52c <strtoul+0x1da>
    a51c:	01 ff       	sbrs	r16, 1
    a51e:	06 c0       	rjmp	.+12     	; 0xa52c <strtoul+0x1da>
    a520:	8d 81       	ldd	r24, Y+5	; 0x05
    a522:	9e 81       	ldd	r25, Y+6	; 0x06
    a524:	02 97       	sbiw	r24, 0x02	; 2
    a526:	d6 01       	movw	r26, r12
    a528:	8d 93       	st	X+, r24
    a52a:	9c 93       	st	X, r25
    a52c:	00 ff       	sbrs	r16, 0
    a52e:	07 c0       	rjmp	.+14     	; 0xa53e <strtoul+0x1ec>
    a530:	50 95       	com	r21
    a532:	40 95       	com	r20
    a534:	30 95       	com	r19
    a536:	21 95       	neg	r18
    a538:	3f 4f       	sbci	r19, 0xFF	; 255
    a53a:	4f 4f       	sbci	r20, 0xFF	; 255
    a53c:	5f 4f       	sbci	r21, 0xFF	; 255
    a53e:	67 ff       	sbrs	r22, 7
    a540:	10 c0       	rjmp	.+32     	; 0xa562 <strtoul+0x210>
    a542:	82 e2       	ldi	r24, 0x22	; 34
    a544:	90 e0       	ldi	r25, 0x00	; 0
    a546:	80 93 2a 2d 	sts	0x2D2A, r24
    a54a:	90 93 2b 2d 	sts	0x2D2B, r25
    a54e:	6f ef       	ldi	r22, 0xFF	; 255
    a550:	7f ef       	ldi	r23, 0xFF	; 255
    a552:	8f ef       	ldi	r24, 0xFF	; 255
    a554:	9f ef       	ldi	r25, 0xFF	; 255
    a556:	1b c0       	rjmp	.+54     	; 0xa58e <strtoul+0x23c>
    a558:	60 e0       	ldi	r22, 0x00	; 0
    a55a:	70 e0       	ldi	r23, 0x00	; 0
    a55c:	80 e0       	ldi	r24, 0x00	; 0
    a55e:	90 e0       	ldi	r25, 0x00	; 0
    a560:	16 c0       	rjmp	.+44     	; 0xa58e <strtoul+0x23c>
    a562:	b9 01       	movw	r22, r18
    a564:	ca 01       	movw	r24, r20
    a566:	13 c0       	rjmp	.+38     	; 0xa58e <strtoul+0x23c>
    a568:	10 e3       	ldi	r17, 0x30	; 48
    a56a:	e1 14       	cp	r14, r1
    a56c:	f1 04       	cpc	r15, r1
    a56e:	09 f4       	brne	.+2      	; 0xa572 <strtoul+0x220>
    a570:	5f cf       	rjmp	.-322    	; 0xa430 <strtoul+0xde>
    a572:	51 cf       	rjmp	.-350    	; 0xa416 <strtoul+0xc4>
    a574:	10 33       	cpi	r17, 0x30	; 48
    a576:	09 f4       	brne	.+2      	; 0xa57a <strtoul+0x228>
    a578:	3f cf       	rjmp	.-386    	; 0xa3f8 <strtoul+0xa6>
    a57a:	9a e0       	ldi	r25, 0x0A	; 10
    a57c:	e9 2e       	mov	r14, r25
    a57e:	f1 2c       	mov	r15, r1
    a580:	89 e9       	ldi	r24, 0x99	; 153
    a582:	88 2e       	mov	r8, r24
    a584:	98 2c       	mov	r9, r8
    a586:	a8 2c       	mov	r10, r8
    a588:	89 e1       	ldi	r24, 0x19	; 25
    a58a:	b8 2e       	mov	r11, r24
    a58c:	6e cf       	rjmp	.-292    	; 0xa46a <strtoul+0x118>
    a58e:	26 96       	adiw	r28, 0x06	; 6
    a590:	cd bf       	out	0x3d, r28	; 61
    a592:	de bf       	out	0x3e, r29	; 62
    a594:	df 91       	pop	r29
    a596:	cf 91       	pop	r28
    a598:	1f 91       	pop	r17
    a59a:	0f 91       	pop	r16
    a59c:	ff 90       	pop	r15
    a59e:	ef 90       	pop	r14
    a5a0:	df 90       	pop	r13
    a5a2:	cf 90       	pop	r12
    a5a4:	bf 90       	pop	r11
    a5a6:	af 90       	pop	r10
    a5a8:	9f 90       	pop	r9
    a5aa:	8f 90       	pop	r8
    a5ac:	7f 90       	pop	r7
    a5ae:	6f 90       	pop	r6
    a5b0:	5f 90       	pop	r5
    a5b2:	4f 90       	pop	r4
    a5b4:	3f 90       	pop	r3
    a5b6:	2f 90       	pop	r2
    a5b8:	08 95       	ret

0000a5ba <atoi>:
    a5ba:	fc 01       	movw	r30, r24
    a5bc:	88 27       	eor	r24, r24
    a5be:	99 27       	eor	r25, r25
    a5c0:	e8 94       	clt
    a5c2:	21 91       	ld	r18, Z+
    a5c4:	20 32       	cpi	r18, 0x20	; 32
    a5c6:	e9 f3       	breq	.-6      	; 0xa5c2 <atoi+0x8>
    a5c8:	29 30       	cpi	r18, 0x09	; 9
    a5ca:	10 f0       	brcs	.+4      	; 0xa5d0 <atoi+0x16>
    a5cc:	2e 30       	cpi	r18, 0x0E	; 14
    a5ce:	c8 f3       	brcs	.-14     	; 0xa5c2 <atoi+0x8>
    a5d0:	2b 32       	cpi	r18, 0x2B	; 43
    a5d2:	41 f0       	breq	.+16     	; 0xa5e4 <atoi+0x2a>
    a5d4:	2d 32       	cpi	r18, 0x2D	; 45
    a5d6:	39 f4       	brne	.+14     	; 0xa5e6 <atoi+0x2c>
    a5d8:	68 94       	set
    a5da:	04 c0       	rjmp	.+8      	; 0xa5e4 <atoi+0x2a>
    a5dc:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <__mulhi_const_10>
    a5e0:	82 0f       	add	r24, r18
    a5e2:	91 1d       	adc	r25, r1
    a5e4:	21 91       	ld	r18, Z+
    a5e6:	20 53       	subi	r18, 0x30	; 48
    a5e8:	2a 30       	cpi	r18, 0x0A	; 10
    a5ea:	c0 f3       	brcs	.-16     	; 0xa5dc <atoi+0x22>
    a5ec:	1e f4       	brtc	.+6      	; 0xa5f4 <atoi+0x3a>
    a5ee:	90 95       	com	r25
    a5f0:	81 95       	neg	r24
    a5f2:	9f 4f       	sbci	r25, 0xFF	; 255
    a5f4:	08 95       	ret

0000a5f6 <__ftoa_engine>:
    a5f6:	28 30       	cpi	r18, 0x08	; 8
    a5f8:	08 f0       	brcs	.+2      	; 0xa5fc <__ftoa_engine+0x6>
    a5fa:	27 e0       	ldi	r18, 0x07	; 7
    a5fc:	33 27       	eor	r19, r19
    a5fe:	da 01       	movw	r26, r20
    a600:	99 0f       	add	r25, r25
    a602:	31 1d       	adc	r19, r1
    a604:	87 fd       	sbrc	r24, 7
    a606:	91 60       	ori	r25, 0x01	; 1
    a608:	00 96       	adiw	r24, 0x00	; 0
    a60a:	61 05       	cpc	r22, r1
    a60c:	71 05       	cpc	r23, r1
    a60e:	39 f4       	brne	.+14     	; 0xa61e <__ftoa_engine+0x28>
    a610:	32 60       	ori	r19, 0x02	; 2
    a612:	2e 5f       	subi	r18, 0xFE	; 254
    a614:	3d 93       	st	X+, r19
    a616:	30 e3       	ldi	r19, 0x30	; 48
    a618:	2a 95       	dec	r18
    a61a:	e1 f7       	brne	.-8      	; 0xa614 <__ftoa_engine+0x1e>
    a61c:	08 95       	ret
    a61e:	9f 3f       	cpi	r25, 0xFF	; 255
    a620:	30 f0       	brcs	.+12     	; 0xa62e <__ftoa_engine+0x38>
    a622:	80 38       	cpi	r24, 0x80	; 128
    a624:	71 05       	cpc	r23, r1
    a626:	61 05       	cpc	r22, r1
    a628:	09 f0       	breq	.+2      	; 0xa62c <__ftoa_engine+0x36>
    a62a:	3c 5f       	subi	r19, 0xFC	; 252
    a62c:	3c 5f       	subi	r19, 0xFC	; 252
    a62e:	3d 93       	st	X+, r19
    a630:	91 30       	cpi	r25, 0x01	; 1
    a632:	08 f0       	brcs	.+2      	; 0xa636 <__ftoa_engine+0x40>
    a634:	80 68       	ori	r24, 0x80	; 128
    a636:	91 1d       	adc	r25, r1
    a638:	df 93       	push	r29
    a63a:	cf 93       	push	r28
    a63c:	1f 93       	push	r17
    a63e:	0f 93       	push	r16
    a640:	ff 92       	push	r15
    a642:	ef 92       	push	r14
    a644:	19 2f       	mov	r17, r25
    a646:	98 7f       	andi	r25, 0xF8	; 248
    a648:	96 95       	lsr	r25
    a64a:	e9 2f       	mov	r30, r25
    a64c:	96 95       	lsr	r25
    a64e:	96 95       	lsr	r25
    a650:	e9 0f       	add	r30, r25
    a652:	ff 27       	eor	r31, r31
    a654:	e4 5e       	subi	r30, 0xE4	; 228
    a656:	f0 4f       	sbci	r31, 0xF0	; 240
    a658:	99 27       	eor	r25, r25
    a65a:	33 27       	eor	r19, r19
    a65c:	ee 24       	eor	r14, r14
    a65e:	ff 24       	eor	r15, r15
    a660:	a7 01       	movw	r20, r14
    a662:	e7 01       	movw	r28, r14
    a664:	05 90       	lpm	r0, Z+
    a666:	08 94       	sec
    a668:	07 94       	ror	r0
    a66a:	28 f4       	brcc	.+10     	; 0xa676 <__ftoa_engine+0x80>
    a66c:	36 0f       	add	r19, r22
    a66e:	e7 1e       	adc	r14, r23
    a670:	f8 1e       	adc	r15, r24
    a672:	49 1f       	adc	r20, r25
    a674:	51 1d       	adc	r21, r1
    a676:	66 0f       	add	r22, r22
    a678:	77 1f       	adc	r23, r23
    a67a:	88 1f       	adc	r24, r24
    a67c:	99 1f       	adc	r25, r25
    a67e:	06 94       	lsr	r0
    a680:	a1 f7       	brne	.-24     	; 0xa66a <__ftoa_engine+0x74>
    a682:	05 90       	lpm	r0, Z+
    a684:	07 94       	ror	r0
    a686:	28 f4       	brcc	.+10     	; 0xa692 <__ftoa_engine+0x9c>
    a688:	e7 0e       	add	r14, r23
    a68a:	f8 1e       	adc	r15, r24
    a68c:	49 1f       	adc	r20, r25
    a68e:	56 1f       	adc	r21, r22
    a690:	c1 1d       	adc	r28, r1
    a692:	77 0f       	add	r23, r23
    a694:	88 1f       	adc	r24, r24
    a696:	99 1f       	adc	r25, r25
    a698:	66 1f       	adc	r22, r22
    a69a:	06 94       	lsr	r0
    a69c:	a1 f7       	brne	.-24     	; 0xa686 <__ftoa_engine+0x90>
    a69e:	05 90       	lpm	r0, Z+
    a6a0:	07 94       	ror	r0
    a6a2:	28 f4       	brcc	.+10     	; 0xa6ae <__ftoa_engine+0xb8>
    a6a4:	f8 0e       	add	r15, r24
    a6a6:	49 1f       	adc	r20, r25
    a6a8:	56 1f       	adc	r21, r22
    a6aa:	c7 1f       	adc	r28, r23
    a6ac:	d1 1d       	adc	r29, r1
    a6ae:	88 0f       	add	r24, r24
    a6b0:	99 1f       	adc	r25, r25
    a6b2:	66 1f       	adc	r22, r22
    a6b4:	77 1f       	adc	r23, r23
    a6b6:	06 94       	lsr	r0
    a6b8:	a1 f7       	brne	.-24     	; 0xa6a2 <__ftoa_engine+0xac>
    a6ba:	05 90       	lpm	r0, Z+
    a6bc:	07 94       	ror	r0
    a6be:	20 f4       	brcc	.+8      	; 0xa6c8 <__ftoa_engine+0xd2>
    a6c0:	49 0f       	add	r20, r25
    a6c2:	56 1f       	adc	r21, r22
    a6c4:	c7 1f       	adc	r28, r23
    a6c6:	d8 1f       	adc	r29, r24
    a6c8:	99 0f       	add	r25, r25
    a6ca:	66 1f       	adc	r22, r22
    a6cc:	77 1f       	adc	r23, r23
    a6ce:	88 1f       	adc	r24, r24
    a6d0:	06 94       	lsr	r0
    a6d2:	a9 f7       	brne	.-22     	; 0xa6be <__ftoa_engine+0xc8>
    a6d4:	84 91       	lpm	r24, Z
    a6d6:	10 95       	com	r17
    a6d8:	17 70       	andi	r17, 0x07	; 7
    a6da:	41 f0       	breq	.+16     	; 0xa6ec <__ftoa_engine+0xf6>
    a6dc:	d6 95       	lsr	r29
    a6de:	c7 95       	ror	r28
    a6e0:	57 95       	ror	r21
    a6e2:	47 95       	ror	r20
    a6e4:	f7 94       	ror	r15
    a6e6:	e7 94       	ror	r14
    a6e8:	1a 95       	dec	r17
    a6ea:	c1 f7       	brne	.-16     	; 0xa6dc <__ftoa_engine+0xe6>
    a6ec:	e2 ec       	ldi	r30, 0xC2	; 194
    a6ee:	fe e0       	ldi	r31, 0x0E	; 14
    a6f0:	68 94       	set
    a6f2:	15 90       	lpm	r1, Z+
    a6f4:	15 91       	lpm	r17, Z+
    a6f6:	35 91       	lpm	r19, Z+
    a6f8:	65 91       	lpm	r22, Z+
    a6fa:	95 91       	lpm	r25, Z+
    a6fc:	05 90       	lpm	r0, Z+
    a6fe:	7f e2       	ldi	r23, 0x2F	; 47
    a700:	73 95       	inc	r23
    a702:	e1 18       	sub	r14, r1
    a704:	f1 0a       	sbc	r15, r17
    a706:	43 0b       	sbc	r20, r19
    a708:	56 0b       	sbc	r21, r22
    a70a:	c9 0b       	sbc	r28, r25
    a70c:	d0 09       	sbc	r29, r0
    a70e:	c0 f7       	brcc	.-16     	; 0xa700 <__ftoa_engine+0x10a>
    a710:	e1 0c       	add	r14, r1
    a712:	f1 1e       	adc	r15, r17
    a714:	43 1f       	adc	r20, r19
    a716:	56 1f       	adc	r21, r22
    a718:	c9 1f       	adc	r28, r25
    a71a:	d0 1d       	adc	r29, r0
    a71c:	7e f4       	brtc	.+30     	; 0xa73c <__ftoa_engine+0x146>
    a71e:	70 33       	cpi	r23, 0x30	; 48
    a720:	11 f4       	brne	.+4      	; 0xa726 <__ftoa_engine+0x130>
    a722:	8a 95       	dec	r24
    a724:	e6 cf       	rjmp	.-52     	; 0xa6f2 <__ftoa_engine+0xfc>
    a726:	e8 94       	clt
    a728:	01 50       	subi	r16, 0x01	; 1
    a72a:	30 f0       	brcs	.+12     	; 0xa738 <__ftoa_engine+0x142>
    a72c:	08 0f       	add	r16, r24
    a72e:	0a f4       	brpl	.+2      	; 0xa732 <__ftoa_engine+0x13c>
    a730:	00 27       	eor	r16, r16
    a732:	02 17       	cp	r16, r18
    a734:	08 f4       	brcc	.+2      	; 0xa738 <__ftoa_engine+0x142>
    a736:	20 2f       	mov	r18, r16
    a738:	23 95       	inc	r18
    a73a:	02 2f       	mov	r16, r18
    a73c:	7a 33       	cpi	r23, 0x3A	; 58
    a73e:	28 f0       	brcs	.+10     	; 0xa74a <__ftoa_engine+0x154>
    a740:	79 e3       	ldi	r23, 0x39	; 57
    a742:	7d 93       	st	X+, r23
    a744:	2a 95       	dec	r18
    a746:	e9 f7       	brne	.-6      	; 0xa742 <__ftoa_engine+0x14c>
    a748:	10 c0       	rjmp	.+32     	; 0xa76a <__ftoa_engine+0x174>
    a74a:	7d 93       	st	X+, r23
    a74c:	2a 95       	dec	r18
    a74e:	89 f6       	brne	.-94     	; 0xa6f2 <__ftoa_engine+0xfc>
    a750:	06 94       	lsr	r0
    a752:	97 95       	ror	r25
    a754:	67 95       	ror	r22
    a756:	37 95       	ror	r19
    a758:	17 95       	ror	r17
    a75a:	17 94       	ror	r1
    a75c:	e1 18       	sub	r14, r1
    a75e:	f1 0a       	sbc	r15, r17
    a760:	43 0b       	sbc	r20, r19
    a762:	56 0b       	sbc	r21, r22
    a764:	c9 0b       	sbc	r28, r25
    a766:	d0 09       	sbc	r29, r0
    a768:	98 f0       	brcs	.+38     	; 0xa790 <__ftoa_engine+0x19a>
    a76a:	23 95       	inc	r18
    a76c:	7e 91       	ld	r23, -X
    a76e:	73 95       	inc	r23
    a770:	7a 33       	cpi	r23, 0x3A	; 58
    a772:	08 f0       	brcs	.+2      	; 0xa776 <__ftoa_engine+0x180>
    a774:	70 e3       	ldi	r23, 0x30	; 48
    a776:	7c 93       	st	X, r23
    a778:	20 13       	cpse	r18, r16
    a77a:	b8 f7       	brcc	.-18     	; 0xa76a <__ftoa_engine+0x174>
    a77c:	7e 91       	ld	r23, -X
    a77e:	70 61       	ori	r23, 0x10	; 16
    a780:	7d 93       	st	X+, r23
    a782:	30 f0       	brcs	.+12     	; 0xa790 <__ftoa_engine+0x19a>
    a784:	83 95       	inc	r24
    a786:	71 e3       	ldi	r23, 0x31	; 49
    a788:	7d 93       	st	X+, r23
    a78a:	70 e3       	ldi	r23, 0x30	; 48
    a78c:	2a 95       	dec	r18
    a78e:	e1 f7       	brne	.-8      	; 0xa788 <__ftoa_engine+0x192>
    a790:	11 24       	eor	r1, r1
    a792:	ef 90       	pop	r14
    a794:	ff 90       	pop	r15
    a796:	0f 91       	pop	r16
    a798:	1f 91       	pop	r17
    a79a:	cf 91       	pop	r28
    a79c:	df 91       	pop	r29
    a79e:	99 27       	eor	r25, r25
    a7a0:	87 fd       	sbrc	r24, 7
    a7a2:	90 95       	com	r25
    a7a4:	08 95       	ret

0000a7a6 <isspace>:
    a7a6:	91 11       	cpse	r25, r1
    a7a8:	0c 94 97 55 	jmp	0xab2e	; 0xab2e <__ctype_isfalse>
    a7ac:	80 32       	cpi	r24, 0x20	; 32
    a7ae:	19 f0       	breq	.+6      	; 0xa7b6 <isspace+0x10>
    a7b0:	89 50       	subi	r24, 0x09	; 9
    a7b2:	85 50       	subi	r24, 0x05	; 5
    a7b4:	c8 f7       	brcc	.-14     	; 0xa7a8 <isspace+0x2>
    a7b6:	08 95       	ret

0000a7b8 <strcmp_P>:
    a7b8:	fb 01       	movw	r30, r22
    a7ba:	dc 01       	movw	r26, r24
    a7bc:	8d 91       	ld	r24, X+
    a7be:	05 90       	lpm	r0, Z+
    a7c0:	80 19       	sub	r24, r0
    a7c2:	01 10       	cpse	r0, r1
    a7c4:	d9 f3       	breq	.-10     	; 0xa7bc <strcmp_P+0x4>
    a7c6:	99 0b       	sbc	r25, r25
    a7c8:	08 95       	ret

0000a7ca <strnlen_P>:
    a7ca:	fc 01       	movw	r30, r24
    a7cc:	05 90       	lpm	r0, Z+
    a7ce:	61 50       	subi	r22, 0x01	; 1
    a7d0:	70 40       	sbci	r23, 0x00	; 0
    a7d2:	01 10       	cpse	r0, r1
    a7d4:	d8 f7       	brcc	.-10     	; 0xa7cc <strnlen_P+0x2>
    a7d6:	80 95       	com	r24
    a7d8:	90 95       	com	r25
    a7da:	8e 0f       	add	r24, r30
    a7dc:	9f 1f       	adc	r25, r31
    a7de:	08 95       	ret

0000a7e0 <strtok>:
    a7e0:	4e ea       	ldi	r20, 0xAE	; 174
    a7e2:	53 e2       	ldi	r21, 0x23	; 35
    a7e4:	0c 94 36 54 	jmp	0xa86c	; 0xa86c <strtok_r>

0000a7e8 <memcpy>:
    a7e8:	fb 01       	movw	r30, r22
    a7ea:	dc 01       	movw	r26, r24
    a7ec:	02 c0       	rjmp	.+4      	; 0xa7f2 <memcpy+0xa>
    a7ee:	01 90       	ld	r0, Z+
    a7f0:	0d 92       	st	X+, r0
    a7f2:	41 50       	subi	r20, 0x01	; 1
    a7f4:	50 40       	sbci	r21, 0x00	; 0
    a7f6:	d8 f7       	brcc	.-10     	; 0xa7ee <memcpy+0x6>
    a7f8:	08 95       	ret

0000a7fa <strcmp>:
    a7fa:	fb 01       	movw	r30, r22
    a7fc:	dc 01       	movw	r26, r24
    a7fe:	8d 91       	ld	r24, X+
    a800:	01 90       	ld	r0, Z+
    a802:	80 19       	sub	r24, r0
    a804:	01 10       	cpse	r0, r1
    a806:	d9 f3       	breq	.-10     	; 0xa7fe <strcmp+0x4>
    a808:	99 0b       	sbc	r25, r25
    a80a:	08 95       	ret

0000a80c <strcpy>:
    a80c:	fb 01       	movw	r30, r22
    a80e:	dc 01       	movw	r26, r24
    a810:	01 90       	ld	r0, Z+
    a812:	0d 92       	st	X+, r0
    a814:	00 20       	and	r0, r0
    a816:	e1 f7       	brne	.-8      	; 0xa810 <strcpy+0x4>
    a818:	08 95       	ret

0000a81a <strcspn>:
    a81a:	dc 01       	movw	r26, r24
    a81c:	5d 91       	ld	r21, X+
    a81e:	55 23       	and	r21, r21
    a820:	31 f0       	breq	.+12     	; 0xa82e <strcspn+0x14>
    a822:	fb 01       	movw	r30, r22
    a824:	01 90       	ld	r0, Z+
    a826:	05 16       	cp	r0, r21
    a828:	01 10       	cpse	r0, r1
    a82a:	e1 f7       	brne	.-8      	; 0xa824 <strcspn+0xa>
    a82c:	b9 f7       	brne	.-18     	; 0xa81c <strcspn+0x2>
    a82e:	80 95       	com	r24
    a830:	90 95       	com	r25
    a832:	8a 0f       	add	r24, r26
    a834:	9b 1f       	adc	r25, r27
    a836:	08 95       	ret

0000a838 <strncpy>:
    a838:	fb 01       	movw	r30, r22
    a83a:	dc 01       	movw	r26, r24
    a83c:	41 50       	subi	r20, 0x01	; 1
    a83e:	50 40       	sbci	r21, 0x00	; 0
    a840:	48 f0       	brcs	.+18     	; 0xa854 <strncpy+0x1c>
    a842:	01 90       	ld	r0, Z+
    a844:	0d 92       	st	X+, r0
    a846:	00 20       	and	r0, r0
    a848:	c9 f7       	brne	.-14     	; 0xa83c <strncpy+0x4>
    a84a:	01 c0       	rjmp	.+2      	; 0xa84e <strncpy+0x16>
    a84c:	1d 92       	st	X+, r1
    a84e:	41 50       	subi	r20, 0x01	; 1
    a850:	50 40       	sbci	r21, 0x00	; 0
    a852:	e0 f7       	brcc	.-8      	; 0xa84c <strncpy+0x14>
    a854:	08 95       	ret

0000a856 <strnlen>:
    a856:	fc 01       	movw	r30, r24
    a858:	61 50       	subi	r22, 0x01	; 1
    a85a:	70 40       	sbci	r23, 0x00	; 0
    a85c:	01 90       	ld	r0, Z+
    a85e:	01 10       	cpse	r0, r1
    a860:	d8 f7       	brcc	.-10     	; 0xa858 <strnlen+0x2>
    a862:	80 95       	com	r24
    a864:	90 95       	com	r25
    a866:	8e 0f       	add	r24, r30
    a868:	9f 1f       	adc	r25, r31
    a86a:	08 95       	ret

0000a86c <strtok_r>:
    a86c:	fa 01       	movw	r30, r20
    a86e:	a1 91       	ld	r26, Z+
    a870:	b0 81       	ld	r27, Z
    a872:	00 97       	sbiw	r24, 0x00	; 0
    a874:	19 f4       	brne	.+6      	; 0xa87c <strtok_r+0x10>
    a876:	10 97       	sbiw	r26, 0x00	; 0
    a878:	e1 f0       	breq	.+56     	; 0xa8b2 <strtok_r+0x46>
    a87a:	cd 01       	movw	r24, r26
    a87c:	dc 01       	movw	r26, r24
    a87e:	cd 01       	movw	r24, r26
    a880:	0d 90       	ld	r0, X+
    a882:	00 20       	and	r0, r0
    a884:	11 f4       	brne	.+4      	; 0xa88a <strtok_r+0x1e>
    a886:	c0 01       	movw	r24, r0
    a888:	13 c0       	rjmp	.+38     	; 0xa8b0 <strtok_r+0x44>
    a88a:	fb 01       	movw	r30, r22
    a88c:	21 91       	ld	r18, Z+
    a88e:	22 23       	and	r18, r18
    a890:	19 f0       	breq	.+6      	; 0xa898 <strtok_r+0x2c>
    a892:	20 15       	cp	r18, r0
    a894:	d9 f7       	brne	.-10     	; 0xa88c <strtok_r+0x20>
    a896:	f3 cf       	rjmp	.-26     	; 0xa87e <strtok_r+0x12>
    a898:	fb 01       	movw	r30, r22
    a89a:	21 91       	ld	r18, Z+
    a89c:	20 15       	cp	r18, r0
    a89e:	19 f4       	brne	.+6      	; 0xa8a6 <strtok_r+0x3a>
    a8a0:	1e 92       	st	-X, r1
    a8a2:	11 96       	adiw	r26, 0x01	; 1
    a8a4:	06 c0       	rjmp	.+12     	; 0xa8b2 <strtok_r+0x46>
    a8a6:	22 23       	and	r18, r18
    a8a8:	c1 f7       	brne	.-16     	; 0xa89a <strtok_r+0x2e>
    a8aa:	0d 90       	ld	r0, X+
    a8ac:	00 20       	and	r0, r0
    a8ae:	a1 f7       	brne	.-24     	; 0xa898 <strtok_r+0x2c>
    a8b0:	d0 01       	movw	r26, r0
    a8b2:	fa 01       	movw	r30, r20
    a8b4:	a1 93       	st	Z+, r26
    a8b6:	b0 83       	st	Z, r27
    a8b8:	08 95       	ret

0000a8ba <__mulhi_const_10>:
    a8ba:	7a e0       	ldi	r23, 0x0A	; 10
    a8bc:	97 9f       	mul	r25, r23
    a8be:	90 2d       	mov	r25, r0
    a8c0:	87 9f       	mul	r24, r23
    a8c2:	80 2d       	mov	r24, r0
    a8c4:	91 0d       	add	r25, r1
    a8c6:	11 24       	eor	r1, r1
    a8c8:	08 95       	ret

0000a8ca <fputc>:
    a8ca:	0f 93       	push	r16
    a8cc:	1f 93       	push	r17
    a8ce:	cf 93       	push	r28
    a8d0:	df 93       	push	r29
    a8d2:	fb 01       	movw	r30, r22
    a8d4:	23 81       	ldd	r18, Z+3	; 0x03
    a8d6:	21 fd       	sbrc	r18, 1
    a8d8:	03 c0       	rjmp	.+6      	; 0xa8e0 <fputc+0x16>
    a8da:	8f ef       	ldi	r24, 0xFF	; 255
    a8dc:	9f ef       	ldi	r25, 0xFF	; 255
    a8de:	28 c0       	rjmp	.+80     	; 0xa930 <fputc+0x66>
    a8e0:	22 ff       	sbrs	r18, 2
    a8e2:	16 c0       	rjmp	.+44     	; 0xa910 <fputc+0x46>
    a8e4:	46 81       	ldd	r20, Z+6	; 0x06
    a8e6:	57 81       	ldd	r21, Z+7	; 0x07
    a8e8:	24 81       	ldd	r18, Z+4	; 0x04
    a8ea:	35 81       	ldd	r19, Z+5	; 0x05
    a8ec:	42 17       	cp	r20, r18
    a8ee:	53 07       	cpc	r21, r19
    a8f0:	44 f4       	brge	.+16     	; 0xa902 <fputc+0x38>
    a8f2:	a0 81       	ld	r26, Z
    a8f4:	b1 81       	ldd	r27, Z+1	; 0x01
    a8f6:	9d 01       	movw	r18, r26
    a8f8:	2f 5f       	subi	r18, 0xFF	; 255
    a8fa:	3f 4f       	sbci	r19, 0xFF	; 255
    a8fc:	20 83       	st	Z, r18
    a8fe:	31 83       	std	Z+1, r19	; 0x01
    a900:	8c 93       	st	X, r24
    a902:	26 81       	ldd	r18, Z+6	; 0x06
    a904:	37 81       	ldd	r19, Z+7	; 0x07
    a906:	2f 5f       	subi	r18, 0xFF	; 255
    a908:	3f 4f       	sbci	r19, 0xFF	; 255
    a90a:	26 83       	std	Z+6, r18	; 0x06
    a90c:	37 83       	std	Z+7, r19	; 0x07
    a90e:	10 c0       	rjmp	.+32     	; 0xa930 <fputc+0x66>
    a910:	eb 01       	movw	r28, r22
    a912:	09 2f       	mov	r16, r25
    a914:	18 2f       	mov	r17, r24
    a916:	00 84       	ldd	r0, Z+8	; 0x08
    a918:	f1 85       	ldd	r31, Z+9	; 0x09
    a91a:	e0 2d       	mov	r30, r0
    a91c:	19 95       	eicall
    a91e:	89 2b       	or	r24, r25
    a920:	e1 f6       	brne	.-72     	; 0xa8da <fputc+0x10>
    a922:	8e 81       	ldd	r24, Y+6	; 0x06
    a924:	9f 81       	ldd	r25, Y+7	; 0x07
    a926:	01 96       	adiw	r24, 0x01	; 1
    a928:	8e 83       	std	Y+6, r24	; 0x06
    a92a:	9f 83       	std	Y+7, r25	; 0x07
    a92c:	81 2f       	mov	r24, r17
    a92e:	90 2f       	mov	r25, r16
    a930:	df 91       	pop	r29
    a932:	cf 91       	pop	r28
    a934:	1f 91       	pop	r17
    a936:	0f 91       	pop	r16
    a938:	08 95       	ret

0000a93a <printf>:
    a93a:	cf 93       	push	r28
    a93c:	df 93       	push	r29
    a93e:	cd b7       	in	r28, 0x3d	; 61
    a940:	de b7       	in	r29, 0x3e	; 62
    a942:	ae 01       	movw	r20, r28
    a944:	4a 5f       	subi	r20, 0xFA	; 250
    a946:	5f 4f       	sbci	r21, 0xFF	; 255
    a948:	fa 01       	movw	r30, r20
    a94a:	61 91       	ld	r22, Z+
    a94c:	71 91       	ld	r23, Z+
    a94e:	af 01       	movw	r20, r30
    a950:	80 91 26 2d 	lds	r24, 0x2D26
    a954:	90 91 27 2d 	lds	r25, 0x2D27
    a958:	0e 94 6d 4c 	call	0x98da	; 0x98da <vfprintf>
    a95c:	df 91       	pop	r29
    a95e:	cf 91       	pop	r28
    a960:	08 95       	ret

0000a962 <printf_P>:
    a962:	0f 93       	push	r16
    a964:	1f 93       	push	r17
    a966:	cf 93       	push	r28
    a968:	df 93       	push	r29
    a96a:	cd b7       	in	r28, 0x3d	; 61
    a96c:	de b7       	in	r29, 0x3e	; 62
    a96e:	ae 01       	movw	r20, r28
    a970:	48 5f       	subi	r20, 0xF8	; 248
    a972:	5f 4f       	sbci	r21, 0xFF	; 255
    a974:	da 01       	movw	r26, r20
    a976:	6d 91       	ld	r22, X+
    a978:	7d 91       	ld	r23, X+
    a97a:	ad 01       	movw	r20, r26
    a97c:	04 e2       	ldi	r16, 0x24	; 36
    a97e:	1d e2       	ldi	r17, 0x2D	; 45
    a980:	f8 01       	movw	r30, r16
    a982:	82 81       	ldd	r24, Z+2	; 0x02
    a984:	93 81       	ldd	r25, Z+3	; 0x03
    a986:	dc 01       	movw	r26, r24
    a988:	13 96       	adiw	r26, 0x03	; 3
    a98a:	2c 91       	ld	r18, X
    a98c:	13 97       	sbiw	r26, 0x03	; 3
    a98e:	28 60       	ori	r18, 0x08	; 8
    a990:	13 96       	adiw	r26, 0x03	; 3
    a992:	2c 93       	st	X, r18
    a994:	0e 94 6d 4c 	call	0x98da	; 0x98da <vfprintf>
    a998:	d8 01       	movw	r26, r16
    a99a:	12 96       	adiw	r26, 0x02	; 2
    a99c:	ed 91       	ld	r30, X+
    a99e:	fc 91       	ld	r31, X
    a9a0:	13 97       	sbiw	r26, 0x03	; 3
    a9a2:	23 81       	ldd	r18, Z+3	; 0x03
    a9a4:	27 7f       	andi	r18, 0xF7	; 247
    a9a6:	23 83       	std	Z+3, r18	; 0x03
    a9a8:	df 91       	pop	r29
    a9aa:	cf 91       	pop	r28
    a9ac:	1f 91       	pop	r17
    a9ae:	0f 91       	pop	r16
    a9b0:	08 95       	ret

0000a9b2 <putchar>:
    a9b2:	60 91 26 2d 	lds	r22, 0x2D26
    a9b6:	70 91 27 2d 	lds	r23, 0x2D27
    a9ba:	0c 94 65 54 	jmp	0xa8ca	; 0xa8ca <fputc>

0000a9be <puts>:
    a9be:	0f 93       	push	r16
    a9c0:	1f 93       	push	r17
    a9c2:	cf 93       	push	r28
    a9c4:	df 93       	push	r29
    a9c6:	e0 91 26 2d 	lds	r30, 0x2D26
    a9ca:	f0 91 27 2d 	lds	r31, 0x2D27
    a9ce:	23 81       	ldd	r18, Z+3	; 0x03
    a9d0:	21 ff       	sbrs	r18, 1
    a9d2:	1b c0       	rjmp	.+54     	; 0xaa0a <puts+0x4c>
    a9d4:	8c 01       	movw	r16, r24
    a9d6:	d0 e0       	ldi	r29, 0x00	; 0
    a9d8:	c0 e0       	ldi	r28, 0x00	; 0
    a9da:	f8 01       	movw	r30, r16
    a9dc:	81 91       	ld	r24, Z+
    a9de:	8f 01       	movw	r16, r30
    a9e0:	60 91 26 2d 	lds	r22, 0x2D26
    a9e4:	70 91 27 2d 	lds	r23, 0x2D27
    a9e8:	db 01       	movw	r26, r22
    a9ea:	18 96       	adiw	r26, 0x08	; 8
    a9ec:	ed 91       	ld	r30, X+
    a9ee:	fc 91       	ld	r31, X
    a9f0:	19 97       	sbiw	r26, 0x09	; 9
    a9f2:	88 23       	and	r24, r24
    a9f4:	31 f0       	breq	.+12     	; 0xaa02 <puts+0x44>
    a9f6:	19 95       	eicall
    a9f8:	89 2b       	or	r24, r25
    a9fa:	79 f3       	breq	.-34     	; 0xa9da <puts+0x1c>
    a9fc:	df ef       	ldi	r29, 0xFF	; 255
    a9fe:	cf ef       	ldi	r28, 0xFF	; 255
    aa00:	ec cf       	rjmp	.-40     	; 0xa9da <puts+0x1c>
    aa02:	8a e0       	ldi	r24, 0x0A	; 10
    aa04:	19 95       	eicall
    aa06:	89 2b       	or	r24, r25
    aa08:	19 f0       	breq	.+6      	; 0xaa10 <puts+0x52>
    aa0a:	8f ef       	ldi	r24, 0xFF	; 255
    aa0c:	9f ef       	ldi	r25, 0xFF	; 255
    aa0e:	02 c0       	rjmp	.+4      	; 0xaa14 <puts+0x56>
    aa10:	8d 2f       	mov	r24, r29
    aa12:	9c 2f       	mov	r25, r28
    aa14:	df 91       	pop	r29
    aa16:	cf 91       	pop	r28
    aa18:	1f 91       	pop	r17
    aa1a:	0f 91       	pop	r16
    aa1c:	08 95       	ret

0000aa1e <sprintf>:
    aa1e:	0f 93       	push	r16
    aa20:	1f 93       	push	r17
    aa22:	cf 93       	push	r28
    aa24:	df 93       	push	r29
    aa26:	cd b7       	in	r28, 0x3d	; 61
    aa28:	de b7       	in	r29, 0x3e	; 62
    aa2a:	2e 97       	sbiw	r28, 0x0e	; 14
    aa2c:	cd bf       	out	0x3d, r28	; 61
    aa2e:	de bf       	out	0x3e, r29	; 62
    aa30:	0e 89       	ldd	r16, Y+22	; 0x16
    aa32:	1f 89       	ldd	r17, Y+23	; 0x17
    aa34:	86 e0       	ldi	r24, 0x06	; 6
    aa36:	8c 83       	std	Y+4, r24	; 0x04
    aa38:	09 83       	std	Y+1, r16	; 0x01
    aa3a:	1a 83       	std	Y+2, r17	; 0x02
    aa3c:	8f ef       	ldi	r24, 0xFF	; 255
    aa3e:	9f e7       	ldi	r25, 0x7F	; 127
    aa40:	8d 83       	std	Y+5, r24	; 0x05
    aa42:	9e 83       	std	Y+6, r25	; 0x06
    aa44:	ae 01       	movw	r20, r28
    aa46:	46 5e       	subi	r20, 0xE6	; 230
    aa48:	5f 4f       	sbci	r21, 0xFF	; 255
    aa4a:	68 8d       	ldd	r22, Y+24	; 0x18
    aa4c:	79 8d       	ldd	r23, Y+25	; 0x19
    aa4e:	ce 01       	movw	r24, r28
    aa50:	01 96       	adiw	r24, 0x01	; 1
    aa52:	0e 94 6d 4c 	call	0x98da	; 0x98da <vfprintf>
    aa56:	2f 81       	ldd	r18, Y+7	; 0x07
    aa58:	38 85       	ldd	r19, Y+8	; 0x08
    aa5a:	f8 01       	movw	r30, r16
    aa5c:	e2 0f       	add	r30, r18
    aa5e:	f3 1f       	adc	r31, r19
    aa60:	10 82       	st	Z, r1
    aa62:	2e 96       	adiw	r28, 0x0e	; 14
    aa64:	cd bf       	out	0x3d, r28	; 61
    aa66:	de bf       	out	0x3e, r29	; 62
    aa68:	df 91       	pop	r29
    aa6a:	cf 91       	pop	r28
    aa6c:	1f 91       	pop	r17
    aa6e:	0f 91       	pop	r16
    aa70:	08 95       	ret

0000aa72 <__ultoa_invert>:
    aa72:	fa 01       	movw	r30, r20
    aa74:	aa 27       	eor	r26, r26
    aa76:	28 30       	cpi	r18, 0x08	; 8
    aa78:	51 f1       	breq	.+84     	; 0xaace <__ultoa_invert+0x5c>
    aa7a:	20 31       	cpi	r18, 0x10	; 16
    aa7c:	81 f1       	breq	.+96     	; 0xaade <__ultoa_invert+0x6c>
    aa7e:	e8 94       	clt
    aa80:	6f 93       	push	r22
    aa82:	6e 7f       	andi	r22, 0xFE	; 254
    aa84:	6e 5f       	subi	r22, 0xFE	; 254
    aa86:	7f 4f       	sbci	r23, 0xFF	; 255
    aa88:	8f 4f       	sbci	r24, 0xFF	; 255
    aa8a:	9f 4f       	sbci	r25, 0xFF	; 255
    aa8c:	af 4f       	sbci	r26, 0xFF	; 255
    aa8e:	b1 e0       	ldi	r27, 0x01	; 1
    aa90:	3e d0       	rcall	.+124    	; 0xab0e <__ultoa_invert+0x9c>
    aa92:	b4 e0       	ldi	r27, 0x04	; 4
    aa94:	3c d0       	rcall	.+120    	; 0xab0e <__ultoa_invert+0x9c>
    aa96:	67 0f       	add	r22, r23
    aa98:	78 1f       	adc	r23, r24
    aa9a:	89 1f       	adc	r24, r25
    aa9c:	9a 1f       	adc	r25, r26
    aa9e:	a1 1d       	adc	r26, r1
    aaa0:	68 0f       	add	r22, r24
    aaa2:	79 1f       	adc	r23, r25
    aaa4:	8a 1f       	adc	r24, r26
    aaa6:	91 1d       	adc	r25, r1
    aaa8:	a1 1d       	adc	r26, r1
    aaaa:	6a 0f       	add	r22, r26
    aaac:	71 1d       	adc	r23, r1
    aaae:	81 1d       	adc	r24, r1
    aab0:	91 1d       	adc	r25, r1
    aab2:	a1 1d       	adc	r26, r1
    aab4:	20 d0       	rcall	.+64     	; 0xaaf6 <__ultoa_invert+0x84>
    aab6:	09 f4       	brne	.+2      	; 0xaaba <__ultoa_invert+0x48>
    aab8:	68 94       	set
    aaba:	3f 91       	pop	r19
    aabc:	2a e0       	ldi	r18, 0x0A	; 10
    aabe:	26 9f       	mul	r18, r22
    aac0:	11 24       	eor	r1, r1
    aac2:	30 19       	sub	r19, r0
    aac4:	30 5d       	subi	r19, 0xD0	; 208
    aac6:	31 93       	st	Z+, r19
    aac8:	de f6       	brtc	.-74     	; 0xaa80 <__ultoa_invert+0xe>
    aaca:	cf 01       	movw	r24, r30
    aacc:	08 95       	ret
    aace:	46 2f       	mov	r20, r22
    aad0:	47 70       	andi	r20, 0x07	; 7
    aad2:	40 5d       	subi	r20, 0xD0	; 208
    aad4:	41 93       	st	Z+, r20
    aad6:	b3 e0       	ldi	r27, 0x03	; 3
    aad8:	0f d0       	rcall	.+30     	; 0xaaf8 <__ultoa_invert+0x86>
    aada:	c9 f7       	brne	.-14     	; 0xaace <__ultoa_invert+0x5c>
    aadc:	f6 cf       	rjmp	.-20     	; 0xaaca <__ultoa_invert+0x58>
    aade:	46 2f       	mov	r20, r22
    aae0:	4f 70       	andi	r20, 0x0F	; 15
    aae2:	40 5d       	subi	r20, 0xD0	; 208
    aae4:	4a 33       	cpi	r20, 0x3A	; 58
    aae6:	18 f0       	brcs	.+6      	; 0xaaee <__ultoa_invert+0x7c>
    aae8:	49 5d       	subi	r20, 0xD9	; 217
    aaea:	31 fd       	sbrc	r19, 1
    aaec:	40 52       	subi	r20, 0x20	; 32
    aaee:	41 93       	st	Z+, r20
    aaf0:	02 d0       	rcall	.+4      	; 0xaaf6 <__ultoa_invert+0x84>
    aaf2:	a9 f7       	brne	.-22     	; 0xaade <__ultoa_invert+0x6c>
    aaf4:	ea cf       	rjmp	.-44     	; 0xaaca <__ultoa_invert+0x58>
    aaf6:	b4 e0       	ldi	r27, 0x04	; 4
    aaf8:	a6 95       	lsr	r26
    aafa:	97 95       	ror	r25
    aafc:	87 95       	ror	r24
    aafe:	77 95       	ror	r23
    ab00:	67 95       	ror	r22
    ab02:	ba 95       	dec	r27
    ab04:	c9 f7       	brne	.-14     	; 0xaaf8 <__ultoa_invert+0x86>
    ab06:	00 97       	sbiw	r24, 0x00	; 0
    ab08:	61 05       	cpc	r22, r1
    ab0a:	71 05       	cpc	r23, r1
    ab0c:	08 95       	ret
    ab0e:	9b 01       	movw	r18, r22
    ab10:	ac 01       	movw	r20, r24
    ab12:	0a 2e       	mov	r0, r26
    ab14:	06 94       	lsr	r0
    ab16:	57 95       	ror	r21
    ab18:	47 95       	ror	r20
    ab1a:	37 95       	ror	r19
    ab1c:	27 95       	ror	r18
    ab1e:	ba 95       	dec	r27
    ab20:	c9 f7       	brne	.-14     	; 0xab14 <__ultoa_invert+0xa2>
    ab22:	62 0f       	add	r22, r18
    ab24:	73 1f       	adc	r23, r19
    ab26:	84 1f       	adc	r24, r20
    ab28:	95 1f       	adc	r25, r21
    ab2a:	a0 1d       	adc	r26, r0
    ab2c:	08 95       	ret

0000ab2e <__ctype_isfalse>:
    ab2e:	99 27       	eor	r25, r25
    ab30:	88 27       	eor	r24, r24

0000ab32 <__ctype_istrue>:
    ab32:	08 95       	ret

0000ab34 <__mulsi3>:
    ab34:	db 01       	movw	r26, r22
    ab36:	8f 93       	push	r24
    ab38:	9f 93       	push	r25
    ab3a:	0e 94 aa 55 	call	0xab54	; 0xab54 <__muluhisi3>
    ab3e:	bf 91       	pop	r27
    ab40:	af 91       	pop	r26
    ab42:	a2 9f       	mul	r26, r18
    ab44:	80 0d       	add	r24, r0
    ab46:	91 1d       	adc	r25, r1
    ab48:	a3 9f       	mul	r26, r19
    ab4a:	90 0d       	add	r25, r0
    ab4c:	b2 9f       	mul	r27, r18
    ab4e:	90 0d       	add	r25, r0
    ab50:	11 24       	eor	r1, r1
    ab52:	08 95       	ret

0000ab54 <__muluhisi3>:
    ab54:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <__umulhisi3>
    ab58:	a5 9f       	mul	r26, r21
    ab5a:	90 0d       	add	r25, r0
    ab5c:	b4 9f       	mul	r27, r20
    ab5e:	90 0d       	add	r25, r0
    ab60:	a4 9f       	mul	r26, r20
    ab62:	80 0d       	add	r24, r0
    ab64:	91 1d       	adc	r25, r1
    ab66:	11 24       	eor	r1, r1
    ab68:	08 95       	ret

0000ab6a <_exit>:
    ab6a:	f8 94       	cli

0000ab6c <__stop_program>:
    ab6c:	ff cf       	rjmp	.-2      	; 0xab6c <__stop_program>
